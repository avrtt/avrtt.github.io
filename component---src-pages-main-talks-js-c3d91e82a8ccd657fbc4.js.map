{"version":3,"file":"component---src-pages-main-talks-js-c3d91e82a8ccd657fbc4.js","mappings":"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","sources":["webpack://avrtt.blog/./src/images/about/photoAbout.jpg","webpack://avrtt.blog/./src/styles/plaques.module.scss","webpack://avrtt.blog/./src/hooks/useSiteMetadata.js","webpack://avrtt.blog/./src/images/icon.png","webpack://avrtt.blog/./src/components/seo.jsx","webpack://avrtt.blog/./src/images/covers/talks.jpg","webpack://avrtt.blog/./src/pages/main/talks.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/photoAbout-59cd1848d1acc7ce5078c52886c751d1.jpg\";","// extracted by mini-css-extract-plugin\nexport var greyNotice = \"plaques-module--greyNotice--b6d5a\";\nexport var greyNoticeCompact = \"plaques-module--greyNoticeCompact--45c5f\";\nexport var yellowNotice = \"plaques-module--yellowNotice--5d0ef\";","import { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            image\n            siteUrl\n            siteName\n            author\n            twitterUsername\n            facebookUsername\n          }\n        }\n      }\n    `\n  )\n  return site.siteMetadata\n}","export default __webpack_public_path__ + \"static/icon-6e7479889441613ea062cf3d71374ab6.png\";","import React from \"react\"\nimport { useSiteMetadata } from \"../hooks/useSiteMetadata\"\nimport icon from \"../images/icon.png\"\nimport photoAbout from \"../images/about/photoAbout.jpg\";\n\nfunction convertToISO(dateString) {\n  const [day, month, year] = dateString.split('.').map(Number);\n  const date = new Date(year, month - 1, day);\n  return date.toISOString();\n}\n\nconst generateSchema = ({\n  schemaType, // \"Article\" for Research, \"BlogPosting\" for Adventures & Thoughts, \"WebPage\" for anything else\n  title,\n  description,\n  author,\n  photo,\n  datePublished,\n  dateModified,\n  url,\n  image,\n  siteName,\n  siteUrl,\n  siteLogo,\n  keywords,\n  section,\n}) => {\n\n  const baseSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": schemaType,\n    url,\n    description,\n  }\n\n  if (schemaType === \"Article\" || schemaType === \"BlogPosting\") {\n    return {\n      ...baseSchema,\n      headline: title,\n      image: image ? [image] : undefined,\n      datePublished: datePublished || undefined,\n      dateModified: dateModified || datePublished || undefined,\n      articleSection: section,\n      author: {\n        \"@type\": \"Person\",\n        name: author,\n        image: photo,\n        description: \"Traveler, content creator, data scientist, AI researcher, developer, musician.\",\n        url: `${siteUrl}/about`,\n        sameAs: [\n          \"https://youtube.com/@vladaverett\",\n          \"https://instagram.com/avrttv\",\n          \"https://twitter.com/vladaverett\",\n          \"https://tiktok.com/@vladaverett\",\n          \"https://github.com/avrtt\",\n          \"https://facebook.com/vladaverett\",\n          \"https://youtube.com/@avheuristics\",\n          \"https://t.me/venturingforth\",\n          \"https://t.me/avheuristics\",\n          \"https://kaggle.com/lenferdetroud\",\n          \"https://couchsurfing.com/people/averett\",\n          \"https://youtube.com/@noiserett\",\n          \"https://facebook.com/averett.freelance\",\n          \"https://facebook.com/avrttblog\",\n        ],\n      },\n      publisher: {\n        \"@type\": \"Organization\",\n        name: siteName,\n        logo: {\n          \"@type\": \"ImageObject\",\n          url: siteLogo,\n        },\n      },\n      mainEntityOfPage: url,\n      keywords: Array.isArray(keywords) ? keywords.join(\", \") : keywords\n    }\n  }\n\n  return {\n    ...baseSchema,\n    name: title,\n  }\n}\n\nconst SEO = ({\n  title,\n  titleOG,\n  titleTwitter,\n  description,\n  descriptionOG,\n  descriptionTwitter,\n  schemaType = \"WebPage\",\n  keywords,\n  datePublished,\n  dateModified,\n  image,\n  siteUrl,\n  siteName,\n  author,\n  twitterUsername,\n  facebookUsername,\n  imageOG,\n  imageAltOG,\n  imageTwitter,\n  imageAltTwitter,\n  imageWidth,\n  imageHeight,\n  canonicalUrl,\n  flagHidden = false,\n  section,\n  mainTag,\n  type = \"website\", // for og\n  children,\n}) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    image: defaultImage,\n    siteUrl: defaultSiteUrl,\n    siteName: defaultSiteName,\n    author: defaultAuthor,\n    twitterUsername: defaultTwitterUsername,\n    facebookUsername: defaultFacebookUsername,\n  } = useSiteMetadata()\n\n  // fallbacks\n  const seoTitle = title || defaultTitle\n  const ogTitle = titleOG || seoTitle\n  const twTitle = titleTwitter || seoTitle\n  const seoDescription = description || defaultDescription\n  const ogDescription = descriptionOG || seoDescription\n  const twDescription = descriptionTwitter || seoDescription\n  const seoImage = image\n    ? (image.startsWith(\"http\") ? image : `${defaultSiteUrl}${image}`)\n    : `${defaultSiteUrl}${defaultImage}`\n  const ogImage = imageOG || seoImage\n  const ogImageAlt = imageAltOG || ogDescription\n  const twImage = imageTwitter || seoImage\n  const twImageAlt = imageAltTwitter || twDescription\n  const seoSiteUrl = siteUrl || defaultSiteUrl\n  const seoSiteName = siteName || defaultSiteName\n  const seoCanonical = canonicalUrl || seoSiteUrl\n  const seoAuthor = author || defaultAuthor\n  const seoDatePublished = datePublished ? convertToISO(datePublished) : new Date().toISOString()\n  const seoDateModified = dateModified ? convertToISO(dateModified) : seoDatePublished\n  const seoTwitterUsername = twitterUsername || defaultTwitterUsername\n  const seoFacebookUsername = facebookUsername || defaultFacebookUsername\n  const seoKeywords = keywords || [\"\"]\n  const seoTag = mainTag || \"\"\n  const seoSection = section || \"\"\n  \n  var seoSectionClarified\n  if (section === \"adventures\" ) { seoSectionClarified = \"Travel\" } \n  else if (section === \"research\" ) { seoSectionClarified = \"Technology\" } \n  else if (section === \"thoughts\" ) { seoSectionClarified = \"Thoughts\" } \n  else { seoSectionClarified = \"\" }\n\n  const schemaJSON = generateSchema({\n    schemaType,\n    title: seoTitle,\n    description: seoDescription,\n    author: seoAuthor,\n    photo: photoAbout,\n    datePublished: seoDatePublished,\n    dateModified: seoDateModified,\n    url: seoCanonical,\n    image: seoImage,\n    siteName: seoSiteName,\n    siteUrl: seoSiteUrl,\n    siteLogo: icon,\n    keywords: seoKeywords,\n    section: seoSection,\n  })\n\n  return (\n    <>\n      <title>{seoTitle}</title>\n      <meta name=\"description\" content={seoDescription} />\n\n      {seoCanonical && <link rel=\"canonical\" href={seoCanonical} />}\n\n      {seoKeywords && (\n        <meta\n          name=\"keywords\"\n          content={Array.isArray(seoKeywords) ? seoKeywords.join(\", \") : seoKeywords}\n        />\n      )}\n\n      <meta property=\"og:title\" content={ogTitle} />\n      <meta property=\"og:description\" content={ogDescription} />\n      <meta property=\"og:updated_time\" content={seoDateModified} />\n      <meta property=\"og:type\" content={type} />\n      <meta property=\"og:url\" content={seoCanonical} />\n      <meta property=\"og:site_name\" content={seoSiteName} />\n      {ogImage && <meta property=\"og:image\" content={ogImage} />}\n      {imageWidth && <meta property=\"og:image:width\" content={imageWidth} />}\n      {imageHeight && <meta property=\"og:image:height\" content={imageHeight} />}\n      <meta property=\"og:image:alt\" content={ogImageAlt} />\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      {seoTwitterUsername && (<meta name=\"twitter:creator\" content={seoTwitterUsername} />)}\n      {seoTwitterUsername && (<meta name=\"twitter:site\" content={seoTwitterUsername} />)}\n      <meta name=\"twitter:title\" content={twTitle} />\n      <meta name=\"twitter:description\" content={twDescription} />\n      {twImage && <meta name=\"twitter:image\" content={twImage} />}\n      <meta name=\"twitter:image:alt\" content={twImageAlt} />\n\n      {type === \"article\" && (<meta property=\"article:published_time\" content={seoDatePublished} />)}\n      {type === \"article\" && (<meta property=\"article:modified_time\" content={seoDateModified} />)}\n      {type === \"article\" && seoSectionClarified && (<meta property=\"article:section\" content={seoSectionClarified} />)}\n      {type === \"article\" && seoAuthor && (<meta property=\"article:author\" content={seoAuthor} />)}\n      {type === \"article\" && seoFacebookUsername && (<meta property=\"article:publisher\" content={\"https://www.facebook.com/\" + seoFacebookUsername} />)}\n      {type === \"article\" && seoTag && (<meta property=\"article:tag\" content={seoTag} />)}\n      {type === \"article\" && Array.isArray(seoKeywords) && \n        seoKeywords.map((keyword, i) => (\n          <meta key={i} property=\"article:tag\" content={keyword} />\n        ))\n      }\n\n      <meta name=\"robots\" content={flagHidden ? \"noindex, nofollow\" : \"index, follow\"} />\n\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaJSON)}\n      </script>\n\n      {children}\n    </>\n  )\n}\n\nexport default SEO\n","export default __webpack_public_path__ + \"static/talks-4867557a939b66e8c5932f6ffe6a87f0.jpg\";","import React from 'react';\nimport SEO from '../../components/seo'\nimport { Link } from \"gatsby\";\nimport { motion } from 'framer-motion';\nimport { AnimationOnScroll } from 'react-animation-on-scroll';\nimport M from '../../components/Markdown';\nimport cover from '../../images/covers/talks.jpg';\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport { talksLastUpdated } from '../../data/lastUpdated';\nimport * as stylesPlaques from \"../../styles/plaques.module.scss\"\nimport 'animate.css/animate.min.css';\n\nconst Talks = () => {\n\treturn (\n\t\t<motion.div\n\t\t\tinitial={{ opacity: 0 }}\n\t\t\tanimate={{ opacity: 1 }}\n\t\t\texit={{ opacity: 0 }}\n\t\t\ttransition={{ duration: 0.15 }}>\n\n\t\t\t<StaticImage\n\t\t\t\tclassName=\"pageCover\" \n\t\t\t\tsrc=\"../../images/covers/talks.jpg\" \n\t\t\t\talt=\"Page cover: a painting depicting long-haired man giving a speech to an audience\"\n\t\t\t/>\n\n\t\t\t<div class=\"talksBody\">\n\t\t\t\t<br/>\n\t\t\t\t<div class={stylesPlaques.yellowNotice}>\n\t\t\t\t\t<M text=\"## 🚧 HEADS UP!\"/>\n\t\t\t\t\t<M text=\"This page isn't finished or has been hidden for redesign. Content will appear soon.\"/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"lastUpdatedTalks\">UPDATED ON {talksLastUpdated}</div>\n\n\t  \t</motion.div>\n\t);\n};\n  \nexport default Talks;\n\nexport const Head = () => (\n  <SEO \n    title=\"Talks - avrtt.blog\"\n    description=\"\"\n    keywords={[\"\"]}\n    image={cover}\n    canonicalUrl=\"https://avrtt.github.io/talks\"\n    schemaType=\"\"\n    children\n  />\n)\n"],"names":["greyNoticeCompact","yellowNotice","useSiteMetadata","site","useStaticQuery","siteMetadata","convertToISO","dateString","day","month","year","split","map","Number","Date","toISOString","_ref2","title","titleOG","titleTwitter","description","descriptionOG","descriptionTwitter","schemaType","keywords","datePublished","dateModified","image","siteUrl","siteName","author","twitterUsername","facebookUsername","imageOG","imageAltOG","imageTwitter","imageAltTwitter","imageWidth","imageHeight","canonicalUrl","flagHidden","section","mainTag","type","children","defaultTitle","defaultDescription","defaultImage","defaultSiteUrl","defaultSiteName","defaultAuthor","defaultTwitterUsername","defaultFacebookUsername","seoTitle","ogTitle","twTitle","seoDescription","ogDescription","twDescription","seoImage","startsWith","ogImage","ogImageAlt","twImage","twImageAlt","seoSiteUrl","seoSiteName","seoCanonical","seoAuthor","seoDatePublished","seoDateModified","seoTwitterUsername","seoFacebookUsername","seoKeywords","seoTag","seoSection","seoSectionClarified","schemaJSON","_ref","photo","url","siteLogo","baseSchema","headline","undefined","articleSection","name","sameAs","publisher","logo","mainEntityOfPage","Array","isArray","join","generateSchema","photoAbout","icon","React","content","rel","href","property","keyword","i","key","JSON","stringify","Talks","motion","div","initial","opacity","animate","exit","transition","duration","StaticImage","className","src","alt","__imageData","require","class","stylesPlaques","M","text","talksLastUpdated","Head","SEO","cover"],"sourceRoot":""}