{"version":3,"file":"component---src-pages-main-hall-of-fame-tsx-d728f7f06693c9d44c19.js","mappings":"+GAAA,IAAe,IAA0B,wD,oICAzC,EAAe,IAA0B,2D,qBCyCzC,MAvBmBA,IAEjBC,EAAAA,cAACC,EAAAA,EAAOC,IAAG,CACVC,QAAS,CAAEC,QAAS,GACpBC,QAAS,CAAED,QAAS,GACpBE,KAAM,CAAEF,QAAS,GACjBG,WAAY,CAAEC,SAAU,MAExBR,EAAAA,cAACS,EAAAA,EAAW,CACXC,UAAU,YACVC,IAAI,uCACJC,IAAI,sFAAqFC,YAAAC,EAAA,SAG1Fd,EAAAA,cAAA,OAAKU,UAAU,eACdV,EAAAA,cAAA,SAAG,kMAEJA,EAAAA,cAAA,OAAKU,UAAU,oBAAmB,cAAYK,EAAAA,KAQ1C,MAAMC,EAAOA,IAClBhB,EAAAA,cAACiB,EAAAA,EAAG,CACFC,MAAM,4BACNC,YAAY,GACZC,SAAU,CAAC,IACXC,MAAOC,EACPC,aAAa,uCACbC,WAAW,W,kFClDf,EAAe,IAA0B,mD,WCYzC,SAASC,EAAaC,GACpB,MAAOC,EAAKC,EAAOC,GAAQH,EAAWI,MAAM,KAAKC,IAAIC,QAErD,OADa,IAAIC,KAAKJ,EAAMD,EAAQ,EAAGD,GAC3BO,aACd,CAiRA,MArJgCC,IA6BzB,IA7B0B,MAC/BjB,EAAK,QACLkB,EAAO,aACPC,EAAY,YACZlB,EAAW,cACXmB,EAAa,mBACbC,EAAkB,WAClBf,EAAa,UAAS,SACtBJ,EAAQ,cACRoB,EAAa,aACbC,EAAY,MACZpB,EAAK,QACLqB,EAAO,SACPC,EAAQ,OACRC,EAAM,gBACNC,EAAe,iBACfC,EAAgB,QAChBC,EAAO,WACPC,EAAU,aACVC,EAAY,gBACZC,EAAe,WACfC,EAAU,YACVC,EAAW,aACX7B,EAAY,WACZ8B,GAAa,EAAK,QAClBC,EAAO,QACPC,EAAO,KACPC,EAAO,UAAS,SAChBC,GACDtB,EACC,MACEjB,MAAOwC,EACPvC,YAAawC,EACbtC,MAAOuC,EACPlB,QAASmB,EACTlB,SAAUmB,EACVlB,OAAQmB,EACRlB,gBAAiBmB,EACjBlB,iBAAkBmB,IAChBC,EAAAA,EAAAA,KAGEC,EAAWjD,GAASwC,EACpBU,EAAUhC,GAAW+B,EACrBE,EAAUhC,GAAgB8B,EAC1BG,EAAiBnD,GAAewC,EAChCY,EAAgBjC,GAAiBgC,EACjCE,EAAgBjC,GAAsB+B,EACtCG,EAAWpD,EACZA,EAAMqD,WAAW,QAAUrD,EAAQ,GAAGwC,IAAiBxC,IACxD,GAAGwC,IAAiBD,IAClBe,EAAU5B,GAAW0B,EACrBG,EAAa5B,GAAcuB,EAC3BM,EAAU5B,GAAgBwB,EAC1BK,EAAa5B,GAAmBsB,EAChCO,EAAarC,GAAWmB,EACxBmB,GAAcrC,GAAYmB,EAC1BmB,GAAe1D,GAAgBwD,EAC/BG,GAAYtC,GAAUmB,EACtBoB,GAAmB3C,EAAgBf,EAAae,IAAiB,IAAIP,MAAOC,cAC5EkD,GAAkB3C,EAAehB,EAAagB,GAAgB0C,GAC9DE,GAAqBxC,GAAmBmB,EACxCsB,GAAsBxC,GAAoBmB,EAC1CsB,GAAcnE,GAAY,CAAC,IAC3BoE,GAASjC,GAAW,GACpBkC,GAAanC,GAAW,GAE9B,IAAIoC,GAAsB,GACV,eAAZpC,EACFoC,GAAsB,SACD,aAAZpC,EACToC,GAAsB,aACD,aAAZpC,IACToC,GAAsB,YAGxB,MAAMC,GArLeC,KAekB,IAfjB,WACtBpE,EAAU,MACVN,EAAK,YACLC,EAAW,OACXyB,EAAM,MACNiD,EAAK,cACLrD,EAAa,aACbC,EAAY,IACZqD,EAAG,MACHzE,EAAK,SACLsB,EAAQ,QACRD,EAAO,SACPqD,EAAQ,SACR3E,EAAQ,QACRkC,GACYsC,EAEZ,MAAMI,EAAa,CACjB,WAAY,qBACZ,QAASxE,EACTsE,MACA3E,eAGF,MAAmB,YAAfK,GAA2C,gBAAfA,EACvB,IACFwE,EACHC,SAAU/E,EACVG,MAAOA,EAAQ,CAACA,QAAS6E,EACzB1D,cAAeA,QAAiB0D,EAChCzD,aAAcA,GAAgBD,QAAiB0D,EAC/CC,eAAgB7C,EAChBV,OAAQ,CACN,QAAS,SACTwD,KAAMxD,EACNvB,MAAOwE,EACP1E,YAAa,iFACb2E,IAAK,GAAGpD,UACR2D,OAAQ,CACN,mCACA,+BACA,kCACA,kCACA,2BACA,mCACA,oCACA,8BACA,4BACA,mCACA,0CACA,iCACA,yCACA,mCAGJC,UAAW,CACT,QAAS,eACTF,KAAMzD,EACN4D,KAAM,CACJ,QAAS,cACTT,IAAKC,IAGTS,iBAAkBV,EAClB1E,SAAUqF,MAAMC,QAAQtF,GAAYA,EAASuF,KAAK,MAAQvF,GAIvD,IACF4E,EACHI,KAAMlF,EACP,EA8GkB0F,CAAe,CAChCpF,aACAN,MAAOiD,EACPhD,YAAamD,EACb1B,OAAQsC,GACRW,MAAOgB,EAAAA,EACPrE,cAAe2C,GACf1C,aAAc2C,GACdU,IAAKb,GACL5D,MAAOoD,EACP9B,SAAUqC,GACVtC,QAASqC,EACTgB,SAAUe,EACV1F,SAAUmE,GACVjC,QAASmC,KAGX,OACEzF,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQmE,GACRnE,EAAAA,cAAA,QAAMoG,KAAK,cAAcW,QAASzC,IAEjCW,IAAgBjF,EAAAA,cAAA,QAAMgH,IAAI,YAAYC,KAAMhC,KAE5CM,IACCvF,EAAAA,cAAA,QACEoG,KAAK,WACLW,QAASN,MAAMC,QAAQnB,IAAeA,GAAYoB,KAAK,MAAQpB,KAInEvF,EAAAA,cAAA,QAAMkH,SAAS,WAAWH,QAAS3C,IACnCpE,EAAAA,cAAA,QAAMkH,SAAS,iBAAiBH,QAASxC,IACzCvE,EAAAA,cAAA,QAAMkH,SAAS,kBAAkBH,QAAS3B,KAC1CpF,EAAAA,cAAA,QAAMkH,SAAS,UAAUH,QAASvD,IAClCxD,EAAAA,cAAA,QAAMkH,SAAS,SAASH,QAAS9B,KACjCjF,EAAAA,cAAA,QAAMkH,SAAS,eAAeH,QAAS/B,KACtCL,GAAW3E,EAAAA,cAAA,QAAMkH,SAAS,WAAWH,QAASpC,IAC9CxB,GAAcnD,EAAAA,cAAA,QAAMkH,SAAS,iBAAiBH,QAAS5D,IACvDC,GAAepD,EAAAA,cAAA,QAAMkH,SAAS,kBAAkBH,QAAS3D,IAC1DpD,EAAAA,cAAA,QAAMkH,SAAS,eAAeH,QAASnC,IAEvC5E,EAAAA,cAAA,QAAMoG,KAAK,eAAeW,QAAQ,wBACjC1B,IAAuBrF,EAAAA,cAAA,QAAMoG,KAAK,kBAAkBW,QAAS1B,KAC7DA,IAAuBrF,EAAAA,cAAA,QAAMoG,KAAK,eAAeW,QAAS1B,KAC3DrF,EAAAA,cAAA,QAAMoG,KAAK,gBAAgBW,QAAS1C,IACpCrE,EAAAA,cAAA,QAAMoG,KAAK,sBAAsBW,QAASvC,IACzCK,GAAW7E,EAAAA,cAAA,QAAMoG,KAAK,gBAAgBW,QAASlC,IAChD7E,EAAAA,cAAA,QAAMoG,KAAK,oBAAoBW,QAASjC,IAE9B,YAATtB,GAAuBxD,EAAAA,cAAA,QAAMkH,SAAS,yBAAyBH,QAAS5B,KAC/D,YAAT3B,GAAuBxD,EAAAA,cAAA,QAAMkH,SAAS,wBAAwBH,QAAS3B,KAC9D,YAAT5B,GAAsBkC,IAAwB1F,EAAAA,cAAA,QAAMkH,SAAS,kBAAkBH,QAASrB,KAC/E,YAATlC,GAAsB0B,IAAclF,EAAAA,cAAA,QAAMkH,SAAS,iBAAiBH,QAAS7B,KACpE,YAAT1B,GAAsB8B,IAAwBtF,EAAAA,cAAA,QAAMkH,SAAS,oBAAoBH,QAAS,4BAA4BzB,OAC7G,YAAT9B,GAAsBgC,IAAWxF,EAAAA,cAAA,QAAMkH,SAAS,cAAcH,QAASvB,KAC9D,YAAThC,GAAsBiD,MAAMC,QAAQnB,KACnCA,GAAYxD,KAAI,CAACoF,EAASC,IACxBpH,EAAAA,cAAA,QAAMqH,IAAKD,EAAGF,SAAS,cAAcH,QAASI,MAIlDnH,EAAAA,cAAA,QAAMoG,KAAK,SAASW,QAAS1D,EAAa,oBAAsB,kBAEhErD,EAAAA,cAAA,UAAQwD,KAAK,uBACV8D,KAAKC,UAAU5B,KAGjBlC,EACA,C,uECzQA,MAAMS,EAAkBA,KAC7B,MAAM,KAAEsD,IAASC,EAAAA,EAAAA,gBAAc,cAkB/B,OAAOD,EAAKE,YAAY,C","sources":["webpack://avrtt.blog/./src/images/about/photoAbout.jpg","webpack://avrtt.blog/./src/images/covers/hall_of_fame.jpg","webpack://avrtt.blog/./src/pages/main/hall_of_fame.tsx","webpack://avrtt.blog/./src/images/icon.png","webpack://avrtt.blog/./src/components/seo.tsx","webpack://avrtt.blog/./src/hooks/useSiteMetadata.ts"],"sourcesContent":["export default __webpack_public_path__ + \"static/photoAbout-59cd1848d1acc7ce5078c52886c751d1.jpg\";","export default __webpack_public_path__ + \"static/hall_of_fame-de4855d0e8463a44d69545b0f127e286.jpg\";","/* \n\nCopyright © 2022  Vladislav Averett (avrtt)\nDistributed under the GNU AGPLv3 license. For details and source code, please refer to <https://github.com/avrtt/avrtt.github.io>.\n\n*/\n\nimport React from 'react';\nimport SEO from '../../components/seo'\nimport { Link } from \"gatsby\";\nimport { motion } from 'framer-motion';\nimport { AnimationOnScroll } from 'react-animation-on-scroll';\nimport M from '../../components/Markdown';\nimport cover from '../../images/covers/hall_of_fame.jpg';\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport { hallOfFameLastUpdated } from '../../data/lastUpdated';\nimport 'animate.css/animate.min.css';\n\nconst HallOfFame = () => {\n\treturn (\n\t\t<motion.div\n\t\t\tinitial={{ opacity: 0 }}\n\t\t\tanimate={{ opacity: 1 }}\n\t\t\texit={{ opacity: 0 }}\n\t\t\ttransition={{ duration: 0.15 }}>\n\n\t\t\t<StaticImage\n\t\t\t\tclassName=\"pageCover\" \n\t\t\t\tsrc=\"../../images/covers/hall_of_fame.jpg\" \n\t\t\t\talt=\"Page cover: a painting depicting a wall with many paintings of people in sunglasses\"\n\t\t\t/>\n\n\t\t\t<div className=\"generalBody\">\n\t\t\t\t<p>This will be a list of the people who have helped me the most, whether they are donators, contributors or just people who gave me a helping hand. I'm posting their links if they don't mind.</p>\n\t\t\t</div>\n\t\t\t<div className=\"lastUpdatedTalks\">UPDATED ON {hallOfFameLastUpdated}</div>\n\n\t  \t</motion.div>\n\t);\n};\n  \nexport default HallOfFame;\n\nexport const Head = () => (\n  <SEO \n    title=\"Hall of fame - avrtt.blog\"\n    description=\"\"\n    keywords={[\"\"]}\n    image={cover}\n    canonicalUrl=\"https://avrtt.github.io/hall_of_fame\"\n    schemaType=\"WebPage\"\n    \n  />\n)\n","export default __webpack_public_path__ + \"static/icon-6e7479889441613ea062cf3d71374ab6.png\";","/* \n\nCopyright © 2022  Vladislav Averett (avrtt)\nDistributed under the GNU AGPLv3 license. For details and source code, please refer to <https://github.com/avrtt/avrtt.github.io>.\n\n*/\n\nimport React from \"react\"\nimport { useSiteMetadata } from \"../hooks/useSiteMetadata\"\nimport icon from \"../images/icon.png\"\nimport photoAbout from \"../images/about/photoAbout.jpg\";\n\nfunction convertToISO(dateString: string): string {\n  const [day, month, year] = dateString.split('.').map(Number);\n  const date = new Date(year, month - 1, day);\n  return date.toISOString();\n}\n\ninterface SchemaProps {\n  schemaType: \"Article\" | \"BlogPosting\" | \"WebPage\" | \"ContactPage\" | \"Course\";\n  title: string;\n  description: string;\n  author: string;\n  photo: string;\n  datePublished?: string;\n  dateModified?: string;\n  url: string;\n  image?: string;\n  siteName: string;\n  siteUrl: string;\n  siteLogo: string;\n  keywords: string[] | string;\n  section: string;\n}\n\nconst generateSchema = ({\n  schemaType,\n  title,\n  description,\n  author,\n  photo,\n  datePublished,\n  dateModified,\n  url,\n  image,\n  siteName,\n  siteUrl,\n  siteLogo,\n  keywords,\n  section,\n}: SchemaProps): Record<string, any> => {\n\n  const baseSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": schemaType,\n    url,\n    description,\n  }\n\n  if (schemaType === \"Article\" || schemaType === \"BlogPosting\") {\n    return {\n      ...baseSchema,\n      headline: title,\n      image: image ? [image] : undefined,\n      datePublished: datePublished || undefined,\n      dateModified: dateModified || datePublished || undefined,\n      articleSection: section,\n      author: {\n        \"@type\": \"Person\",\n        name: author,\n        image: photo,\n        description: \"Traveler, content creator, data scientist, AI researcher, developer, musician.\",\n        url: `${siteUrl}/about`,\n        sameAs: [\n          \"https://youtube.com/@vladaverett\",\n          \"https://instagram.com/avrttv\",\n          \"https://twitter.com/vladaverett\",\n          \"https://tiktok.com/@vladaverett\",\n          \"https://github.com/avrtt\",\n          \"https://facebook.com/vladaverett\",\n          \"https://youtube.com/@avheuristics\",\n          \"https://t.me/venturingforth\",\n          \"https://t.me/avheuristics\",\n          \"https://kaggle.com/lenferdetroud\",\n          \"https://couchsurfing.com/people/averett\",\n          \"https://youtube.com/@noiserett\",\n          \"https://facebook.com/averett.freelance\",\n          \"https://facebook.com/avrttblog\",\n        ],\n      },\n      publisher: {\n        \"@type\": \"Organization\",\n        name: siteName,\n        logo: {\n          \"@type\": \"ImageObject\",\n          url: siteLogo,\n        },\n      },\n      mainEntityOfPage: url,\n      keywords: Array.isArray(keywords) ? keywords.join(\", \") : keywords\n    }\n  }\n\n  return {\n    ...baseSchema,\n    name: title,\n  }\n}\n\ninterface SEOProps {\n  title?: string;\n  titleOG?: string;\n  titleTwitter?: string;\n  description?: string;\n  descriptionOG?: string;\n  descriptionTwitter?: string;\n  schemaType?: \"Article\" | \"BlogPosting\" | \"WebPage\" | \"CollectionPage\" | \"Person\" | \"ContactPage\" | \"Course\";\n  keywords?: string[] | string;\n  datePublished?: string;\n  dateModified?: string;\n  image?: string;\n  siteUrl?: string;\n  siteName?: string;\n  author?: string;\n  twitterUsername?: string;\n  facebookUsername?: string;\n  imageOG?: string;\n  imageAltOG?: string;\n  imageTwitter?: string;\n  imageAltTwitter?: string;\n  imageWidth?: string;\n  imageHeight?: string;\n  canonicalUrl?: string;\n  flagHidden?: boolean;\n  section?: string;\n  mainTag?: string;\n  type?: string; // for og\n  children?: React.ReactNode;\n}\n\nconst SEO: React.FC<SEOProps> = ({\n  title,\n  titleOG,\n  titleTwitter,\n  description,\n  descriptionOG,\n  descriptionTwitter,\n  schemaType = \"WebPage\",\n  keywords,\n  datePublished,\n  dateModified,\n  image,\n  siteUrl,\n  siteName,\n  author,\n  twitterUsername,\n  facebookUsername,\n  imageOG,\n  imageAltOG,\n  imageTwitter,\n  imageAltTwitter,\n  imageWidth,\n  imageHeight,\n  canonicalUrl,\n  flagHidden = false,\n  section,\n  mainTag,\n  type = \"website\", // for og\n  children,\n}) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    image: defaultImage,\n    siteUrl: defaultSiteUrl,\n    siteName: defaultSiteName,\n    author: defaultAuthor,\n    twitterUsername: defaultTwitterUsername,\n    facebookUsername: defaultFacebookUsername,\n  } = useSiteMetadata()\n\n  // fallbacks\n  const seoTitle = title || defaultTitle\n  const ogTitle = titleOG || seoTitle\n  const twTitle = titleTwitter || seoTitle\n  const seoDescription = description || defaultDescription\n  const ogDescription = descriptionOG || seoDescription\n  const twDescription = descriptionTwitter || seoDescription\n  const seoImage = image\n    ? (image.startsWith(\"http\") ? image : `${defaultSiteUrl}${image}`)\n    : `${defaultSiteUrl}${defaultImage}`\n  const ogImage = imageOG || seoImage\n  const ogImageAlt = imageAltOG || ogDescription\n  const twImage = imageTwitter || seoImage\n  const twImageAlt = imageAltTwitter || twDescription\n  const seoSiteUrl = siteUrl || defaultSiteUrl\n  const seoSiteName = siteName || defaultSiteName\n  const seoCanonical = canonicalUrl || seoSiteUrl\n  const seoAuthor = author || defaultAuthor\n  const seoDatePublished = datePublished ? convertToISO(datePublished) : new Date().toISOString()\n  const seoDateModified = dateModified ? convertToISO(dateModified) : seoDatePublished\n  const seoTwitterUsername = twitterUsername || defaultTwitterUsername\n  const seoFacebookUsername = facebookUsername || defaultFacebookUsername\n  const seoKeywords = keywords || [\"\"]\n  const seoTag = mainTag || \"\"\n  const seoSection = section || \"\"\n  \n  let seoSectionClarified = \"\";\n  if (section === \"adventures\") { \n    seoSectionClarified = \"Travel\";\n  } else if (section === \"research\") { \n    seoSectionClarified = \"Technology\";\n  } else if (section === \"thoughts\") { \n    seoSectionClarified = \"Thoughts\";\n  }\n\n  const schemaJSON = generateSchema({\n    schemaType,\n    title: seoTitle,\n    description: seoDescription,\n    author: seoAuthor,\n    photo: photoAbout,\n    datePublished: seoDatePublished,\n    dateModified: seoDateModified,\n    url: seoCanonical,\n    image: seoImage,\n    siteName: seoSiteName,\n    siteUrl: seoSiteUrl,\n    siteLogo: icon,\n    keywords: seoKeywords,\n    section: seoSection,\n  })\n\n  return (\n    <>\n      <title>{seoTitle}</title>\n      <meta name=\"description\" content={seoDescription} />\n\n      {seoCanonical && <link rel=\"canonical\" href={seoCanonical} />}\n\n      {seoKeywords && (\n        <meta\n          name=\"keywords\"\n          content={Array.isArray(seoKeywords) ? seoKeywords.join(\", \") : seoKeywords}\n        />\n      )}\n\n      <meta property=\"og:title\" content={ogTitle} />\n      <meta property=\"og:description\" content={ogDescription} />\n      <meta property=\"og:updated_time\" content={seoDateModified} />\n      <meta property=\"og:type\" content={type} />\n      <meta property=\"og:url\" content={seoCanonical} />\n      <meta property=\"og:site_name\" content={seoSiteName} />\n      {ogImage && <meta property=\"og:image\" content={ogImage} />}\n      {imageWidth && <meta property=\"og:image:width\" content={imageWidth} />}\n      {imageHeight && <meta property=\"og:image:height\" content={imageHeight} />}\n      <meta property=\"og:image:alt\" content={ogImageAlt} />\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      {seoTwitterUsername && (<meta name=\"twitter:creator\" content={seoTwitterUsername} />)}\n      {seoTwitterUsername && (<meta name=\"twitter:site\" content={seoTwitterUsername} />)}\n      <meta name=\"twitter:title\" content={twTitle} />\n      <meta name=\"twitter:description\" content={twDescription} />\n      {twImage && <meta name=\"twitter:image\" content={twImage} />}\n      <meta name=\"twitter:image:alt\" content={twImageAlt} />\n\n      {type === \"article\" && (<meta property=\"article:published_time\" content={seoDatePublished} />)}\n      {type === \"article\" && (<meta property=\"article:modified_time\" content={seoDateModified} />)}\n      {type === \"article\" && seoSectionClarified && (<meta property=\"article:section\" content={seoSectionClarified} />)}\n      {type === \"article\" && seoAuthor && (<meta property=\"article:author\" content={seoAuthor} />)}\n      {type === \"article\" && seoFacebookUsername && (<meta property=\"article:publisher\" content={`https://www.facebook.com/${seoFacebookUsername}`} />)}\n      {type === \"article\" && seoTag && (<meta property=\"article:tag\" content={seoTag} />)}\n      {type === \"article\" && Array.isArray(seoKeywords) && \n        seoKeywords.map((keyword, i) => (\n          <meta key={i} property=\"article:tag\" content={keyword} />\n        ))\n      }\n\n      <meta name=\"robots\" content={flagHidden ? \"noindex, nofollow\" : \"index, follow\"} />\n\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaJSON)}\n      </script>\n\n      {children}\n    </>\n  )\n}\n\nexport default SEO\n","/* \n\nCopyright © 2022  Vladislav Averett (avrtt)\nDistributed under the GNU AGPLv3 license. For details and source code, please refer to <https://github.com/avrtt/avrtt.github.io>.\n\n*/\n\nimport { graphql, useStaticQuery } from \"gatsby\"\n\ninterface SiteMetadata {\n  title: string;\n  description: string;\n  image: string;\n  siteUrl: string;\n  siteName: string;\n  author: string;\n  twitterUsername: string;\n  facebookUsername: string;\n}\n\nexport const useSiteMetadata = (): SiteMetadata => {\n  const { site } = useStaticQuery<{ site: { siteMetadata: SiteMetadata } }>(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            image\n            siteUrl\n            siteName\n            author\n            twitterUsername\n            facebookUsername\n          }\n        }\n      }\n    `\n  )\n  return site.siteMetadata\n}"],"names":["HallOfFame","React","motion","div","initial","opacity","animate","exit","transition","duration","StaticImage","className","src","alt","__imageData","require","hallOfFameLastUpdated","Head","SEO","title","description","keywords","image","cover","canonicalUrl","schemaType","convertToISO","dateString","day","month","year","split","map","Number","Date","toISOString","_ref2","titleOG","titleTwitter","descriptionOG","descriptionTwitter","datePublished","dateModified","siteUrl","siteName","author","twitterUsername","facebookUsername","imageOG","imageAltOG","imageTwitter","imageAltTwitter","imageWidth","imageHeight","flagHidden","section","mainTag","type","children","defaultTitle","defaultDescription","defaultImage","defaultSiteUrl","defaultSiteName","defaultAuthor","defaultTwitterUsername","defaultFacebookUsername","useSiteMetadata","seoTitle","ogTitle","twTitle","seoDescription","ogDescription","twDescription","seoImage","startsWith","ogImage","ogImageAlt","twImage","twImageAlt","seoSiteUrl","seoSiteName","seoCanonical","seoAuthor","seoDatePublished","seoDateModified","seoTwitterUsername","seoFacebookUsername","seoKeywords","seoTag","seoSection","seoSectionClarified","schemaJSON","_ref","photo","url","siteLogo","baseSchema","headline","undefined","articleSection","name","sameAs","publisher","logo","mainEntityOfPage","Array","isArray","join","generateSchema","photoAbout","icon","content","rel","href","property","keyword","i","key","JSON","stringify","site","useStaticQuery","siteMetadata"],"sourceRoot":""}