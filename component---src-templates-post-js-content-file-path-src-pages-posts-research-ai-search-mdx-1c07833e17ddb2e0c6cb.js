"use strict";(self.webpackChunkavrtt_blog=self.webpackChunkavrtt_blog||[]).push([[6235],{49267:function(e,t,a){a.r(t),a.d(t,{Head:function(){return C},PostTemplate:function(){return A},default:function(){return z}});var n=a(54506),i=a(28453),r=a(96540),s=a(16886),l=a(46295),o=a(96098);function c(e){const t=Object.assign({p:"p",ol:"ol",li:"li",br:"br",h2:"h2",a:"a",span:"span",h3:"h3",ul:"ul",strong:"strong"},(0,i.RP)(),e.components),{Image:a}=t;return a||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Image",!0),r.createElement(r.Fragment,null,"\n",r.createElement("br"),"\n","\n","\n",r.createElement(t.p,null,'Artificial intelligence search — often referred to simply as "search" — plays a crucial role in the broader field of AI, serving as a core framework for problem-solving agents that need to find solutions systematically in well-defined or sometimes partially defined spaces. The concept of "search" in AI revolves around exploring possible sequences of actions and outcomes, attempting to arrive at a goal that fulfills certain criteria or solves a particular challenge. At its foundation, AI search is about generating and evaluating states — or sets of possible configurations — using a structured process that can be as naive as exploring every possibility or as sophisticated as leveraging heuristics, constraints, or other domain-specific knowledge.'),"\n",r.createElement(t.p,null,"I find AI search especially motivating because of its wide applicability. From routing problems (like shortest paths in transportation networks) and scheduling tasks (like optimizing resource allocation) to game-playing agents and complex constraint satisfaction puzzles, search mechanisms help cut down potentially astronomically large solution spaces to something manageable. In daily practice, search strategies empower advanced software and intelligent systems, allowing them to identify optimal — or near-optimal — solutions in the face of complexity and uncertainty."),"\n",r.createElement(t.p,null,"This article is intended for readers who have some background in machine learning and data science but wish to dive deeper into the theoretical and practical details of AI-based search strategies. I will walk through fundamental ideas, from the most basic uninformed search techniques to heuristically guided approaches, local search, constraint satisfaction, and adversarial search. I will also highlight relevant insights from research (e.g., from major conferences like NeurIPS or journals like JMLR) that have shaped the modern understanding of AI search and its associated methods. By the end, you should feel confident about where each search strategy fits and how to design or choose the right one for your specific problem context."),"\n",r.createElement(t.p,null,"Below is the overall structure of this article:"),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"Introduction",r.createElement(t.br),"\n","— Motivation for AI search",r.createElement(t.br),"\n","— Definition of search in AI",r.createElement(t.br),"\n","— Problem-solving agents and their role in search",r.createElement(t.br),"\n","— Overview of key search paradigms and techniques"),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"Fundamentals of problem-solving by searching",r.createElement(t.br),"\n","— Defining the search problem (states, actions, goals)",r.createElement(t.br),"\n","— State space representation",r.createElement(t.br),"\n","— Search trees vs. search graphs",r.createElement(t.br),"\n","— Example problems",r.createElement(t.br),"\n","— Algorithmic problem-solving basics"),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"Uninformed (blind) search strategies",r.createElement(t.br),"\n","— Characteristics and limitations of uninformed search",r.createElement(t.br),"\n","— Breadth-first search (BFS)",r.createElement(t.br),"\n","— Depth-first search (DFS)",r.createElement(t.br),"\n","— Uniform-cost search (Dijkstra's algorithm)",r.createElement(t.br),"\n","— Comparison of time and space complexities"),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"Informed (heuristic) search strategies",r.createElement(t.br),"\n","— Heuristic functions and their role in search",r.createElement(t.br),"\n","— Heuristic evaluations (admissibility and consistency)",r.createElement(t.br),"\n","— Greedy best-first search",r.createElement(t.br),"\n","— A* search algorithm",r.createElement(t.br),"\n","— Analysis of performance and optimality"),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"Local search and optimization problems",r.createElement(t.br),"\n","— Motivation for local search (large or infinite state spaces)",r.createElement(t.br),"\n","— Hill-climbing and variants",r.createElement(t.br),"\n","— Simulated annealing",r.createElement(t.br),"\n","— Genetic algorithms and other evolutionary methods",r.createElement(t.br),"\n","— Local search in continuous spaces"),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"Search in complex and uncertain environments",r.createElement(t.br),"\n","— Dealing with nondeterministic actions",r.createElement(t.br),"\n","— Search in partially observable environments",r.createElement(t.br),"\n","— Online search agents for unknown environments"),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"Constraint satisfaction problems (CSPs)",r.createElement(t.br),"\n","— Defining CSPs (variables, domains, constraints)",r.createElement(t.br),"\n","— Constraint propagation and inference in CSPs",r.createElement(t.br),"\n","— Backtracking search for CSPs",r.createElement(t.br),"\n","— Local search for CSPs",r.createElement(t.br),"\n","— The structure of problems (constraint graphs, problem decomposition)"),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"Adversarial search and games",r.createElement(t.br),"\n","— Motivation for adversarial search (two-player games, competitive environments)",r.createElement(t.br),"\n","— Optimal decisions in games (minimax)",r.createElement(t.br),"\n","— Heuristic alpha-beta tree search and pruning",r.createElement(t.br),"\n","— Monte Carlo tree search",r.createElement(t.br),"\n","— Stochastic games and partially observable games",r.createElement(t.br),"\n","— Limitations of game search algorithms"),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"Classical search and its extensions",r.createElement(t.br),"\n","— Review of classic search algorithms",r.createElement(t.br),"\n","— When to use informed vs. uninformed search",r.createElement(t.br),"\n","— Iterative deepening search strategies",r.createElement(t.br),"\n","— Bidirectional search"),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"Advanced topics",r.createElement(t.br),"\n","— Algorithmic problem solving at scale",r.createElement(t.br),"\n","— Enhancing heuristic functions (pattern databases, learning heuristics)",r.createElement(t.br),"\n","— Incorporating domain-specific knowledge",r.createElement(t.br),"\n","— Memory-bounded search (IDA*, SMA*)",r.createElement(t.br),"\n","— Dealing with real-time constraints"),"\n"),"\n"),"\n",r.createElement(t.p,null,"In what follows, I will expand extensively on each section, aiming to provide a robust understanding of AI search for experienced data scientists and ML engineers."),"\n",r.createElement(t.h2,{id:"fundamentals-of-problem-solving-by-searching",style:{position:"relative"}},r.createElement(t.a,{href:"#fundamentals-of-problem-solving-by-searching","aria-label":"fundamentals of problem solving by searching permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"fundamentals of problem-solving by searching"),"\n",r.createElement(t.h3,{id:"defining-the-search-problem-states-actions-goals",style:{position:"relative"}},r.createElement(t.a,{href:"#defining-the-search-problem-states-actions-goals","aria-label":"defining the search problem states actions goals permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"defining the search problem (states, actions, goals)"),"\n",r.createElement(t.p,null,'At the heart of any AI search method is the formal definition of a problem as a set of states, a set of actions that cause state transitions, and one or more goal conditions. A "state" is an abstract representation of the configuration of the system at a given point. For example, in a sliding tile puzzle, a state might be an arrangement of the tiles on the board; in a pathfinding scenario, a state might be a particular location on a map along with certain resources or constraints.'),"\n",r.createElement(t.p,null,'An "action" is a choice that transforms one state into another. Actions can have preconditions (requirements that must be met before the action is applicable), and they may have effects (how the state changes once the action is applied). A "goal" condition is a set of constraints or properties that define when the problem is solved. For instance, the goal in the sliding tile puzzle might be to arrange the tiles in ascending numeric order.'),"\n",r.createElement(t.p,null,"The interplay of states, actions, and goals frames the search space. Agents systematically explore this space to find a path from an initial state to a goal state."),"\n",r.createElement(t.p,null,"Formally, a search problem can be defined as a tuple ",r.createElement(o.A,{text:"\\( (S, A, c, s_0, G) \\)"})," where:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(o.A,{text:"\\(S\\)"})," is the set of possible states."),"\n",r.createElement(t.li,null,r.createElement(o.A,{text:"\\(A\\)"})," is the set of actions or operators that transition between states."),"\n",r.createElement(t.li,null,r.createElement(o.A,{text:"\\(c(s, a, s')\\)"})," defines the cost of applying action ",r.createElement(o.A,{text:"\\(a\\)"})," in state ",r.createElement(o.A,{text:"\\(s\\)"})," that leads to state ",r.createElement(o.A,{text:"\\(s'\\)"}),"."),"\n",r.createElement(t.li,null,r.createElement(o.A,{text:"\\(s_0\\)"})," is the initial state."),"\n",r.createElement(t.li,null,r.createElement(o.A,{text:"\\(G \\subseteq S\\)"})," is the set of goal states."),"\n"),"\n",r.createElement(t.h3,{id:"state-space-representation",style:{position:"relative"}},r.createElement(t.a,{href:"#state-space-representation","aria-label":"state space representation permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"state space representation"),"\n",r.createElement(t.p,null,'The "state space" is the conceptual or literal graph whose nodes correspond to states, and edges correspond to the application of actions. Often, the major challenge lies in how to encode states in a way that is both expressive enough to capture the problem constraints, yet lean enough to be computationally feasible. If the state representation is too large or complex, the search problem can become intractable due to exponential growth in the number of possible states.'),"\n",r.createElement(t.p,null,"For instance, in a scheduling problem, each state can represent the assignment of tasks to resources. However, enumerating all possible assignments might be infeasible if the number of tasks and resources is large. Hence, effective representation and subsequent search methods are essential for real-world applicability."),"\n",r.createElement(t.h3,{id:"search-trees-vs-search-graphs",style:{position:"relative"}},r.createElement(t.a,{href:"#search-trees-vs-search-graphs","aria-label":"search trees vs search graphs permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"search trees vs. search graphs"),"\n",r.createElement(t.p,null,"When an AI agent starts from an initial state ",r.createElement(o.A,{text:"\\(s_0\\)"}),' and branches out by applying actions, we often visualize a "search tree". Each node in the tree represents a state, and each edge corresponds to an action. A search tree is an excellent conceptual tool because it underscores the branching factor — i.e., the average number of successors for each state — and it helps illustrate naive search expansions. However, some states can be reached by multiple paths, which would be represented multiple times in a pure tree.'),"\n",r.createElement(t.p,null,'A "search graph" is a more compact representation that recognizes repeated states, effectively merging paths that arrive at the same state. While search trees are simpler to illustrate conceptually, many practical algorithms internally keep track of visited states to avoid redundant computations.'),"\n",r.createElement(t.h3,{id:"example-problems",style:{position:"relative"}},r.createElement(t.a,{href:"#example-problems","aria-label":"example problems permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"example problems"),"\n",r.createElement(t.p,null,"Search as a problem-solving framework spans a wide array of applications:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Pathfinding in grids and graphs"),": Classic route-finding, navigation, or robotics tasks."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Puzzle solving"),": Sliding tile puzzles, Rubik's Cube solutions, or Sudoku."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Scheduling and planning"),": Coordinating tasks under deadlines and resource constraints."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Network optimization"),": Optimizing flow across a network subject to capacity constraints (sometimes solved by specialized algorithms but grounded in the same conceptual framing of states and transitions)."),"\n"),"\n",r.createElement(t.p,null,'Historically, the well-known "8-puzzle" or "15-puzzle" has served as a popular test for search algorithms, illustrating the complexity that can emerge even from seemingly small or simple problem definitions.'),"\n",r.createElement(t.h3,{id:"algorithmic-problem-solving-basics",style:{position:"relative"}},r.createElement(t.a,{href:"#algorithmic-problem-solving-basics","aria-label":"algorithmic problem solving basics permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"algorithmic problem-solving basics"),"\n",r.createElement(t.p,null,"A systematic way to solve search problems typically involves the following steps:"),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,"Formulate the problem precisely (i.e., define states, actions, costs, and goal conditions)."),"\n",r.createElement(t.li,null,"Define or select an algorithmic strategy for exploring the state space."),"\n",r.createElement(t.li,null,"Execute the search procedure (which might be BFS, DFS, A*, or a more specialized strategy)."),"\n",r.createElement(t.li,null,"Return the path or sequence of actions once a goal state is reached (if one exists)."),"\n"),"\n",r.createElement(t.p,null,"One must also be prepared to address practical concerns such as memory usage, computational complexity, suboptimal solutions, or real-time constraints that limit search depth or expansions. In the sections that follow, I'll cover various strategies that differ mainly by how they expand states and in what order, whether or not they use heuristics, and how they cope with large or partially known search spaces."),"\n",r.createElement(t.h2,{id:"uninformed-blind-search-strategies",style:{position:"relative"}},r.createElement(t.a,{href:"#uninformed-blind-search-strategies","aria-label":"uninformed blind search strategies permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"uninformed (blind) search strategies"),"\n",r.createElement(t.h3,{id:"characteristics-and-limitations-of-uninformed-search",style:{position:"relative"}},r.createElement(t.a,{href:"#characteristics-and-limitations-of-uninformed-search","aria-label":"characteristics and limitations of uninformed search permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"characteristics and limitations of uninformed search"),"\n",r.createElement(t.p,null,'Uninformed search — also known as "blind search" — refers to a category of algorithms that do not exploit additional knowledge about the domain; they do not know how "good" or "close" a state is to the goal. Instead, they blindly explore the state space in a systematic manner. While uninformed methods guarantee certain completeness properties (given enough time and memory), they can be dramatically inefficient. Situations with large state spaces or complicated constraints might render uninformed approaches unusable in practice. Nonetheless, they form the foundation upon which more sophisticated approaches are built, and they are crucial for understanding key concepts like branching factor, depth, and memory usage.'),"\n",r.createElement(t.h3,{id:"breadth-first-search-bfs",style:{position:"relative"}},r.createElement(t.a,{href:"#breadth-first-search-bfs","aria-label":"breadth first search bfs permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"breadth-first search (BFS)"),"\n",r.createElement(t.p,null,"Breadth-first search systematically explores all states at a given depth before moving to the next depth level. This method ensures that if a solution exists at the shallowest level in the search tree, BFS will find it first."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Algorithm (informal outline)"),":"),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,"Begin at the initial state ",r.createElement(o.A,{text:"\\(s_0\\)"}),"."),"\n",r.createElement(t.li,null,"Place ",r.createElement(o.A,{text:"\\(s_0\\)"})," in a queue (FIFO structure)."),"\n",r.createElement(t.li,null,"While the queue is not empty:","\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"Dequeue a state ",r.createElement(o.A,{text:"\\(s\\)"}),"."),"\n",r.createElement(t.li,null,"If ",r.createElement(o.A,{text:"\\(s\\)"})," is a goal state, return the solution."),"\n",r.createElement(t.li,null,"Otherwise, enqueue all unvisited successors of ",r.createElement(o.A,{text:"\\(s\\)"}),"."),"\n"),"\n"),"\n"),"\n",r.createElement(t.p,null,"Here is a minimal Python example to illustrate BFS:"),"\n",r.createElement(l.A,{text:'\nfrom collections import deque\n\ndef bfs(start, goal_test, get_successors):\n    """\n    start: initial state\n    goal_test: function(state) -> bool\n    get_successors: function(state) -> list of successor states\n    """\n    visited = set()\n    queue = deque([start])\n    \n    # parent dict to reconstruct path if needed\n    parent = {start: None}\n    \n    while queue:\n        current = queue.popleft()\n        if goal_test(current):\n            # Reconstruct path\n            path = []\n            while current is not None:\n                path.append(current)\n                current = parent[current]\n            path.reverse()\n            return path\n        \n        visited.add(current)\n        \n        for succ in get_successors(current):\n            if succ not in visited and succ not in queue:\n                parent[succ] = current\n                queue.append(succ)\n                \n    return None  # no solution found\n'}),"\n",r.createElement(t.p,null,"BFS is ",r.createElement(t.strong,null,"complete")," if the branching factor is finite. The time and space complexity can be expressed in terms of the branching factor ",r.createElement(o.A,{text:"\\(b\\)"})," and the depth of the shallowest goal ",r.createElement(o.A,{text:"\\(d\\)"}),". In the worst case, BFS visits on the order of ",r.createElement(o.A,{text:"\\(O(b^d)\\)"})," nodes, which can be prohibitive. Nonetheless, BFS remains popular in scenarios where the state space is small or when we prioritize finding the shallowest solution."),"\n",r.createElement(t.h3,{id:"depth-first-search-dfs",style:{position:"relative"}},r.createElement(t.a,{href:"#depth-first-search-dfs","aria-label":"depth first search dfs permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"depth-first search (DFS)"),"\n",r.createElement(t.p,null,"Depth-first search, in contrast, explores one branch of the tree deeply before backtracking. This approach is easy to implement using recursion or a stack, and it uses far less memory than BFS. However, DFS can get stuck exploring an extremely deep (or infinite) branch, making it incomplete for some unbounded state spaces."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Algorithm (informal outline)"),":"),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,"Start at ",r.createElement(o.A,{text:"\\(s_0\\)"}),"."),"\n",r.createElement(t.li,null,"Follow one child from ",r.createElement(o.A,{text:"\\(s_0\\)"})," to the greatest depth until you reach a goal or can go no further."),"\n",r.createElement(t.li,null,"Backtrack to the first sibling node and continue."),"\n"),"\n",r.createElement(t.p,null,"A simple Python DFS (recursive version) might look like this:"),"\n",r.createElement(l.A,{text:"\ndef dfs(start, goal_test, get_successors, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    \n    if goal_test(start):\n        return [start]\n    \n    for succ in get_successors(start):\n        if succ not in visited:\n            path = dfs(succ, goal_test, get_successors, visited)\n            if path is not None:\n                return [start] + path\n    \n    return None\n"}),"\n",r.createElement(t.p,null,"DFS has a worst-case time complexity of ",r.createElement(o.A,{text:"\\(O(b^m)\\)"})," where ",r.createElement(o.A,{text:"\\(m\\)"})," is the maximum depth of the search tree. If the search space is deep or unbounded, this can be extremely large. However, DFS typically has more manageable memory requirements (proportional to ",r.createElement(o.A,{text:"\\(O(bm)\\)"})," in the worst case)."),"\n",r.createElement(t.h3,{id:"uniform-cost-search-dijkstras-algorithm",style:{position:"relative"}},r.createElement(t.a,{href:"#uniform-cost-search-dijkstras-algorithm","aria-label":"uniform cost search dijkstras algorithm permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"uniform-cost search (dijkstra's algorithm)"),"\n",r.createElement(t.p,null,"Uniform-cost search expands the node with the lowest path cost ",r.createElement(o.A,{text:"\\(g(n)\\)"})," from the initial state to ",r.createElement(o.A,{text:"\\(n\\)"}),". It is in fact Dijkstra's algorithm applied to search graphs, commonly used to find the shortest path in a weighted graph. Instead of searching by shallowest depth, it searches by the least cumulative cost so far."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Key idea"),": Keep a priority queue (often implemented as a min-heap) that orders states by their cumulative path cost. The algorithm always expands the node that has the smallest ",r.createElement(o.A,{text:"\\(g(n)\\)"}),". Thus, if costs are non-negative, uniform-cost search is guaranteed to find the optimal solution."),"\n",r.createElement(t.p,null,"Uniform-cost search often outperforms BFS in cases where the step costs differ because BFS implicitly assumes uniform step cost. However, uniform-cost search can degrade in performance if there are many small-cost edges near the root, as it could expand a large set of low-cost partial paths."),"\n",r.createElement(t.h3,{id:"comparison-of-time-and-space-complexities",style:{position:"relative"}},r.createElement(t.a,{href:"#comparison-of-time-and-space-complexities","aria-label":"comparison of time and space complexities permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"comparison of time and space complexities"),"\n",r.createElement(t.p,null,"Uninformed search strategies often suffer from exponential time complexity relative to the search depth. The choice between BFS, DFS, and uniform-cost search will hinge on whether:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"The solution is known to be at a shallow depth (BFS might be favored)."),"\n",r.createElement(t.li,null,"We have a limited memory budget (DFS might be the only feasible option)."),"\n",r.createElement(t.li,null,"We care about path cost optimality (uniform-cost search is essential if costs vary)."),"\n"),"\n",r.createElement(t.p,null,"A general complexity measure for BFS is ",r.createElement(o.A,{text:"\\(O(b^d)\\)"}),", while DFS is ",r.createElement(o.A,{text:"\\(O(b^m)\\)"})," where ",r.createElement(o.A,{text:"\\(m\\)"})," can be much larger than ",r.createElement(o.A,{text:"\\(d\\)"}),". Uniform-cost search complexity depends on the path cost distribution and still might become large, but it guarantees optimality under non-negative edge costs."),"\n",r.createElement(t.h2,{id:"informed-heuristic-search-strategies",style:{position:"relative"}},r.createElement(t.a,{href:"#informed-heuristic-search-strategies","aria-label":"informed heuristic search strategies permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"informed (heuristic) search strategies"),"\n",r.createElement(t.h3,{id:"heuristic-functions-and-their-role-in-search",style:{position:"relative"}},r.createElement(t.a,{href:"#heuristic-functions-and-their-role-in-search","aria-label":"heuristic functions and their role in search permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"heuristic functions and their role in search"),"\n",r.createElement(t.p,null,'A "heuristic function" ',r.createElement(o.A,{text:"\\(h(n)\\)"})," provides an estimate of the cost (or distance) from node ",r.createElement(o.A,{text:"\\(n\\)"})," to a goal. It encodes additional domain knowledge that helps guide search toward the goal more efficiently. Well-chosen heuristics can dramatically reduce the number of states visited, often turning an otherwise intractable problem into something solvable in practice."),"\n",r.createElement(t.p,null,'Heuristics are particularly well-studied in puzzles and pathfinding problems. For instance, in the "8-puzzle," a common heuristic is the sum of Manhattan distances of each tile from its goal position, ignoring potential interactions between tiles. This heuristic is ',r.createElement(t.strong,null,"admissible"),", meaning it never overestimates the actual distance to the goal. Admissible heuristics ensure that certain algorithms (like A*) will find an optimal solution."),"\n",r.createElement(t.h3,{id:"heuristic-evaluations-admissibility-and-consistency",style:{position:"relative"}},r.createElement(t.a,{href:"#heuristic-evaluations-admissibility-and-consistency","aria-label":"heuristic evaluations admissibility and consistency permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"heuristic evaluations (admissibility and consistency)"),"\n",r.createElement(t.p,null,"Two critical properties for heuristics in the context of informed search algorithms are:"),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Admissibility"),": A heuristic ",r.createElement(o.A,{text:"\\(h(n)\\)"})," is admissible if ",r.createElement(o.A,{text:"\\(h(n) \\leq h^*(n)\\)"})," for all ",r.createElement(o.A,{text:"\\(n\\)"})," (where ",r.createElement(o.A,{text:"\\(h^*(n)\\)"})," is the true minimum cost to reach a goal from ",r.createElement(o.A,{text:"\\(n\\)"}),"). This ensures the heuristic never overestimates the cost."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Consistency (or Monotonicity)"),": A heuristic is consistent if ",r.createElement(o.A,{text:"\\(h(n) \\leq c(n, a, n') + h(n')\\)"})," for every successor ",r.createElement(o.A,{text:"\\(n'\\)"})," of ",r.createElement(o.A,{text:"\\(n\\)"})," generated by action ",r.createElement(o.A,{text:"\\(a\\)"})," with cost ",r.createElement(o.A,{text:"\\(c(n, a, n')\\)"}),'. Consistency implies admissibility, and it ensures that the values of the heuristic function do not "jump" in a way that can break search algorithms.'),"\n"),"\n"),"\n",r.createElement(t.h3,{id:"greedy-best-first-search",style:{position:"relative"}},r.createElement(t.a,{href:"#greedy-best-first-search","aria-label":"greedy best first search permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"greedy best-first search"),"\n",r.createElement(t.p,null,"Greedy best-first search expands nodes in the order of their heuristic value ",r.createElement(o.A,{text:"\\(h(n)\\)"})," alone. In other words, it always pursues the path that appears to lead most directly to the goal, ignoring the cost it took to get there."),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Strength"),": It can be extremely fast in guiding the search toward the goal if the heuristic is strong."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Weakness"),": It is not optimal and can sometimes behave like a naive depth-first approach, wandering down a path that seems promising according to ",r.createElement(o.A,{text:"\\(h(n)\\)"})," but is actually expensive overall."),"\n"),"\n",r.createElement(t.h3,{id:"a-search-algorithm",style:{position:"relative"}},r.createElement(t.a,{href:"#a-search-algorithm","aria-label":"a search algorithm permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"a* search algorithm"),"\n",r.createElement(t.p,null,"A* is one of the most famous and widely used informed search algorithms, balancing both the cost so far and the heuristic estimate:"),"\n",r.createElement(o.A,{text:"\\[\nf(n) = g(n) + h(n)\n\\]"}),"\n",r.createElement(t.p,null,"where ",r.createElement(o.A,{text:"\\(g(n)\\)"})," is the cost from the initial state to ",r.createElement(o.A,{text:"\\(n\\)"}),", and ",r.createElement(o.A,{text:"\\(h(n)\\)"})," is the heuristic estimate from ",r.createElement(o.A,{text:"\\(n\\)"})," to the goal. A* always expands the node with the smallest ",r.createElement(o.A,{text:"\\(f(n)\\)"}),". With an admissible heuristic ",r.createElement(o.A,{text:"\\(h\\)"}),", A* is guaranteed to find an optimal solution. If ",r.createElement(o.A,{text:"\\(h\\)"})," is also consistent, A* is optimally efficient among optimal algorithms (no other optimal algorithm can expand fewer states than A* does with a consistent heuristic)."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Pseudocode snippet"),":"),"\n",r.createElement(l.A,{text:'\nimport heapq\n\ndef a_star_search(start, goal_test, get_successors, h):\n    """\n    start: initial state\n    goal_test: function(state) -> bool\n    get_successors: function(state) -> list of (successor, cost)\n    h: heuristic function(state) -> float\n    """\n    open_list = []\n    heapq.heappush(open_list, (h(start), 0, start))  # (f(n), g(n), state)\n    \n    closed_set = set()\n    parent = {start: None}\n    \n    while open_list:\n        f_val, g_val, current = heapq.heappop(open_list)\n        \n        if goal_test(current):\n            # reconstruct path\n            path = []\n            while current is not None:\n                path.append(current)\n                current = parent[current]\n            path.reverse()\n            return path\n        \n        closed_set.add(current)\n        \n        for succ, cost in get_successors(current):\n            new_g = g_val + cost\n            new_f = new_g + h(succ)\n            \n            if succ in closed_set:\n                continue\n            \n            # You can also keep a visited dict to store best g-values so far \n            heapq.heappush(open_list, (new_f, new_g, succ))\n            if succ not in parent:\n                parent[succ] = current\n    \n    return None\n'}),"\n",r.createElement(t.p,null,"A*'s performance depends heavily on the quality of the heuristic. A perfect heuristic that exactly computes the remaining distance (i.e., ",r.createElement(o.A,{text:"\\(h^*(n)\\)"}),") will guide the search in a straight line toward the goal, effectively turning A* into a uniform-cost search in a drastically reduced state space."),"\n",r.createElement(t.h3,{id:"analysis-of-performance-and-optimality",style:{position:"relative"}},r.createElement(t.a,{href:"#analysis-of-performance-and-optimality","aria-label":"analysis of performance and optimality permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"analysis of performance and optimality"),"\n",r.createElement(t.p,null,'With an admissible heuristic, A* is guaranteed to find an optimal solution if the branching factor is finite. Its time complexity can still be exponential in the worst case, but in many practical applications (like real-world pathfinding or moderately sized puzzles), it performs impressively. The memory footprint can also become a limiting factor since it stores all generated nodes in memory (open and closed sets). Variants like IDA* (Iterative Deepening A*) address this issue, which I will touch on in the "Advanced Topics" section.'),"\n",r.createElement(t.h2,{id:"local-search-and-optimization-problems",style:{position:"relative"}},r.createElement(t.a,{href:"#local-search-and-optimization-problems","aria-label":"local search and optimization problems permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"local search and optimization problems"),"\n",r.createElement(t.h3,{id:"motivation-for-local-search-large-or-infinite-state-spaces",style:{position:"relative"}},r.createElement(t.a,{href:"#motivation-for-local-search-large-or-infinite-state-spaces","aria-label":"motivation for local search large or infinite state spaces permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"motivation for local search (large or infinite state spaces)"),"\n",r.createElement(t.p,null,"For real-world problems that can involve extremely large or even unbounded state spaces, traditional systematic searches (like BFS, DFS, or A*) can run out of memory or time. Moreover, some problems, such as continuous optimization tasks, do not even have a neatly defined discrete state space to traverse in a graph-like manner. In these cases, local search methods provide a viable solution by iteratively improving (or attempting to improve) a single candidate state (or a small population of states in the case of evolutionary methods) until a stopping criterion is reached."),"\n",r.createElement(t.p,null,'Local search is also quite practical for problems that do not require an absolutely optimal solution but instead a "good enough" solution. This is typical in many scheduling and design optimization tasks.'),"\n",r.createElement(t.h3,{id:"hill-climbing-and-variants",style:{position:"relative"}},r.createElement(t.a,{href:"#hill-climbing-and-variants","aria-label":"hill climbing and variants permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"hill-climbing and variants"),"\n",r.createElement(t.p,null,"Hill-climbing is perhaps the simplest local search technique. Starting from an initial candidate, it attempts small modifications (moves) that improve the objective or heuristic value, continuing until no neighbor offers improvement. This approach can easily get stuck in local optima, hence the existence of variants:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Stochastic hill-climbing"),": Randomly chooses among neighboring states that improve the evaluation, introducing some randomness."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"First-choice hill-climbing"),": Evaluates neighbors in random order until it finds a move that results in a net improvement, typically used when the branching factor is large."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Random restarts"),": Repeatedly restarts hill-climbing from random initial states to attempt escaping local optima."),"\n"),"\n",r.createElement(t.h3,{id:"simulated-annealing",style:{position:"relative"}},r.createElement(t.a,{href:"#simulated-annealing","aria-label":"simulated annealing permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"simulated annealing"),"\n",r.createElement(t.p,null,'Simulated annealing is inspired by the physical process of heating and slowly cooling metal to relieve internal stresses and achieve a strong crystal lattice. In the algorithmic analogy, the "temperature" parameter starts high, allowing random moves that may worsen the objective function, and gradually decreases to reduce the probability of such moves. This mechanism helps the search escape local optima by occasionally allowing a "bad" move with a probability that decreases over time.'),"\n",r.createElement(t.p,null,"A commonly used acceptance probability for a move from state ",r.createElement(o.A,{text:"\\(s\\)"})," to state ",r.createElement(o.A,{text:"\\(s'\\)"})," with evaluation difference ",r.createElement(o.A,{text:"\\(\\Delta E = E(s') - E(s)\\)"})," is:"),"\n",r.createElement(o.A,{text:"\\[\nP(\\Delta E) = \\exp\\left(-\\frac{\\Delta E}{T}\\right)\n\\]"}),"\n",r.createElement(t.p,null,"where ",r.createElement(o.A,{text:"\\(T\\)"})," is the current temperature. If ",r.createElement(o.A,{text:"\\(\\Delta E < 0\\)"})," (the move is better), it is always accepted."),"\n",r.createElement(t.h3,{id:"genetic-algorithms-and-other-evolutionary-methods",style:{position:"relative"}},r.createElement(t.a,{href:"#genetic-algorithms-and-other-evolutionary-methods","aria-label":"genetic algorithms and other evolutionary methods permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"genetic algorithms and other evolutionary methods"),"\n",r.createElement(t.p,null,'Genetic algorithms (GAs) operate on a population of candidate solutions (often encoded as "chromosomes") and use biologically inspired operations — selection, crossover, mutation — to iteratively evolve better solutions. The main steps are:'),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Initialization")," of the population."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Selection")," of the fittest individuals to reproduce."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Crossover")," between selected individuals to create new offspring."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Mutation")," of offspring to maintain diversity in the population."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Replacement")," of part of the population with new offspring."),"\n"),"\n",r.createElement(t.p,null,"Over many generations, GAs can yield high-quality solutions even for complex search spaces, given sufficient time and a well-designed fitness function."),"\n",r.createElement(t.h3,{id:"local-search-in-continuous-spaces",style:{position:"relative"}},r.createElement(t.a,{href:"#local-search-in-continuous-spaces","aria-label":"local search in continuous spaces permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"local search in continuous spaces"),"\n",r.createElement(t.p,null,"Local search algorithms also extend to continuous domains. Gradient-based methods like ",r.createElement(t.strong,null,"gradient descent")," or ",r.createElement(t.strong,null,"stochastic gradient descent")," (though typically used in machine learning contexts) can be seen as local search strategies that move in the direction of steepest descent in the solution space. Such methods can be combined with heuristics, momentum terms, or advanced adaptation techniques (e.g., Adam optimizer in deep learning) to refine local search performance in high-dimensional continuous optimization."),"\n",r.createElement(t.p,null,"Local search algorithms are essential in engineering, finance, and operations research, where solution spaces might be enormous, and a thoroughly systematic search would be entirely impractical. Although local search does not guarantee an optimal solution, it is often one of the few feasible approaches for large-scale problems."),"\n",r.createElement(t.h2,{id:"search-in-complex-and-uncertain-environments",style:{position:"relative"}},r.createElement(t.a,{href:"#search-in-complex-and-uncertain-environments","aria-label":"search in complex and uncertain environments permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"search in complex and uncertain environments"),"\n",r.createElement(t.h3,{id:"dealing-with-nondeterministic-actions",style:{position:"relative"}},r.createElement(t.a,{href:"#dealing-with-nondeterministic-actions","aria-label":"dealing with nondeterministic actions permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"dealing with nondeterministic actions"),"\n",r.createElement(t.p,null,"In real-world scenarios, actions might not always have a single guaranteed effect. A delivery robot, for instance, could slip or face unexpected obstructions. In such nondeterministic environments, an action might lead to several possible outcomes. When formulating a search problem, we can represent this by branching into multiple successor states for each action, each with a certain probability or range of outcomes."),"\n",r.createElement(t.p,null,"Algorithms like ",r.createElement(t.strong,null,"AND-OR search")," can handle environments in which the agent must succeed under the worst-case outcome or must handle branching contingencies. If there is a nontrivial probability associated with each outcome, we can incorporate expected cost or utility in the search framework."),"\n",r.createElement(t.h3,{id:"search-in-partially-observable-environments",style:{position:"relative"}},r.createElement(t.a,{href:"#search-in-partially-observable-environments","aria-label":"search in partially observable environments permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"search in partially observable environments"),"\n",r.createElement(t.p,null,"When the agent does not fully observe the underlying state, we can adopt a ",r.createElement(t.strong,null,"belief state"),' approach, in which each "state" in our search representation is actually a set (or distribution) of possible real states. Searching in the space of belief states often leads to combinatorial explosions, but techniques like ',r.createElement(t.strong,null,"Partially Observable Markov Decision Processes (POMDPs)")," provide a framework for acting optimally under uncertainty and partial observability."),"\n",r.createElement(t.h3,{id:"online-search-agents-for-unknown-environments",style:{position:"relative"}},r.createElement(t.a,{href:"#online-search-agents-for-unknown-environments","aria-label":"online search agents for unknown environments permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"online search agents for unknown environments"),"\n",r.createElement(t.p,null,"Sometimes the agent must act before it has complete knowledge of the environment, known as ",r.createElement(t.strong,null,"online search"),". Here, the agent might not know the transition model or the cost structure in advance. It must actively explore and discover the environment while still striving toward a goal. Online versions of BFS or DFS can be used, but they need to incorporate real-time updates to the state space. Some algorithms maintain a learned map of the environment and replan incrementally (e.g., ",r.createElement(t.strong,null,"LRTA"),"*, or Learning Real-Time A*, which updates its heuristic values based on local experiences)."),"\n",r.createElement(t.h2,{id:"constraint-satisfaction-problems-csps",style:{position:"relative"}},r.createElement(t.a,{href:"#constraint-satisfaction-problems-csps","aria-label":"constraint satisfaction problems csps permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"constraint satisfaction problems (csps)"),"\n",r.createElement(t.h3,{id:"defining-csps-variables-domains-constraints",style:{position:"relative"}},r.createElement(t.a,{href:"#defining-csps-variables-domains-constraints","aria-label":"defining csps variables domains constraints permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"defining csps (variables, domains, constraints)"),"\n",r.createElement(t.p,null,"Constraint Satisfaction Problems are a specialized form of search where states are defined by the values of a fixed set of variables. The goal is to find an assignment of values to variables that satisfies all the given constraints. Examples include ",r.createElement(t.strong,null,"map coloring")," (assigning colors to regions on a map so that no two adjacent regions have the same color), ",r.createElement(t.strong,null,"cryptarithmetic puzzles"),", ",r.createElement(t.strong,null,"Sudoku"),", and various scheduling and resource allocation tasks."),"\n",r.createElement(t.p,null,"A CSP is typically specified by:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"A set of variables ",r.createElement(o.A,{text:"\\(X = \\{ x_1, x_2, \\dots, x_n \\}\\)"}),"."),"\n",r.createElement(t.li,null,"Domains for each variable ",r.createElement(o.A,{text:"\\(D(x_i)\\)"}),"."),"\n",r.createElement(t.li,null,"Constraints ",r.createElement(o.A,{text:"\\(C\\)"})," that specify allowable combinations of values."),"\n"),"\n",r.createElement(t.h3,{id:"constraint-propagation-and-inference-in-csps",style:{position:"relative"}},r.createElement(t.a,{href:"#constraint-propagation-and-inference-in-csps","aria-label":"constraint propagation and inference in csps permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"constraint propagation and inference in csps"),"\n",r.createElement(t.p,null,"Instead of blindly enumerating all possible value assignments, CSP solvers can use constraint propagation to reduce the search space. By systematically applying constraints, we can eliminate impossible or inconsistent values early. For example, ",r.createElement(t.strong,null,"Arc Consistency")," algorithms (like AC-3) propagate domain reductions: if a certain value of ",r.createElement(o.A,{text:"\\(x\\)"})," is incompatible with every possible value of ",r.createElement(o.A,{text:"\\(y\\)"}),", then we can remove that value from ",r.createElement(o.A,{text:"\\(x\\)"}),"'s domain."),"\n",r.createElement(t.h3,{id:"backtracking-search-for-csps",style:{position:"relative"}},r.createElement(t.a,{href:"#backtracking-search-for-csps","aria-label":"backtracking search for csps permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"backtracking search for csps"),"\n",r.createElement(t.p,null,"Backtracking is essentially a depth-first search that attempts to assign values to variables sequentially. If a partial assignment violates any constraint, the algorithm backtracks immediately. Intelligent ordering heuristics (like the ",r.createElement(t.strong,null,"minimum remaining values")," heuristic) can greatly enhance efficiency by choosing the variable that is most constrained first."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Example"),": Suppose you have a CSP with variables ",r.createElement(o.A,{text:"\\(x_1, x_2, x_3\\)"})," each with domain ",3,", and constraints that ",r.createElement(o.A,{text:"\\(x_1 \\neq x_2\\)"}),", ",r.createElement(o.A,{text:"\\(x_2 \\neq x_3\\)"}),", and ",r.createElement(o.A,{text:"\\(x_1 \\neq x_3\\)"}),". A naive approach enumerates all combinations (27 total). A backtracking approach with intelligent ordering might reduce the expansions drastically by pruning inconsistent partial solutions as soon as they appear."),"\n",r.createElement(t.h3,{id:"local-search-for-csps",style:{position:"relative"}},r.createElement(t.a,{href:"#local-search-for-csps","aria-label":"local search for csps permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"local search for csps"),"\n",r.createElement(t.p,null,"Local search can also solve CSPs by starting with a complete but inconsistent assignment (e.g., assign all variables random values) and then iteratively making changes that reduce the number of violated constraints. For example, in a map-coloring CSP, you could randomly color each region, then repeatedly pick a conflicted region and change its color to reduce the conflict count. This is the essence of the ",r.createElement(t.strong,null,"min-conflicts")," algorithm, famously applied to the n-queens problem for extremely large n."),"\n",r.createElement(t.h3,{id:"the-structure-of-problems-constraint-graphs-problem-decomposition",style:{position:"relative"}},r.createElement(t.a,{href:"#the-structure-of-problems-constraint-graphs-problem-decomposition","aria-label":"the structure of problems constraint graphs problem decomposition permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"the structure of problems (constraint graphs, problem decomposition)"),"\n",r.createElement(t.p,null,"CSPs can be visualized using ",r.createElement(t.strong,null,"constraint graphs"),", where each node is a variable, and edges denote constraints between variables. Some graphs have specific structures (like trees or bipartite forms) that admit polynomial-time solutions (tree-structured CSPs can be solved efficiently via dynamic programming over the tree). More advanced decomposition methods, like ",r.createElement(t.strong,null,"cycle cutset")," or ",r.createElement(t.strong,null,"tree decomposition"),", can also reduce the complexity of certain CSPs by transforming them into simpler subproblems."),"\n",r.createElement(t.h2,{id:"adversarial-search-and-games",style:{position:"relative"}},r.createElement(t.a,{href:"#adversarial-search-and-games","aria-label":"adversarial search and games permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"adversarial search and games"),"\n",r.createElement(t.h3,{id:"motivation-for-adversarial-search-two-player-games-competitive-environments",style:{position:"relative"}},r.createElement(t.a,{href:"#motivation-for-adversarial-search-two-player-games-competitive-environments","aria-label":"motivation for adversarial search two player games competitive environments permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"motivation for adversarial search (two-player games, competitive environments)"),"\n",r.createElement(t.p,null,"Adversarial search arises in game-playing scenarios where two (or more) agents compete. One agent's gain is often another's loss, so the search problem is no longer about finding a single path to a goal but maximizing a utility function in the presence of an opponent who tries to minimize it."),"\n",r.createElement(t.p,null,"Classic examples include board games like chess, checkers, Go, or tic-tac-toe. The hallmark of adversarial search is the presence of a second player (or multiple players) whose actions directly impact your outcome."),"\n",r.createElement(t.h3,{id:"optimal-decisions-in-games-minimax",style:{position:"relative"}},r.createElement(t.a,{href:"#optimal-decisions-in-games-minimax","aria-label":"optimal decisions in games minimax permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"optimal decisions in games (minimax)"),"\n",r.createElement(t.p,null,'Minimax is the foundational technique for deterministic, perfect-information games involving two players: the "maximizing" player tries to maximize the score, while the "minimizing" player tries to minimize it. A minimax tree alternates layers labeled "max" and "min". The leaf nodes are assigned utility values (the outcome from the perspective of the maximizing player), and these values get backed up to the root by alternating min or max operations at each layer.'),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Formal definition"),":"),"\n",r.createElement(o.A,{text:"\\[\n\\text{Minimax}(n) = \n\\begin{cases}\n\\max_{n' \\in \\text{children}(n)} \\text{Minimax}(n'), & \\text{if } n \\text{ is a max node};\\\\[6pt]\n\\min_{n' \\in \\text{children}(n)} \\text{Minimax}(n'), & \\text{if } n \\text{ is a min node}.\n\\end{cases}\n\\]"}),"\n",r.createElement(t.p,null,"This works perfectly for small game trees but becomes infeasible for large games like chess or Go because the branching factor is huge."),"\n",r.createElement(t.h3,{id:"heuristic-alpha-beta-tree-search-and-pruning",style:{position:"relative"}},r.createElement(t.a,{href:"#heuristic-alpha-beta-tree-search-and-pruning","aria-label":"heuristic alpha beta tree search and pruning permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"heuristic alpha-beta tree search and pruning"),"\n",r.createElement(t.p,null,"Alpha-beta pruning enhances minimax search by pruning branches that cannot affect the final decision. It maintains two bounds: ",r.createElement(s.A,null,"alpha")," (the best value so far for the maximizing player) and ",r.createElement(s.A,null,"beta")," (the best value so far for the minimizing player). When alpha becomes greater than or equal to beta, further exploration of that branch can be cut off. This yields the same result as pure minimax but often with much fewer node expansions, particularly in well-ordered trees."),"\n",r.createElement(t.h3,{id:"monte-carlo-tree-search",style:{position:"relative"}},r.createElement(t.a,{href:"#monte-carlo-tree-search","aria-label":"monte carlo tree search permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"monte carlo tree search"),"\n",r.createElement(t.p,null,"Monte Carlo Tree Search (MCTS) gained prominence through successes in games with enormous branching factors, such as Go (famously used in AlphaGo by DeepMind). MCTS incrementally builds a game tree through repeated random simulations. The four phases of MCTS are:"),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Selection"),": Start at the root and select child nodes according to some policy (e.g., UCB1) until you reach a leaf."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Expansion"),": Expand the leaf node by generating one or more child nodes."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Simulation"),": Play out random moves from the expanded node until a terminal state is reached."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Backpropagation"),": Propagate the simulation result back up the tree, updating statistics (win rates, Q-values, etc.) at each node."),"\n"),"\n",r.createElement(t.p,null,"After many iterations, the most visited or highest-value child of the root is typically chosen as the next move. MCTS is widely cited in top-tier AI game research (Browne and gang, IEEE Trans. on CI in Games 2012)."),"\n",r.createElement(t.h3,{id:"stochastic-games-and-partially-observable-games",style:{position:"relative"}},r.createElement(t.a,{href:"#stochastic-games-and-partially-observable-games","aria-label":"stochastic games and partially observable games permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"stochastic games and partially observable games"),"\n",r.createElement(t.p,null,"In some games, chance (dice rolls, card draws) or hidden information (opponent's cards) must be taken into account, leading to a more general search approach that includes chance nodes in the game tree or a belief-based representation. Pioneering approaches combine minimax or alpha-beta style expansions with expected utility calculations to handle chance nodes effectively (e.g., searching game trees for backgammon or poker)."),"\n",r.createElement(t.h3,{id:"limitations-of-game-search-algorithms",style:{position:"relative"}},r.createElement(t.a,{href:"#limitations-of-game-search-algorithms","aria-label":"limitations of game search algorithms permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"limitations of game search algorithms"),"\n",r.createElement(t.p,null,"Even with alpha-beta pruning or MCTS, game search can run into severe computational challenges. Real games like chess have an astronomically large state space. Heuristic evaluation functions become indispensable, domain knowledge is often incorporated (e.g., advanced piece-value heuristics in chess), and specialized data structures (like transposition tables) help avoid repeated expansions of identical positions. Nonetheless, building a strong game-playing AI often demands sophisticated engineering, search enhancements, and efficient parallelization."),"\n",r.createElement(t.h2,{id:"classical-search-and-its-extensions",style:{position:"relative"}},r.createElement(t.a,{href:"#classical-search-and-its-extensions","aria-label":"classical search and its extensions permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"classical search and its extensions"),"\n",r.createElement(t.h3,{id:"review-of-classic-search-algorithms-bfs-dfs-uniform-cost-a",style:{position:"relative"}},r.createElement(t.a,{href:"#review-of-classic-search-algorithms-bfs-dfs-uniform-cost-a","aria-label":"review of classic search algorithms bfs dfs uniform cost a permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"review of classic search algorithms (bfs, dfs, uniform cost, a*)"),"\n",r.createElement(t.p,null,"Classical search provides the building blocks for problem-solving in AI:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"BFS"),": Guaranteed to find the shallowest solution, but can be memory-intensive."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"DFS"),": Efficient memory usage, but can get stuck in deep or infinite paths."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Uniform-cost search"),": Extends BFS to handle varying costs, guaranteeing an optimal solution."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"A*"),": Incorporates heuristics to guide search more intelligently."),"\n"),"\n",r.createElement(t.h3,{id:"when-to-use-informed-vs-uninformed-search",style:{position:"relative"}},r.createElement(t.a,{href:"#when-to-use-informed-vs-uninformed-search","aria-label":"when to use informed vs uninformed search permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"when to use informed vs. uninformed search"),"\n",r.createElement(t.p,null,"Informed (heuristic) search methods (like A*) should be used whenever a useful heuristic function is available. If no heuristic is readily available or one can't be reliably derived, uninformed approaches may be the only choice. However, in real-world projects, domain knowledge is often gleaned from subject matter experts to craft heuristics, or we might adopt learning methods to generate approximate heuristics."),"\n",r.createElement(t.h3,{id:"iterative-deepening-search-strategies",style:{position:"relative"}},r.createElement(t.a,{href:"#iterative-deepening-search-strategies","aria-label":"iterative deepening search strategies permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"iterative deepening search strategies"),"\n",r.createElement(t.p,null,"Iterative deepening depth-first search (IDDFS) is a strategy that runs DFS with a depth limit of ",r.createElement(o.A,{text:"\\(l\\)"})," and increments ",r.createElement(o.A,{text:"\\(l\\)"})," in each iteration until the goal is found. This approach combines the memory advantage of DFS with the completeness of BFS. IDDFS re-explores states multiple times but still often proves effective, especially when the search space is large but solutions exist at relatively shallow depths."),"\n",r.createElement(t.h3,{id:"bidirectional-search",style:{position:"relative"}},r.createElement(t.a,{href:"#bidirectional-search","aria-label":"bidirectional search permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"bidirectional search"),"\n",r.createElement(t.p,null,"Bidirectional search runs two simultaneous searches: one forward from the initial state and one backward from the goal (or a set of goals). By meeting in the middle, the search can drastically reduce the search space from ",r.createElement(o.A,{text:"\\(O(b^d)\\)"})," to approximately ",r.createElement(o.A,{text:"\\(O(b^{d/2})\\)"})," in each direction, yielding ",r.createElement(o.A,{text:"\\(O(b^{d/2})\\)"})," overall. The challenge often lies in implementing the backward search if the goal is not a single explicit state, or if the actions are not easily reversible."),"\n",r.createElement(t.h2,{id:"advanced-topics",style:{position:"relative"}},r.createElement(t.a,{href:"#advanced-topics","aria-label":"advanced topics permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"advanced topics"),"\n",r.createElement(t.h3,{id:"algorithmic-problem-solving-at-scale",style:{position:"relative"}},r.createElement(t.a,{href:"#algorithmic-problem-solving-at-scale","aria-label":"algorithmic problem solving at scale permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"algorithmic problem solving at scale"),"\n",r.createElement(t.p,null,"Real-world problems often require searching huge state spaces under strict time or memory constraints. Researchers in conferences like NeurIPS or ICML regularly propose advanced search methods that incorporate sampling, parallelization, or advanced data structures to handle scale:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Parallel and distributed search"),": Use multiple processors/GPUs to expand states in parallel."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Hierarchical planning"),": Divide a problem into subproblems or layers."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Symbolic search"),": Represent states and expansions in a compressed symbolic form (Binary Decision Diagrams, for example) to handle large state spaces."),"\n"),"\n",r.createElement(t.h3,{id:"enhancing-heuristic-functions-pattern-databases-learning-heuristics",style:{position:"relative"}},r.createElement(t.a,{href:"#enhancing-heuristic-functions-pattern-databases-learning-heuristics","aria-label":"enhancing heuristic functions pattern databases learning heuristics permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"enhancing heuristic functions (pattern databases, learning heuristics)"),"\n",r.createElement(t.p,null,'Well-designed heuristic functions can drastically improve search. "Pattern databases" store exact solutions for smaller subproblems and use them to create perfect heuristics for partial configurations. For instance, in the 15-puzzle, a pattern database might store the exact moves needed to place a subset of tiles correctly, ignoring others. Summing multiple pattern databases (carefully to preserve admissibility) can offer powerful heuristics.'),"\n",r.createElement(t.p,null,"Machine learning techniques can also learn heuristics from experience. Reinforcement learning or self-play methods (like those used in AlphaZero) can generalize heuristics for complex domains, surpassing human-engineered knowledge in some cases."),"\n",r.createElement(t.h3,{id:"incorporating-domain-specific-knowledge",style:{position:"relative"}},r.createElement(t.a,{href:"#incorporating-domain-specific-knowledge","aria-label":"incorporating domain specific knowledge permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"incorporating domain-specific knowledge"),"\n",r.createElement(t.p,null,"A large part of success in AI search often hinges on domain-specific knowledge that drastically prunes the state space. In scheduling, for instance, knowledge about priority constraints or typical resource bottlenecks can guide the search away from obviously infeasible or suboptimal paths. In puzzle solving, specific transformations or known patterns can skip large swaths of states."),"\n",r.createElement(t.h3,{id:"memory-bounded-search-ida-sma",style:{position:"relative"}},r.createElement(t.a,{href:"#memory-bounded-search-ida-sma","aria-label":"memory bounded search ida sma permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"memory-bounded search (ida*, sma*)"),"\n",r.createElement(t.p,null,"To handle the excessive memory usage of algorithms like A*, researchers introduced depth-first variants that iteratively deepen on ",r.createElement(o.A,{text:"\\(f(n)\\)"})," instead of depth:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"IDA*")," (Iterative Deepening A*) uses successive depth limits in terms of the ",r.createElement(o.A,{text:"\\(f(n)\\)"})," value, not the level in the tree."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"SMA*")," (Simplified Memory-bounded A*) is similar to A* but discards the worst node when memory is full, storing only essential parts of the tree."),"\n"),"\n",r.createElement(t.p,null,"These methods aim to preserve the optimality of A* while managing memory constraints more gracefully."),"\n",r.createElement(t.h3,{id:"dealing-with-real-time-constraints",style:{position:"relative"}},r.createElement(t.a,{href:"#dealing-with-real-time-constraints","aria-label":"dealing with real time constraints permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"dealing with real-time constraints"),"\n",r.createElement(t.p,null,"Sometimes, the agent must produce an action within a strict time limit (real-time decision-making). In these cases, the search might be truncated after exploring some limited number of states. A partial plan can be executed, with re-planning happening on the fly. Real-time heuristic search algorithms (like RTA*, LRTA*) adapt the heuristic based on actual outcomes in the environment, gradually improving their estimates over repeated trials."),"\n",r.createElement(t.p,null,"This style of search is especially relevant in robotics and real-time strategy games, where actions must be taken continuously, and the environment might change faster than a comprehensive search can complete."),"\n",r.createElement(t.h2,{id:"putting-it-all-together",style:{position:"relative"}},r.createElement(t.a,{href:"#putting-it-all-together","aria-label":"putting it all together permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"putting it all together"),"\n",r.createElement(t.p,null,"AI search is more than just BFS or A*; it's a broad family of algorithms and techniques designed to navigate complex spaces of possibilities and to systematically (or sometimes stochastically) pinpoint solutions in an efficient manner. Search methods range from naive to highly informed, from exhaustive expansions to local or evolutionary methods, from deterministic to probabilistic approaches, and from single-agent optimization to adversarial game-playing scenarios. Understanding these methods — as well as how to select, configure, or combine them — is critical for designing intelligent agents capable of tackling a variety of tasks."),"\n",r.createElement(t.p,null,"Modern research extends classical search concepts in fascinating ways. For instance, advanced heuristics might be learned via neural networks, as seen in the latest chess, shogi, or Go engines (Silver and gang, Science 2018), where search complements deep learning. Constraint satisfaction has advanced to handle dynamic and distributed CSPs, and local search has evolved into large-scale optimization frameworks used in myriad industries. Adversarial search strategies form the foundation of many game-playing AIs and even negotiation or bidding agents in economic domains. Meanwhile, real-time search, belief state representation, or hierarchical expansions cater to partial observability and uncertain or rapidly changing environments."),"\n",r.createElement(t.p,null,"In practice, the best approach to any search problem often involves a combination of these methods, along with domain-specific tricks, data structures (like transposition tables or pattern databases), or real-time learning of heuristics. Many of the underlying frameworks introduced here continue to inspire new research directions, from partial expansions to incorporate machine learning predictions, to memory-bounded or distributed solutions for massive search tasks, to synergy with reinforcement learning and generative models for complex decision-making."),"\n",r.createElement(t.h2,{id:"illustrative-figures-and-code",style:{position:"relative"}},r.createElement(t.a,{href:"#illustrative-figures-and-code","aria-label":"illustrative figures and code permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"illustrative figures and code"),"\n",r.createElement(t.p,null,"Below, I'll add a few schematic images to help visualize key concepts:"),"\n",r.createElement(a,{alt:"Example of a search tree",path:"",caption:"A basic search tree expanding from an initial state. Each branching factor leads to a new set of states. Dashed lines can represent pruned branches.",zoom:"false"}),"\n",r.createElement(a,{alt:"Constraint graph illustration",path:"",caption:"Constraint graph for a simple coloring problem. Each node is a region/variable, edges denote adjacency constraints.",zoom:"false"}),"\n",r.createElement(t.p,null,"And, for completeness, here's a more detailed code snippet demonstrating a local search approach (a simple hill-climbing variant with random restarts for a TSP-like problem in pseudocode form):"),"\n",r.createElement(l.A,{text:"\nimport random\n\ndef cost_function(solution, distances):\n    total_dist = 0\n    for i in range(len(solution) - 1):\n        total_dist += distances[solution[i]][solution[i+1]]\n    # Add distance for returning to start if needed\n    total_dist += distances[solution[-1]][solution[0]]\n    return total_dist\n\ndef get_random_neighbor(solution):\n    # swap two random indices\n    new_solution = solution[:]\n    i, j = random.sample(range(len(solution)), 2)\n    new_solution[i], new_solution[j] = new_solution[j], new_solution[i]\n    return new_solution\n\ndef hill_climb_random_restart(nodes, distances, num_restarts=10):\n    best_solution = None\n    best_cost = float('inf')\n    \n    for _ in range(num_restarts):\n        # Generate a random initial solution\n        current_solution = nodes[:]\n        random.shuffle(current_solution)\n        current_cost = cost_function(current_solution, distances)\n        \n        improved = True\n        while improved:\n            improved = False\n            neighbor = get_random_neighbor(current_solution)\n            neighbor_cost = cost_function(neighbor, distances)\n            \n            if neighbor_cost < current_cost:\n                current_solution = neighbor\n                current_cost = neighbor_cost\n                improved = True\n        \n        if current_cost < best_cost:\n            best_cost = current_cost\n            best_solution = current_solution[:]\n    \n    return best_solution, best_cost\n"}),"\n",r.createElement(t.p,null,"This code outlines a basic approach: for a given set of nodes (cities) and a distance matrix, it tries to reorder them to minimize the total travel distance. It performs multiple restarts to avoid local minima. In practice, you can refine such a method with more sophisticated strategies, advanced metaheuristics, or domain-specific constraints and optimizations."),"\n",r.createElement(t.h2,{id:"final-remarks",style:{position:"relative"}},r.createElement(t.a,{href:"#final-remarks","aria-label":"final remarks permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"final remarks"),"\n",r.createElement(t.p,null,"Search is a fundamental pillar of AI, providing general-purpose methods to systematically explore sets of possible solutions. Practically every AI curriculum includes search early on because it not only clarifies how intelligent agents tackle problems but also reveals the key challenges — like exponential growth in complexity and the potential for sophisticated heuristic guidance or partial expansions."),"\n",r.createElement(t.p,null,"Selecting or designing the right search approach involves carefully weighing problem size, available domain knowledge (to craft heuristics or constraints), memory limits, time requirements, and whether we're dealing with single-agent optimization, multiagent adversarial scenarios, or uncertain and partially observable worlds. From BFS to A* to local search, from CSP solvers to adversarial and real-time search, these techniques shape the backbone of problem-solving in AI. Research continues to refine and innovate upon these core concepts, integrating them with modern machine learning and domain-specific knowledge, pushing the frontiers of what search-based AI can achieve."),"\n",r.createElement(t.p,null,"I hope this comprehensive deep dive into AI search strategies provides clarity and sparks ideas for applying these concepts to your own projects, research, and further study."))}var h=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,i.RP)(),e.components);return t?r.createElement(t,e,r.createElement(c,e)):c(e)};var m=a(36710),d=a(58481),p=a.n(d),u=a(36310),g=a(87245),f=a(27042),v=a(59849),b=a(5591),E=a(61122),y=a(9219),w=a(33203),S=a(95751),x=a(94328),H=a(80791),k=a(78137);const _=e=>{let{toc:t}=e;if(!t||!t.items)return null;return r.createElement("nav",{className:H.R},r.createElement("ul",null,t.items.map(((e,t)=>r.createElement("li",{key:t},r.createElement("a",{href:e.url,onClick:t=>((e,t)=>{e.preventDefault();const a=t.replace("#",""),n=document.getElementById(a);n&&n.scrollIntoView({behavior:"smooth",block:"start"})})(t,e.url)},e.title),e.items&&r.createElement(_,{toc:{items:e.items}}))))))};function A(e){let{data:{mdx:t,allMdx:s,allPostImages:l},children:o}=e;const{frontmatter:c,body:h,tableOfContents:m}=t,d=c.index,v=c.slug.split("/")[1],H=s.nodes.filter((e=>e.frontmatter.slug.includes(`/${v}/`))).sort(((e,t)=>e.frontmatter.index-t.frontmatter.index)),A=H.findIndex((e=>e.frontmatter.index===d)),z=H[A+1],C=H[A-1],I=c.slug.replace(/\/$/,""),M=/[^/]*$/.exec(I)[0],T=`posts/${v}/content/${M}/`,{0:V,1:B}=(0,r.useState)(c.flagWideLayoutByDefault),{0:N,1:L}=(0,r.useState)(!1);var P;(0,r.useEffect)((()=>{L(!0);const e=setTimeout((()=>L(!1)),340);return()=>clearTimeout(e)}),[V]),"adventures"===v?P=y.cb:"research"===v?P=y.Qh:"thoughts"===v&&(P=y.T6);const F=p()(h).replace(/import .*? from .*?;/g,"").replace(/<.*?>/g,"").replace(/\{\/\*[\s\S]*?\*\/\}/g,"").trim().split(/\s+/).length,D=function(e){if(e<=10)return"~10 min";if(e<=20)return"~20 min";if(e<=30)return"~30 min";if(e<=40)return"~40 min";if(e<=50)return"~50 min";if(e<=60)return"~1 h";const t=Math.floor(e/60),a=e%60;return a<=30?`~${t}${a>0?".5":""} h`:`~${t+1} h`}(Math.ceil(F/P)+(c.extraReadTimeMin||0)),q=[{flag:c.flagDraft,component:()=>Promise.all([a.e(3231),a.e(8809)]).then(a.bind(a,28809))},{flag:c.flagMindfuckery,component:()=>Promise.all([a.e(3231),a.e(2471)]).then(a.bind(a,67709))},{flag:c.flagRewrite,component:()=>Promise.all([a.e(3231),a.e(6764)]).then(a.bind(a,62002))},{flag:c.flagOffensive,component:()=>Promise.all([a.e(3231),a.e(2443)]).then(a.bind(a,17681))},{flag:c.flagProfane,component:()=>Promise.all([a.e(3231),a.e(8048)]).then(a.bind(a,53286))},{flag:c.flagMultilingual,component:()=>Promise.all([a.e(3231),a.e(4069)]).then(a.bind(a,78831))},{flag:c.flagUnreliably,component:()=>Promise.all([a.e(3231),a.e(3417)]).then(a.bind(a,8179))},{flag:c.flagPolitical,component:()=>Promise.all([a.e(3231),a.e(5195)]).then(a.bind(a,30433))},{flag:c.flagCognitohazard,component:()=>Promise.all([a.e(3231),a.e(3175)]).then(a.bind(a,8413))},{flag:c.flagHidden,component:()=>Promise.all([a.e(3231),a.e(9556)]).then(a.bind(a,14794))}],{0:O,1:G}=(0,r.useState)([]);return(0,r.useEffect)((()=>{q.forEach((e=>{let{flag:t,component:a}=e;t&&a().then((e=>{G((t=>[].concat((0,n.A)(t),[e.default])))}))}))}),[]),r.createElement(f.P.div,{initial:{opacity:0},animate:{opacity:1},exit:{opacity:0},transition:{duration:.15}},r.createElement(b.A,{postNumber:c.index,date:c.date,updated:c.updated,readTime:D,difficulty:c.difficultyLevel,title:c.title,desc:c.desc,banner:c.banner,section:v,postKey:M,isMindfuckery:c.flagMindfuckery,mainTag:c.mainTag}),r.createElement("div",{style:{display:"flex",justifyContent:"flex-end",flexWrap:"wrap",maxWidth:"75%",marginLeft:"auto",paddingRight:"1vw",marginTop:"-6vh",marginBottom:"4vh"}},c.otherTags.map(((e,t)=>r.createElement("span",{key:t,className:`noselect ${k.MW}`,style:{margin:"0 5px 5px 0"}},e)))),r.createElement("div",{class:"postBody"},r.createElement(_,{toc:m})),r.createElement("br"),r.createElement("div",{style:{margin:"0 10% -2vh 30%",textAlign:"right"}},r.createElement(f.P.button,{class:"noselect",className:x.pb,id:x.xG,onClick:()=>{B(!V)},whileTap:{scale:.93}},r.createElement(f.P.div,{className:S.DJ,key:V,initial:{opacity:0},animate:{opacity:1},exit:{opacity:0},transition:{duration:.3,ease:"easeInOut"}},V?"Switch to default layout":"Switch to wide layout"))),r.createElement("br"),r.createElement("div",{class:"postBody",style:{margin:V?"0 -14%":"",maxWidth:V?"200%":"",transition:"margin 1s ease, max-width 1s ease, padding 1s ease"}},r.createElement("div",{className:`${x.P_} ${N?x.Xn:x.qG}`},O.map(((e,t)=>r.createElement(e,{key:t}))),c.indexCourse?r.createElement(w.A,{index:c.indexCourse,category:c.courseCategoryName}):"",r.createElement(u.Z.Provider,{value:{images:l.nodes,basePath:T.replace(/\/$/,"")+"/"}},r.createElement(i.xA,{components:{Image:g.A}},o)))),r.createElement(E.A,{nextPost:z,lastPost:C,keyCurrent:M,section:v}))}function z(e){return r.createElement(A,e,r.createElement(h,e))}function C(e){var t,a,n,i,s;let{data:l}=e;const{frontmatter:o}=l.mdx,c=o.titleSEO||o.title,h=o.titleOG||c,d=o.titleTwitter||c,p=o.descSEO||o.desc,u=o.descOG||p,g=o.descTwitter||p,f=o.schemaType||"BlogPosting",b=o.keywordsSEO,E=o.date,y=o.updated||E,w=o.imageOG||(null===(t=o.banner)||void 0===t||null===(a=t.childImageSharp)||void 0===a||null===(n=a.gatsbyImageData)||void 0===n||null===(i=n.images)||void 0===i||null===(s=i.fallback)||void 0===s?void 0:s.src),S=o.imageAltOG||u,x=o.imageTwitter||w,H=o.imageAltTwitter||g,k=o.canonicalURL,_=o.flagHidden||!1,A=o.mainTag||"Posts",z=o.slug.split("/")[1]||"posts",{siteUrl:C}=(0,m.Q)(),I={"@context":"https://schema.org","@type":"BreadcrumbList",itemListElement:[{"@type":"ListItem",position:1,name:"Home",item:C},{"@type":"ListItem",position:2,name:A,item:`${C}/${o.slug.split("/")[1]}`},{"@type":"ListItem",position:3,name:c,item:`${C}${o.slug}`}]};return r.createElement(v.A,{title:c+" - avrtt.blog",titleOG:h,titleTwitter:d,description:p,descriptionOG:u,descriptionTwitter:g,schemaType:f,keywords:b,datePublished:E,dateModified:y,imageOG:w,imageAltOG:S,imageTwitter:x,imageAltTwitter:H,canonicalUrl:k,flagHidden:_,mainTag:A,section:z,type:"article"},r.createElement("script",{type:"application/ld+json"},JSON.stringify(I)))}},96098:function(e,t,a){var n=a(96540),i=a(7978);t.A=e=>{let{text:t}=e;return n.createElement(i.A,null,t)}}}]);
//# sourceMappingURL=component---src-templates-post-js-content-file-path-src-pages-posts-research-ai-search-mdx-1c07833e17ddb2e0c6cb.js.map