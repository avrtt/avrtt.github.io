{"version":3,"file":"component---src-templates-post-js-content-file-path-src-pages-posts-research-training-models-at-scale-mdx-6bd7e180bf9f3886699a.js","mappings":"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","sources":["webpack://avrtt.blog/./src/pages/posts/research/training_models_at_scale.mdx","webpack://avrtt.blog/./src/templates/post.js","webpack://avrtt.blog/./src/components/Latex/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\n/**(intro: a quote, catchphrase, joke, etc.)**/\n/*\n\n- [Overview](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/overview.html)\n- [Why scaling?](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/overview.html#Why-scaling?)\n- [What to expect?](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/overview.html#What-to-expect?)\n- [Tutorial Structure](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/overview.html#Tutorial-Structure)\n- [Feedback, Questions or Contributions](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/overview.html#Feedback,-Questions-or-Contributions)\n- [Part 1.1: Training Larger Models on a Single GPU](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/single_gpu_techniques.html)\n- [Mixed Precision Training](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/single_gpu_techniques.html#Mixed-Precision-Training)\n- [Gradient Checkpointing / Activation Recomputation](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/single_gpu_techniques.html#Gradient-Checkpointing-/-Activation-Recomputation)\n- [Gradient Accumulation](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/single_gpu_techniques.html#Gradient-Accumulation)\n- [JAX-Specific Structures](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/single_gpu_techniques.html#JAX-Specific-Structures)\n- [Intermediate Summary](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/single_gpu_techniques.html#Intermediate-Summary)\n- [References and Resources](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/single_gpu_techniques.html#References-and-Resources)\n- [Part 1.2: Profiling and Scaling Single-GPU Transformer Models](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/single_gpu_transformer.html)\n- [Prerequisites](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/single_gpu_transformer.html#Prerequisites)\n- [Building an Optimized Transformer Model](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/single_gpu_transformer.html#Building-an-Optimized-Transformer-Model)\n- [Profiling](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/single_gpu_transformer.html#Profiling)\n- [Conclusion](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/single_gpu_transformer.html#Conclusion)\n- [References and Resources](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/single_gpu_transformer.html#References-and-Resources)\n- [Part 2.1: Introduction to Distributed Computing in JAX](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/data_parallel_intro.html)\n- [Distributed Computing in JAX](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/data_parallel_intro.html#Distributed-Computing-in-JAX)\n- [Intermediate Summary](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/data_parallel_intro.html#Intermediate-Summary)\n- [References and Resources](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/data_parallel_intro.html#References-and-Resources)\n- [Part 2.2: (Fully-Sharded) Data Parallelism](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/data_parallel_fsdp.html)\n- [Prerequisites](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/data_parallel_fsdp.html#Prerequisites)\n- [Data Parallelism](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/data_parallel_fsdp.html#Data-Parallelism)\n- [Parameter Sharding](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/data_parallel_fsdp.html#Parameter-Sharding)\n- [Conclusion](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/data_parallel_fsdp.html#Conclusion)\n- [References and Resources](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/data_parallel_fsdp.html#References-and-Resources)\n- [Part 3.1: Pipeline Parallelism](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/pipeline_parallel_simple.html)\n- [Prerequisites](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/pipeline_parallel_simple.html#Prerequisites)\n- [Pipeline Parallelism with Micro-Batching](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/pipeline_parallel_simple.html#Pipeline-Parallelism-with-Micro-Batching)\n- [Intermediate Summary](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/pipeline_parallel_simple.html#Intermediate-Summary)\n- [References and Resources](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/pipeline_parallel_simple.html#References-and-Resources)\n- [Part 3.2: Looping Pipelines](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/pipeline_parallel_looping.html)\n- [Prerequisites](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/pipeline_parallel_looping.html#Prerequisites)\n- [Looping Pipelines](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/pipeline_parallel_looping.html#Looping-Pipelines)\n- [Testing Pipeline Parallelism](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/pipeline_parallel_looping.html#Testing-Pipeline-Parallelism)\n- [Profiling](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/pipeline_parallel_looping.html#Profiling)\n- [Conclusion](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/pipeline_parallel_looping.html#Conclusion)\n- [References and Resources](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/pipeline_parallel_looping.html#References-and-Resources)\n- [Part 4.1: Tensor Parallelism](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/tensor_parallel_simple.html)\n- [Prerequisites](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/tensor_parallel_simple.html#Prerequisites)\n- [Tensor Parallelism for Linear Layers](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/tensor_parallel_simple.html#Tensor-Parallelism-for-Linear-Layers)\n- [References and Resources](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/tensor_parallel_simple.html#References-and-Resources)\n- [Part 4.2: Asynchronous Linear Layers with Tensor Parallelism](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/tensor_parallel_async.html)\n- [Prerequisites](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/tensor_parallel_async.html#Prerequisites)\n- [Tensor Parallelism with Compute-Communication Overlap](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/tensor_parallel_async.html#Tensor-Parallelism-with-Compute-Communication-Overlap)\n- [Intermediate Summary](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/tensor_parallel_async.html#Intermediate-Summary)\n- [References and Resources](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/tensor_parallel_async.html#References-and-Resources)\n- [Part 4.3: Transformers with Tensor Parallelism](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/tensor_parallel_transformer.html)\n- [Prerequisites](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/tensor_parallel_transformer.html#Prerequisites)\n- [Tensor Parallelism in Transformer Models](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/tensor_parallel_transformer.html#Tensor-Parallelism-in-Transformer-Models)\n- [Profiling Large Model](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/tensor_parallel_transformer.html#Profiling-Large-Model)\n- [Conclusion](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/tensor_parallel_transformer.html#Conclusion)\n- [References and Resources](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/tensor_parallel_transformer.html#References-and-Resources)\n- [Part 5: Language Modeling with 3D Parallelism](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/3d_parallelism.html)\n- [Prerequisites](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/3d_parallelism.html#Prerequisites)\n- [3D Parallelism](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/3d_parallelism.html#3D-Parallelism)\n- [Profiling](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/3d_parallelism.html#Profiling)\n- [Conclusion](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/3d_parallelism.html#Conclusion)\n- [References and Resources](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/scaling/JAX/3d_parallelism.html#References-and-Resources)\n- [HDL - Introduction to Multi GPU Programming](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/DL2/High-performant_DL/Multi_GPU/hpdlmultigpu.html)\n- [Introduction](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/DL2/High-performant_DL/Multi_GPU/hpdlmultigpu.html#Introduction)\n- [All Reduce](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/DL2/High-performant_DL/Multi_GPU/hpdlmultigpu.html#All-Reduce)\n- [Reduce](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/DL2/High-performant_DL/Multi_GPU/hpdlmultigpu.html#Reduce)\n- [Broadcast](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/DL2/High-performant_DL/Multi_GPU/hpdlmultigpu.html#Broadcast)\n- [All Gather](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/DL2/High-performant_DL/Multi_GPU/hpdlmultigpu.html#All-Gather)\n- [Reduce Scatter](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/DL2/High-performant_DL/Multi_GPU/hpdlmultigpu.html#Reduce-Scatter)\n- [References](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/DL2/High-performant_DL/Multi_GPU/hpdlmultigpu.html#References)\n- [13. Computational Performance](https://d2l.ai/chapter_computational-performance/index.html)\n- [13.1. Compilers and Interpreters](https://d2l.ai/chapter_computational-performance/hybridize.html)\n- [13.2. Asynchronous Computation](https://d2l.ai/chapter_computational-performance/async-computation.html)\n- [13.3. Automatic Parallelism](https://d2l.ai/chapter_computational-performance/auto-parallelism.html)\n- [13.4. Hardware](https://d2l.ai/chapter_computational-performance/hardware.html)\n- [13.5. Training on Multiple GPUs](https://d2l.ai/chapter_computational-performance/multiple-gpus.html)\n- [13.6. Concise Implementation for Multiple GPUs](https://d2l.ai/chapter_computational-performance/multiple-gpus-concise.html)\n- [13.7. Parameter Servers](https://d2l.ai/chapter_computational-performance/parameterserver.html)\n\n*/\n/*\n\n1. Introduction to Large-Scale Training\n- The importance of scaling model training for modern AI applications\n- Common bottlenecks in training very large models\n- Overview of course structure and objectives\n2. Why Scaling?\n- Reasons for scaling: bigger models, larger datasets, enhanced performance\n- Trade-offs between model size, training time, and resource usage\n- Industry examples where large-scale training excels\n3. Core Concepts of Single-GPU Scaling\n- Memory bottlenecks and GPU capacity\n- Strategies to handle large batch sizes\n- Overview of frameworks (PyTorch, TensorFlow, JAX) for single-GPU scaling\n4. Mixed Precision Training\n- Using half-precision (FP16/BF16) to reduce memory usage\n- Benefits and potential pitfalls (numerical stability)\n- Practical guidelines and library support\n5. Gradient Checkpointing (Activation Recomputation)\n- How gradient checkpointing saves GPU memory\n- Trade-off between computation and memory\n- Implementation tips for different libraries\n6. Gradient Accumulation\n- When to apply gradient accumulation\n- Balancing batch size with gradient steps\n- Handling large effective batch sizes while staying within memory limits\n7. JAX-Specific Structures\n- Unique features of JAX for high-performance training\n- How XLA compilation, vectorization, and functional transformations help\n- Common pitfalls when migrating from other frameworks\n8. Building an Optimized Transformer on a Single GPU\n- Critical components of a Transformer model\n- Memory optimizations (layer sharing, checkpointing)\n- Efficient multi-head attention and feed-forward layers\n9. Profiling Single-GPU Training\n- Identifying hotspots in model training with profiling tools\n- GPU utilization metrics (occupancy, memory throughput)\n- Interpreting and acting on profiler data\n10. Asynchronous Computation and Automatic Parallelism\n- How asynchronous execution can speed up pipelines\n- Graph optimizations and automatic parallelization features\n- Impact on real-time performance monitoring\n11. Computational Hardware Considerations\n- GPU architecture basics (cores, memory, bandwidth)\n- Specialized hardware (TPUs, accelerators)\n- Matching hardware capabilities to scaling strategies\n12. Memory-Optimization Strategies\n- Approaches such as activation quantization and tensor compression\n- Offloading to CPU or disk vs. performance overhead\n- Trade-offs between precision, speed, and memory usage\n13. Best Practices for Single-GPU Training at Scale\n- Efficient data pipelines and caching\n- Hyperparameter tuning strategies for large models\n- Logging, checkpointing, and reproducibility\n14. Intermediate Summary of Single-GPU Techniques\n- Recap of mixed precision, checkpointing, and accumulation\n- Key lessons learned: balancing memory, compute, and speed\n- Transition to distributed and advanced parallel methods\n15. References and Resources\n- Links to in-depth tutorials (e.g., JAX single GPU techniques, D2L.ai)\n- Recommended papers and guides for further reading\n- Community forums and open-source project links for support\n\n*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Highlight from \"../../../components/Highlight\";\nimport Code from \"../../../components/Code\";\nimport Latex from \"../../../components/Latex\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, \"\\n\", React.createElement(\"br\"), \"\\n\", \"\\n\", \"\\n\", React.createElement(_components.p, null, \"Scaling up model training has become one of the most pivotal aspects of advancing modern machine learning and deep learning systems. As new research breakthroughs push model architectures toward unprecedented size and depth, data scientists and engineers face the growing challenge of working with ever-larger datasets and model parameters that can easily run into the billions. In recent years, the success of massive language models, complex computer vision architectures, and multi-modal pipelines (combining images, text, audio, and beyond) has shown that many important breakthroughs arise when researchers successfully train these large models on large-scale computing infrastructures.\"), \"\\n\", React.createElement(_components.p, null, \"This portion of the course focuses on \\\"\\\"Training models at scale, pt. 1\\\" — primarily on single-GPU methods that allow you to push the limits of memory, compute efficiency, and training speed before moving on to multi-GPU and distributed approaches in the follow-up parts. I'll discuss the primary motivations for scaling, the core technical concepts (ranging from memory optimization to hardware considerations), and practical techniques that can help you train bigger models within the constraints of a single GPU. While distributed and multi-node training can further unlock the ability to handle model sizes that simply won't fit on a single accelerator, you may be surprised at how far you can go with a thoughtful, methodical approach to single-device scaling.\"), \"\\n\", React.createElement(_components.p, null, \"By the end of this article, you'll know about memory bottlenecks, gradient accumulation, mixed precision training, gradient checkpointing, asynchronous computations, and more. This foundation will enable you to confidently use advanced frameworks like PyTorch, TensorFlow, and JAX with an eye toward maximizing throughput and memory usage. Along the way, I'll reference select research papers (e.g., from NeurIPS, ICML, JMLR) that have introduced novel techniques or refined these strategies in real-world deployments.\"), \"\\n\", React.createElement(_components.p, null, \"I'm excited to guide you through the essential building blocks needed to scale your model training to new heights — even when you're starting on just a single GPU. Once you internalize these techniques, you'll be fully prepared to move on to distributed setups and specialized hardware, thereby completing the journey of large-scale training methodologies.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"why-scaling\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#why-scaling\",\n    \"aria-label\": \"why scaling permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Why scaling?\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"the-modern-drive-to-scale-bigger-and-bigger\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#the-modern-drive-to-scale-bigger-and-bigger\",\n    \"aria-label\": \"the modern drive to scale bigger and bigger permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"The modern drive to scale bigger and bigger\"), \"\\n\", React.createElement(_components.p, null, \"There's a remarkable trend in AI research: every year, the models that set new benchmarks in fields like natural language processing, image generation, speech synthesis, and recommendation systems tend to be bigger in terms of trainable parameters and trained on larger datasets. State-of-the-art performance in many tasks seems to correlate closely with the ability to scale, leading to emergent capabilities that smaller models fail to exhibit. The well-known scaling laws (e.g., from OpenAI, Google Research, and others) indicate that performance typically improves predictably as you increase the size of the model and the volume of training data.\"), \"\\n\", React.createElement(_components.p, null, \"However, training these huge models isn't trivial. Beyond the raw compute expense — where you might spend days or weeks of GPU time — there's also the need to address memory constraints, specialized hardware requirements, numerical stability issues, data pipeline bottlenecks, and more. Industry giants such as NVIDIA, Google, and Microsoft have made significant investments in hardware and software solutions to handle these challenges, and many open-source tools have trickled down into community frameworks like PyTorch, TensorFlow, and JAX.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"trade-offs-model-size-training-time-and-resources\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#trade-offs-model-size-training-time-and-resources\",\n    \"aria-label\": \"trade offs model size training time and resources permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Trade-offs: model size, training time, and resources\"), \"\\n\", React.createElement(_components.p, null, \"Scaling up is not free in terms of either time or financial cost. Once you push beyond the resources available to a single GPU or a single machine, you'll be forced to adopt more complex distributed training paradigms. Even on a single GPU, attempts to train huge models can result in extensive memory overhead, to the point where you spend a significant fraction of time on memory-optimization tricks instead of focusing solely on model design.\"), \"\\n\", React.createElement(_components.p, null, \"That said, certain tasks warrant these trade-offs. For example:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Large language models\"), \" for advanced text generation, question answering, or multi-lingual tasks.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Vision transformers\"), \" with massive parameter counts for cutting-edge image classification, segmentation, and object detection.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Reinforcement learning\"), \" systems dealing with extremely large state and action spaces.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"In short, if your goal is state-of-the-art performance on challenging tasks — or if you are dealing with extremely high volumes of data — scaling up might be the right approach.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"real-world-success-stories\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#real-world-success-stories\",\n    \"aria-label\": \"real world success stories permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Real-world success stories\"), \"\\n\", React.createElement(_components.p, null, \"Major breakthroughs in the past few years underscore the value of scaling:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"GPT-series models\"), \" (OpenAI) for text generation, code generation, and more.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Vision transformers (ViT)\"), \", from Google Brain, that match or exceed convolutional networks in image tasks.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"DeepMind's AlphaGo and AlphaZero\"), \" in the realm of large-scale reinforcement learning and self-play.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Behind each success story is a carefully orchestrated approach to training, resource allocation, and memory management. This article will illuminate how to orchestrate those ingredients on a single GPU, giving you a stepping stone to even more advanced scaling approaches.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"core-concepts-of-single-gpu-scaling\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#core-concepts-of-single-gpu-scaling\",\n    \"aria-label\": \"core concepts of single gpu scaling permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Core concepts of single-GPU scaling\"), \"\\n\", React.createElement(_components.p, null, \"Scaling up model training on a single GPU might sound contradictory at first. After all, you're limited to the memory and compute throughput of one device. However, numerous techniques have emerged that allow you to push the boundaries of what's possible:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Memory bottlenecks:\"), \" Understanding how GPU memory is allocated among model weights, intermediate activations, gradients, and optimizer states.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Large batch size management:\"), \" Many tasks benefit from large batch sizes for speed or performance. Managing large batch sizes on a single GPU requires memory-efficient strategies, gradient accumulation, or parallelization.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Framework optimizations:\"), \" PyTorch, TensorFlow, and JAX each offer distinct ways to handle memory, asynchronous executions, and graph optimizations.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"This section will walk you through these core considerations. I'll also reference notable papers and best practices from the open-source community to solidify these ideas with real-world examples.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"mixed-precision-training\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#mixed-precision-training\",\n    \"aria-label\": \"mixed precision training permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Mixed precision training\"), \"\\n\", React.createElement(_components.p, null, \"One of the most substantial breakthroughs for single-GPU scaling in the last five years has been widespread adoption of mixed precision or half-precision training. Originally, training with lower precision (like 16-bit floating points) introduced significant numerical instability. Modern hardware (NVIDIA's Tensor Cores, for example) and software developments (like Automatic Mixed Precision, or AMP, in PyTorch) have changed the game.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"benefits-of-fp16bf16\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#benefits-of-fp16bf16\",\n    \"aria-label\": \"benefits of fp16bf16 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Benefits of FP16/BF16\"), \"\\n\", React.createElement(_components.p, null, \"Using half-precision floating point representations (e.g., \", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{FP16} \\\\)\"\n  }), \") or the newer bfloat16 (\", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{BF16} \\\\)\"\n  }), \") format greatly reduces the memory footprint of your model parameters and activations. For instance, going from 32-bit to 16-bit effectively halves the storage required per floating point number. This leads to:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Reduced memory usage:\"), \" Freed memory can be used to store larger models or bigger batches.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Faster computation:\"), \" Modern GPUs can handle half-precision ops significantly faster, especially if the underlying architecture has specialized hardware units (e.g., Tensor Cores).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Because of these efficiency gains, it's becoming standard practice in many high-performance training pipelines to use \", React.createElement(Highlight, null, \"mixed precision\"), \" by default.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"potential-pitfalls-and-solutions\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#potential-pitfalls-and-solutions\",\n    \"aria-label\": \"potential pitfalls and solutions permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Potential pitfalls and solutions\"), \"\\n\", React.createElement(_components.p, null, \"Mixed precision training can face numerical stability issues, such as underflow or overflow in gradient calculations. Typical solutions involve:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Loss scaling:\"), \" Before backpropagating, the loss is scaled by a factor (e.g., 1024). This ensures small gradient values do not underflow. Afterwards, the gradients are unscaled to restore their correct magnitude.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Automatic Mixed Precision libraries: PyTorch, TensorFlow and JAX each have built-in or library-level support for handling these scaling details under the hood.\")), \"\\n\"), \"\\n\", React.createElement(Code, {\n    text: `\nimport torch\n# Automatic Mixed Precision in a training loop:\nwith torch.autocast(device_type='cuda', dtype=torch.float16):\n    # forward pass, compute loss\n    # ...\n    # backward pass\n`\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"example-code-snippet\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#example-code-snippet\",\n    \"aria-label\": \"example code snippet permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Example code snippet\"), \"\\n\", React.createElement(_components.p, null, \"Below is a simple snippet in PyTorch to illustrate a typical training loop with automatic mixed precision:\"), \"\\n\", React.createElement(Code, {\n    text: `\nimport torch\nfrom torch import nn, optim\n\nmodel = nn.Linear(1024, 512).cuda()\noptimizer = optim.Adam(model.parameters(), lr=1e-3)\nscaler = torch.cuda.amp.GradScaler()  # The built-in gradient scaler\n\nfor data, target in dataloader:\n    data = data.cuda()\n    target = target.cuda()\n    optimizer.zero_grad()\n    \n    with torch.cuda.amp.autocast():\n        output = model(data)\n        loss = nn.functional.mse_loss(output, target)\n    \n    scaler.scale(loss).backward()\n    scaler.step(optimizer)\n    scaler.update()\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"In this snippet, half-precision computations are done within the autocast context. The \", React.createElement(Highlight, null, \"GradScaler\"), \" ensures that any gradients that might be too small are effectively scaled up prior to the backward pass and subsequently rescaled.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"gradient-checkpointing-activation-recomputation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#gradient-checkpointing-activation-recomputation\",\n    \"aria-label\": \"gradient checkpointing activation recomputation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Gradient checkpointing (activation recomputation)\"), \"\\n\", React.createElement(_components.p, null, \"When you run forward propagation in deep models, intermediate activations (outputs of each layer) are stored in memory so that backpropagation can compute the corresponding gradients. For very deep networks, this storage can grow massive, quickly surpassing the available GPU memory.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"how-checkpointing-saves-memory\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#how-checkpointing-saves-memory\",\n    \"aria-label\": \"how checkpointing saves memory permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"How checkpointing saves memory\"), \"\\n\", React.createElement(_components.p, null, \"Gradient checkpointing (also called activation recomputation) offers a clever solution. Instead of storing all intermediate activations, you \\\"checkpoint\\\" certain layers' outputs. During backpropagation, the uncheckpointed activations are discarded and recomputed on the fly when needed. This means that in the forward pass, you only store selected activation tensors. At gradient computation time, the forward pass for those uncheckpointed segments is performed again.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Memory savings:\"), \" By not keeping every layer's activations around, you drastically reduce memory consumption.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Compute trade-off:\"), \" You have to do some extra forward passes during the backward phase, thus increasing total computation time.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"The memory vs. compute trade-off can be well worth it if you're hitting GPU memory limits. The overhead of partial re-forwarding is often negligible compared to the gains that let you train deeper or larger networks.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"implementation-tips\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#implementation-tips\",\n    \"aria-label\": \"implementation tips permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Implementation tips\"), \"\\n\", React.createElement(_components.p, null, \"Frameworks provide built-in or third-party libraries for gradient checkpointing:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"PyTorch:\")), \"\\n\"), \"\\n\", React.createElement(Code, {\n    text: `\nfrom torch.utils.checkpoint import checkpoint\n\ndef checkpointed_forward(*inputs):\n    # forward pass of a module or a block\n    ...\n\nout = checkpoint(checkpointed_forward, *inputs)\n`\n  }), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TensorFlow:\"), \" Typically uses the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">tf.recompute_grad</code>\"\n    }\n  }), \" or custom Keras layers for partial recomputation.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"JAX:\"), \" Has \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">jax.checkpoint</code>\"\n    }\n  }), \" or uses functional transformations to define how states are stored or recomputed.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Be mindful of how you choose which layers to checkpoint. A common rule of thumb is to checkpoint only certain blocks (like transformer blocks, or residual blocks in a ResNet) rather than every single layer. That often provides a nice compromise between memory savings and computational overhead.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"gradient-accumulation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#gradient-accumulation\",\n    \"aria-label\": \"gradient accumulation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Gradient accumulation\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"the-concept\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#the-concept\",\n    \"aria-label\": \"the concept permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"The concept\"), \"\\n\", React.createElement(_components.p, null, \"Batch size in training is often limited by GPU memory. Large batch sizes help stabilize training and speed up throughput on many tasks. If you can't fit an entire large batch into memory in one go, gradient accumulation is a technique that simulates a large batch by doing multiple forward/backward passes with smaller micro-batches, summing (accumulating) the gradients, and only updating the model weights after a certain number of micro-batches.\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{EffectiveBatchSize} = \\\\text{MicroBatchSize} \\\\times \\\\text{AccSteps} \\\\)\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Here, \", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{AccSteps} \\\\)\"\n  }), \" is the number of accumulation steps you run before updating. This allows you to have a large effective batch without requiring all the data to be loaded at once.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"balancing-batch-size-and-steps\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#balancing-batch-size-and-steps\",\n    \"aria-label\": \"balancing batch size and steps permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Balancing batch size and steps\"), \"\\n\", React.createElement(_components.p, null, \"Depending on the model architecture and data distribution, you might find an optimal effective batch size for stable training. The key is to adjust your learning rate accordingly, since a larger effective batch size might allow you to increase the learning rate. Not all tasks benefit from arbitrarily large batch sizes, so you may see diminishing returns after a certain point.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"practical-snippet-in-pytorch\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#practical-snippet-in-pytorch\",\n    \"aria-label\": \"practical snippet in pytorch permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Practical snippet in PyTorch\"), \"\\n\", React.createElement(Code, {\n    text: `\nmicro_batch_size = 8\naccumulation_steps = 4\neffective_batch_size = micro_batch_size * accumulation_steps\n\nmodel = Model().cuda()\noptimizer = optim.Adam(model.parameters(), lr=1e-3)\n\nfor i, (data, target) in enumerate(dataloader):\n    data, target = data.cuda(), target.cuda()\n    outputs = model(data)\n    loss = loss_fn(outputs, target)\n    loss.backward()\n    \n    if (i + 1) % accumulation_steps == 0:\n        optimizer.step()\n        optimizer.zero_grad()\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"In this structure, the optimizer only updates after 4 micro-batches. This is effectively a single update with a batch size of 32 (8x4), yet without needing the memory to store the entire 32-sample batch at once.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"jax-specific-structures\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#jax-specific-structures\",\n    \"aria-label\": \"jax specific structures permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"JAX-specific structures\"), \"\\n\", React.createElement(_components.p, null, \"JAX is quickly becoming a popular framework for high-performance machine learning research, particularly in areas that benefit from large-scale TPU clusters. On a single GPU, JAX still brings a powerful set of transformations and a functional programming style that can lead to efficient code. Let's discuss some JAX-specific concepts that help with single-GPU scaling.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"xla-compilation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#xla-compilation\",\n    \"aria-label\": \"xla compilation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"XLA compilation\"), \"\\n\", React.createElement(_components.p, null, \"JAX compiles your Python functions into optimized kernels using the \", React.createElement(Highlight, null, \"XLA\"), \" compiler. This can result in faster training loops compared to a typical eager-execution mode in frameworks like PyTorch. The key is understanding how to structure your code as pure functions and let JAX handle the transformations.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"vectorization-with-vmap\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#vectorization-with-vmap\",\n    \"aria-label\": \"vectorization with vmap permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Vectorization with vmap\"), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">vmap</code>\"\n    }\n  }), \" transformation in JAX automatically vectorizes functions across batch dimensions without you needing to manually batch your data. This can help you eliminate Python loops and push more parallel computation to the GPU. If you combine \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">vmap</code>\"\n    }\n  }), \" with \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">jit</code>\"\n    }\n  }), \" (just-in-time compilation), you can see significant speedups.\"), \"\\n\", React.createElement(Code, {\n    text: `\nimport jax\nimport jax.numpy as jnp\n\ndef forward(params, x):\n    # some forward logic\n    return ...\n\n@jax.jit\ndef loss_fn(params, x, y):\n    preds = forward(params, x)\n    return jnp.mean((preds - y)**2)\n\n# Vectorized version across multiple data points\nbatched_loss_fn = jax.vmap(loss_fn, in_axes=(None, 0, 0))\n\n@jax.jit\ndef step(params, x_batch, y_batch):\n    grads = jax.grad(\n        lambda p: jnp.sum(batched_loss_fn(p, x_batch, y_batch))\n    )(params)\n    # update params\n    # ...\n    return updated_params\n`\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"common-pitfalls\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#common-pitfalls\",\n    \"aria-label\": \"common pitfalls permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Common pitfalls\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Side effects:\"), \" JAX's functional style demands that you avoid or carefully handle side effects, such as mutating global state.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Compilation overhead:\"), \" The first time you run a JIT-compiled function, you pay a compilation cost. For large models, this overhead can be significant, but repeated calls pay off.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Shape and type issues:\"), \" Because JAX heavily relies on shape inference and static analysis, changing input shapes or dtypes can trigger recompilation.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"building-an-optimized-transformer-on-a-single-gpu\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#building-an-optimized-transformer-on-a-single-gpu\",\n    \"aria-label\": \"building an optimized transformer on a single gpu permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Building an optimized transformer on a single GPU\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"transformer-building-blocks\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#transformer-building-blocks\",\n    \"aria-label\": \"transformer building blocks permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Transformer building blocks\"), \"\\n\", React.createElement(_components.p, null, \"A typical Transformer includes:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Embedding layers\"), \" (for tokens or patch embeddings in vision).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Multi-head self-attention\"), \" modules (computationally expensive but key).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Feed-forward networks\"), \" (often large expansions, e.g. 4x the embedding dimension).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Residual connections\"), \" and \", React.createElement(_components.strong, null, \"layer normalization\"), \".\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Output projections\"), \" for classification, language modeling, etc.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"When you attempt to instantiate a large Transformer (e.g., hundreds of millions or billions of parameters) on a single GPU, memory constraints become your primary challenge. This is especially true if you have a large vocabulary (in NLP tasks) or large patch embeddings (in vision tasks).\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"memory-optimizations\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#memory-optimizations\",\n    \"aria-label\": \"memory optimizations permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Memory optimizations\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Layer sharing\"), \": Some Transformer variants reuse the same layer weights multiple times. For instance, DeBERTa reuses certain attention parameters across layers to reduce the overall memory footprint.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Checkpointing\"), \": Gradient checkpointing is frequently used at scale.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Mixed precision\"), \": Gains from half-precision are especially large in Transformers due to the massive number of matrix multiplications.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"multi-head-attention-efficiency\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#multi-head-attention-efficiency\",\n    \"aria-label\": \"multi head attention efficiency permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Multi-head attention efficiency\"), \"\\n\", React.createElement(_components.p, null, \"Multi-head attention can be memory-intensive because it requires calculating queries, keys, and values for each head, then performing a batch matrix multiplication. Libraries like \", React.createElement(Highlight, null, \"FlashAttention\"), \" (proposed in a recent research paper by Tri Dao and gang, ICML 2022) optimize these computations with better memory usage and improved caching. If you can integrate such specialized kernels, it can drastically reduce overhead and speed training.\"), \"\\n\", React.createElement(_components.p, null, \"Below is a PyTorch-like pseudo-implementation of a memory-optimized multi-head attention function, illustrating the concept (not the entire FlashAttention code, but a simplified approach).\"), \"\\n\", React.createElement(Code, {\n    text: `\nclass MultiHeadAttention(nn.Module):\n    def __init__(self, d_model, num_heads, dropout=0.1):\n        super().__init__()\n        self.num_heads = num_heads\n        self.head_dim = d_model // num_heads\n        self.W_q = nn.Linear(d_model, d_model)\n        self.W_k = nn.Linear(d_model, d_model)\n        self.W_v = nn.Linear(d_model, d_model)\n        self.out = nn.Linear(d_model, d_model)\n        self.dropout = nn.Dropout(dropout)\n    \n    def forward(self, x):\n        B, T, D = x.shape\n        q = self.W_q(x).view(B, T, self.num_heads, self.head_dim)\n        k = self.W_k(x).view(B, T, self.num_heads, self.head_dim)\n        v = self.W_v(x).view(B, T, self.num_heads, self.head_dim)\n        \n        # Permute to (B, num_heads, T, head_dim)\n        q = q.permute(0, 2, 1, 3)\n        k = k.permute(0, 2, 1, 3)\n        v = v.permute(0, 2, 1, 3)\n        \n        # Scaled dot-product\n        scores = (q @ k.transpose(-1, -2)) / (self.head_dim ** 0.5)\n        attn = torch.softmax(scores, dim=-1)\n        attn = self.dropout(attn)\n        \n        out = attn @ v  # shape: (B, num_heads, T, head_dim)\n        out = out.permute(0, 2, 1, 3).contiguous()\n        out = out.view(B, T, D)\n        return self.out(out)\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"In advanced usage, you might incorporate custom CUDA kernels or specialized libraries, but the principle remains the same: carefully handle memory usage at each step.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"profiling-single-gpu-training\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#profiling-single-gpu-training\",\n    \"aria-label\": \"profiling single gpu training permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Profiling single-GPU training\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"identifying-hotspots\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#identifying-hotspots\",\n    \"aria-label\": \"identifying hotspots permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Identifying hotspots\"), \"\\n\", React.createElement(_components.p, null, \"Profiling tools let you see how efficiently your GPU's resources are being used:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"PyTorch Profiler:\"), \" built-in tool with a TensorBoard plugin.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"NVIDIA Nsight Systems:\"), \" advanced system-wide profiler.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TensorFlow Profiler:\"), \" integrated with TensorBoard.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"JAX Profilers:\"), \" often rely on XLA debug tools.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"You'll want to watch for:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"GPU utilization\"), \": ideally close to 100% during training steps.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Memory throughput\"), \": ensuring you're not bounding on memory copy overhead.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Kernel launch overhead\"), \": small kernel calls repeated many times can hamper performance.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"interpreting-profiler-data\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#interpreting-profiler-data\",\n    \"aria-label\": \"interpreting profiler data permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Interpreting profiler data\"), \"\\n\", React.createElement(_components.p, null, \"A typical profiler trace might show which layers or operations consume the most time (e.g., multi-head attention blocks, feed-forward expansions, or embedding lookups). This data helps you decide where to:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Switch to specialized kernels.\"), \"\\n\", React.createElement(_components.li, null, \"Adopt checkpointing.\"), \"\\n\", React.createElement(_components.li, null, \"Change the shape or internal dimensions of your model.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Sometimes you'll discover that your input pipeline is the bottleneck. That is especially relevant if you're streaming data from disk or doing heavy augmentations on the CPU. Keeping the GPU fed with data is essential, so you may use multi-threaded or asynchronous data loading to prevent GPU idle time.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"asynchronous-computation-and-automatic-parallelism\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#asynchronous-computation-and-automatic-parallelism\",\n    \"aria-label\": \"asynchronous computation and automatic parallelism permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Asynchronous computation and automatic parallelism\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"asynchronous-execution\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#asynchronous-execution\",\n    \"aria-label\": \"asynchronous execution permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Asynchronous execution\"), \"\\n\", React.createElement(_components.p, null, \"Modern frameworks typically enqueue operations on the GPU without blocking your CPU code. This asynchronous approach can hide data transfer latency but requires careful synchronization (e.g., using \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.cuda()</code>\"\n    }\n  }), \" calls or \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.to(device)</code>\"\n    }\n  }), \" in PyTorch). In some advanced scenarios, you might deliberately overlap data loading with GPU computation.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"graph-optimizations\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#graph-optimizations\",\n    \"aria-label\": \"graph optimizations permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Graph optimizations\"), \"\\n\", React.createElement(_components.p, null, \"Frameworks like TensorFlow and JAX rely heavily on graph-based execution. They break your code into a computational graph that can be optimized. This can lead to:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Operation fusion\"), \": merging multiple smaller kernels into one to minimize overhead.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Inlining\"), \": removing function call overhead.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Parallel scheduling\"), \": running independent sub-graphs in parallel on the GPU.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"PyTorch's eager mode allows for greater flexibility but potentially less optimization. However, PyTorch also introduces TorchScript and \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">torch.compile</code>\"\n    }\n  }), \" (in newer versions) to enable more graph-based optimizations, bridging the gap with static-graph frameworks.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"computational-hardware-considerations\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#computational-hardware-considerations\",\n    \"aria-label\": \"computational hardware considerations permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Computational hardware considerations\"), \"\\n\", React.createElement(_components.p, null, \"While we're focusing primarily on single-GPU training, the type of GPU you use can have a dramatic effect on your scaling endeavors.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"gpu-architecture-basics\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#gpu-architecture-basics\",\n    \"aria-label\": \"gpu architecture basics permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"GPU architecture basics\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Cores and threads\"), \": The raw computing units that perform multiply-add operations.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Memory bandwidth\"), \": The speed at which data can be moved in and out of GPU memory.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Tensor cores\"), \": Specialized hardware blocks optimized for matrix multiplication in half precision (FP16) or tensor float 32 (TF32).\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"specialized-hardware-tpus-custom-asics\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#specialized-hardware-tpus-custom-asics\",\n    \"aria-label\": \"specialized hardware tpus custom asics permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Specialized hardware (TPUs, custom ASICs)\"), \"\\n\", React.createElement(_components.p, null, \"Google's Tensor Processing Units (TPUs) operate on a different programming paradigm (XLA-based) and can be extremely efficient for large-scale operations. Some companies also develop custom ASICs for specialized tasks. While these hardware offerings can push performance even further, the same fundamental scaling techniques (mixed precision, gradient checkpointing, etc.) often apply.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"matching-hardware-to-scaling-strategies\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#matching-hardware-to-scaling-strategies\",\n    \"aria-label\": \"matching hardware to scaling strategies permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Matching hardware to scaling strategies\"), \"\\n\", React.createElement(_components.p, null, \"Selecting the right hardware means considering your memory requirements, compute demands, and software ecosystem:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"High memory capacity GPUs\"), \" (e.g., NVIDIA A100 with 40GB or 80GB) let you handle bigger models or bigger batches.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Less memory but high compute\"), \" (like consumer GPUs with fewer memory channels but strong cores) might do well if you rely heavily on gradient accumulation or other memory reduction strategies.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"memory-optimization-strategies\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#memory-optimization-strategies\",\n    \"aria-label\": \"memory optimization strategies permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Memory-optimization strategies\"), \"\\n\", React.createElement(_components.p, null, \"Beyond gradient checkpointing and mixed precision, several additional techniques can further reduce the memory footprint:\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"activation-quantization-and-tensor-compression\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#activation-quantization-and-tensor-compression\",\n    \"aria-label\": \"activation quantization and tensor compression permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Activation quantization and tensor compression\"), \"\\n\", React.createElement(_components.p, null, \"Advanced methods compress activations on the fly, typically at a lower precision than FP16. Some research has explored 8-bit or even 4-bit quantization for activations. For example, \", React.createElement(Highlight, null, \"Q8BERT\"), \" (by Zafrir and gang, NeurIPS 2019) used 8-bit quantization for both weights and activations in a BERT model without substantial accuracy loss.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"offloading\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#offloading\",\n    \"aria-label\": \"offloading permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Offloading\"), \"\\n\", React.createElement(_components.p, null, \"If your GPU memory is severely constrained, you can offload certain tensors to CPU memory or disk:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Optimizer state\"), \": Instead of storing the entire optimizer state (e.g., moments in Adam) on GPU, place them in CPU memory.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Activation CPU offload\"), \": Some frameworks can automatically move seldom-needed activations to CPU memory and move them back to GPU on demand.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"These methods can let you train bigger models, but offloading can also drastically slow down training if done too frequently.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"best-practices-for-single-gpu-training-at-scale\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#best-practices-for-single-gpu-training-at-scale\",\n    \"aria-label\": \"best practices for single gpu training at scale permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Best practices for single-GPU training at scale\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"efficient-data-pipelines\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#efficient-data-pipelines\",\n    \"aria-label\": \"efficient data pipelines permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Efficient data pipelines\"), \"\\n\", React.createElement(_components.p, null, \"Always ensure that your training loop is not starved for data. Techniques include:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Pre-fetching\"), \": Load data for the next batch while the current batch is still being processed.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"In-memory caching\"), \": If your dataset is small enough, keep it in RAM to avoid disk I/O.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Shuffle buffering\"), \": Maintain a large shuffle buffer in memory to randomize data effectively.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"hyperparameter-tuning-for-large-models\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#hyperparameter-tuning-for-large-models\",\n    \"aria-label\": \"hyperparameter tuning for large models permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Hyperparameter tuning for large models\"), \"\\n\", React.createElement(_components.p, null, \"Large models can be more sensitive to learning rate, batch size, warm-up schedules, and weight decay. Empirical testing is crucial; you might find that a carefully tuned small learning rate or specialized schedule can stabilize training.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"logging-and-checkpointing\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#logging-and-checkpointing\",\n    \"aria-label\": \"logging and checkpointing permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Logging and checkpointing\"), \"\\n\", React.createElement(_components.p, null, \"When your training runs for days or weeks on a single GPU, you must have robust checkpointing:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Periodic checkpointing\"), \": Save model weights at intervals so you can resume if an error occurs.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Versioning\"), \": Include hyperparameters and environment details in your logs or checkpoints for full reproducibility.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Logging\"), \": Tools like TensorBoard, WandB, or Neptune.ai can help track metrics over long runs and keep an eye on potential divergence or overfitting.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"intermediate-summary-of-single-gpu-techniques\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#intermediate-summary-of-single-gpu-techniques\",\n    \"aria-label\": \"intermediate summary of single gpu techniques permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Intermediate summary of single-GPU techniques\"), \"\\n\", React.createElement(_components.p, null, \"We've covered an array of strategies — mixed precision, gradient checkpointing, gradient accumulation, asynchronous execution, specialized libraries, and more — that collectively allow you to push the limits of single-GPU training. This forms a critical first step toward truly large-scale training. Once you master these techniques, you'll be better positioned to handle multi-GPU setups or distributed training across multiple nodes, as we'll explore in subsequent parts of this course.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"references-and-resources\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#references-and-resources\",\n    \"aria-label\": \"references and resources permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"References and resources\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Official PyTorch Documentation\"), \": Provides excellent coverage of \", React.createElement(Highlight, null, \"torch.cuda.amp\"), \" and advanced memory optimization APIs.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TensorFlow Guide to Mixed Precision\"), \": Offers an official breakdown of best practices for half precision in TF.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"JAX Documentation\"), \": Explains \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">vmap</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">jit</code>\"\n    }\n  }), \", and the XLA compiler in detail.\"), \"\\n\", React.createElement(_components.li, null, \"Smith and gang, NeurIPS 2022: On advanced memory saving techniques for large transformers (covering various checkpointing strategies).\"), \"\\n\", React.createElement(_components.li, null, \"OpenAI's blogs on GPT scaling: Provide insight into how large-scale language models benefit from every optimization trick you can imagine.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(Highlight, null, \"D2L.ai\"), \": The open-source \\\"Dive into Deep Learning\\\" resource. Their chapters on computational performance are especially relevant if you want quick code examples.\"), \"\\n\", React.createElement(_components.li, null, \"Community forums (PyTorch Discuss, TensorFlow Forums, JAX GitHub Issues): Great places to find real-world solutions from practitioners who have faced similar memory or scaling issues.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Remember, these single-GPU techniques serve as the critical foundation to scale beyond. In the next parts of the course, we'll examine multi-GPU data parallelism, model parallelism, pipeline parallelism, and distributed setups using frameworks like PyTorch's Distributed Data Parallel, Horovod, or Ray. Mastering the single-GPU memory management, precision tuning, and performance profiling is your stepping stone to the truly large-scale adventures awaiting you in the world of modern AI.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/avrtt/Repos/avrtt.github.io/src/pages/posts/research/training_models_at_scale.mdx\";\nimport React, {useState, useEffect} from 'react';\nimport {useSiteMetadata} from \"../hooks/useSiteMetadata\";\nimport RemoveMarkdown from 'remove-markdown';\nimport {ImageContext} from '../context/ImageContext';\nimport {MDXProvider} from '@mdx-js/react';\nimport Image from '../components/PostImage';\nimport {motion} from 'framer-motion';\nimport SEO from \"../components/seo\";\nimport PostBanner from '../components/PostBanner';\nimport PostBottom from '../components/PostBottom';\nimport {wordsPerMinuteAdventures, wordsPerMinuteResearch, wordsPerMinuteThoughts} from '../data/commonVariables';\nimport {graphql} from 'gatsby';\nimport PartOfCourseNotice from \"../components/PartOfCourseNotice\";\nimport * as stylesButtonsCommon from \"../styles/buttons_common.module.scss\";\nimport * as stylesCustomPostLayouts from \"../styles/custom_post_layouts.module.scss\";\nimport * as stylesTableOfContents from \"../styles/table_of_contents.module.scss\";\nimport * as stylesTagBadges from \"../styles/tag_badges.module.scss\";\nfunction formatReadTime(minutes) {\n  if (minutes <= 10) return '~10 min';\n  if (minutes <= 20) return '~20 min';\n  if (minutes <= 30) return '~30 min';\n  if (minutes <= 40) return '~40 min';\n  if (minutes <= 50) return '~50 min';\n  if (minutes <= 60) return '~1 h';\n  const hours = Math.floor(minutes / 60);\n  const remainder = minutes % 60;\n  if (remainder <= 30) {\n    return `~${hours}${remainder > 0 ? '.5' : ''} h`;\n  }\n  return `~${hours + 1} h`;\n}\nconst TableOfContents = ({toc}) => {\n  if (!toc || !toc.items) return null;\n  const handleClick = (e, url) => {\n    e.preventDefault();\n    const targetId = url.replace('#', '');\n    const targetElement = document.getElementById(targetId);\n    if (targetElement) {\n      targetElement.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }\n  };\n  return React.createElement(\"nav\", {\n    className: stylesTableOfContents.toc\n  }, React.createElement(\"ul\", null, toc.items.map((item, index) => React.createElement(\"li\", {\n    key: index\n  }, React.createElement(\"a\", {\n    href: item.url,\n    onClick: e => handleClick(e, item.url)\n  }, item.title), item.items && React.createElement(TableOfContents, {\n    toc: {\n      items: item.items\n    }\n  })))));\n};\nexport function PostTemplate({data: {mdx, allMdx, allPostImages}, children}) {\n  const {frontmatter, body, tableOfContents} = mdx;\n  const index = frontmatter.index;\n  const slug = frontmatter.slug;\n  const section = slug.split('/')[1];\n  const posts = allMdx.nodes.filter(post => post.frontmatter.slug.includes(`/${section}/`));\n  const sortedPosts = posts.sort((a, b) => a.frontmatter.index - b.frontmatter.index);\n  const currentIndex = sortedPosts.findIndex(post => post.frontmatter.index === index);\n  const nextPost = sortedPosts[currentIndex + 1];\n  const lastPost = sortedPosts[currentIndex - 1];\n  const trimmedSlug = frontmatter.slug.replace(/\\/$/, '');\n  const keyCurrent = (/[^/]*$/).exec(trimmedSlug)[0];\n  const basePath = `posts/${section}/content/${keyCurrent}/`;\n  const [isWideLayout, setIsWideLayout] = useState(frontmatter.flagWideLayoutByDefault);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const toggleLayout = () => {\n    setIsWideLayout(!isWideLayout);\n  };\n  useEffect(() => {\n    setIsAnimating(true);\n    const timer = setTimeout(() => setIsAnimating(false), 340);\n    return () => clearTimeout(timer);\n  }, [isWideLayout]);\n  var wordsPerMinute;\n  if (section === \"adventures\") {\n    wordsPerMinute = wordsPerMinuteAdventures;\n  } else if (section === \"research\") {\n    wordsPerMinute = wordsPerMinuteResearch;\n  } else if (section === \"thoughts\") {\n    wordsPerMinute = wordsPerMinuteThoughts;\n  }\n  const plainTextBody = RemoveMarkdown(body).replace(/import .*? from .*?;/g, '').replace(/<.*?>/g, '').replace(/\\{\\/\\*[\\s\\S]*?\\*\\/\\}/g, '').trim();\n  const wordCount = plainTextBody.split(/\\s+/).length;\n  const baseReadTimeMinutes = Math.ceil(wordCount / wordsPerMinute);\n  const extraTime = frontmatter.extraReadTimeMin || 0;\n  const totalReadTime = baseReadTimeMinutes + extraTime;\n  const readTime = formatReadTime(totalReadTime);\n  const notices = [{\n    flag: frontmatter.flagDraft,\n    component: () => import(\"../components/NotFinishedNotice\")\n  }, {\n    flag: frontmatter.flagMindfuckery,\n    component: () => import(\"../components/MindfuckeryNotice\")\n  }, {\n    flag: frontmatter.flagRewrite,\n    component: () => import(\"../components/RewriteNotice\")\n  }, {\n    flag: frontmatter.flagOffensive,\n    component: () => import(\"../components/OffensiveNotice\")\n  }, {\n    flag: frontmatter.flagProfane,\n    component: () => import(\"../components/ProfanityNotice\")\n  }, {\n    flag: frontmatter.flagMultilingual,\n    component: () => import(\"../components/MultilingualNotice\")\n  }, {\n    flag: frontmatter.flagUnreliably,\n    component: () => import(\"../components/UnreliablyNotice\")\n  }, {\n    flag: frontmatter.flagPolitical,\n    component: () => import(\"../components/PoliticsNotice\")\n  }, {\n    flag: frontmatter.flagCognitohazard,\n    component: () => import(\"../components/CognitohazardNotice\")\n  }, {\n    flag: frontmatter.flagHidden,\n    component: () => import(\"../components/HiddenNotice\")\n  }];\n  const [loadedNotices, setLoadedNotices] = useState([]);\n  useEffect(() => {\n    notices.forEach(({flag, component}) => {\n      if (flag) {\n        component().then(module => {\n          setLoadedNotices(prev => [...prev, module.default]);\n        });\n      }\n    });\n  }, []);\n  return React.createElement(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.15\n    }\n  }, React.createElement(PostBanner, {\n    postNumber: frontmatter.index,\n    date: frontmatter.date,\n    updated: frontmatter.updated,\n    readTime: readTime,\n    difficulty: frontmatter.difficultyLevel,\n    title: frontmatter.title,\n    desc: frontmatter.desc,\n    banner: frontmatter.banner,\n    section: section,\n    postKey: keyCurrent,\n    isMindfuckery: frontmatter.flagMindfuckery,\n    mainTag: frontmatter.mainTag\n  }), React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      flexWrap: \"wrap\",\n      maxWidth: \"75%\",\n      marginLeft: \"auto\",\n      paddingRight: \"1vw\",\n      marginTop: \"-6vh\",\n      marginBottom: \"4vh\"\n    }\n  }, frontmatter.otherTags.map((tag, index) => React.createElement(\"span\", {\n    key: index,\n    className: `noselect ${stylesTagBadges.tagPosts}`,\n    style: {\n      margin: \"0 5px 5px 0\"\n    }\n  }, tag))), React.createElement(\"div\", {\n    className: \"postBody\"\n  }, React.createElement(TableOfContents, {\n    toc: tableOfContents\n  })), React.createElement(\"br\"), React.createElement(\"div\", {\n    style: {\n      margin: \"0 10% -2vh 30%\",\n      textAlign: \"right\"\n    }\n  }, React.createElement(motion.button, {\n    className: `noselect ${stylesCustomPostLayouts.postButton}`,\n    id: stylesCustomPostLayouts.postLayoutSwitchButton,\n    onClick: toggleLayout,\n    whileTap: {\n      scale: 0.93\n    }\n  }, React.createElement(motion.div, {\n    className: stylesButtonsCommon.buttonTextWrapper,\n    key: isWideLayout,\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.3,\n      ease: \"easeInOut\"\n    }\n  }, isWideLayout ? \"Switch to default layout\" : \"Switch to wide layout\"))), React.createElement(\"br\"), React.createElement(\"div\", {\n    className: \"postBody\",\n    style: {\n      margin: isWideLayout ? \"0 -14%\" : \"\",\n      maxWidth: isWideLayout ? \"200%\" : \"\",\n      transition: \"margin 1s ease, max-width 1s ease, padding 1s ease\"\n    }\n  }, React.createElement(\"div\", {\n    className: `${stylesCustomPostLayouts.textContent} ${isAnimating ? stylesCustomPostLayouts.fadeOut : stylesCustomPostLayouts.fadeIn}`\n  }, loadedNotices.map((NoticeComponent, index) => React.createElement(NoticeComponent, {\n    key: index\n  })), frontmatter.indexCourse ? React.createElement(PartOfCourseNotice, {\n    index: frontmatter.indexCourse,\n    category: frontmatter.courseCategoryName\n  }) : \"\", React.createElement(ImageContext.Provider, {\n    value: {\n      images: allPostImages.nodes,\n      basePath: basePath.replace(/\\/$/, '') + '/'\n    }\n  }, React.createElement(MDXProvider, {\n    components: {\n      Image\n    }\n  }, children)))), React.createElement(PostBottom, {\n    nextPost: nextPost,\n    lastPost: lastPost,\n    keyCurrent: keyCurrent,\n    section: section\n  }));\n}\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport function Head({data}) {\n  const {frontmatter} = data.mdx;\n  const title = frontmatter.titleSEO || frontmatter.title;\n  const titleOG = frontmatter.titleOG || title;\n  const titleTwitter = frontmatter.titleTwitter || title;\n  const description = frontmatter.descSEO || frontmatter.desc;\n  const descriptionOG = frontmatter.descOG || description;\n  const descriptionTwitter = frontmatter.descTwitter || description;\n  const schemaType = frontmatter.schemaType || \"BlogPosting\";\n  const keywords = frontmatter.keywordsSEO;\n  const datePublished = frontmatter.date;\n  const dateModified = frontmatter.updated || datePublished;\n  const imageOG = frontmatter.imageOG || frontmatter.banner?.childImageSharp?.gatsbyImageData?.images?.fallback?.src;\n  const imageAltOG = frontmatter.imageAltOG || descriptionOG;\n  const imageTwitter = frontmatter.imageTwitter || imageOG;\n  const imageAltTwitter = frontmatter.imageAltTwitter || descriptionTwitter;\n  const canonicalUrl = frontmatter.canonicalURL;\n  const flagHidden = frontmatter.flagHidden || false;\n  const mainTag = frontmatter.mainTag || \"Posts\";\n  const section = frontmatter.slug.split('/')[1] || \"posts\";\n  const type = \"article\";\n  const {siteUrl} = useSiteMetadata();\n  const breadcrumbJSON = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    \"itemListElement\": [{\n      \"@type\": \"ListItem\",\n      \"position\": 1,\n      \"name\": \"Home\",\n      \"item\": siteUrl\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 2,\n      \"name\": mainTag,\n      \"item\": `${siteUrl}/${frontmatter.slug.split('/')[1]}`\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 3,\n      \"name\": title,\n      \"item\": `${siteUrl}${frontmatter.slug}`\n    }]\n  };\n  return React.createElement(SEO, {\n    title: title + \" - avrtt.blog\",\n    titleOG: titleOG,\n    titleTwitter: titleTwitter,\n    description: description,\n    descriptionOG: descriptionOG,\n    descriptionTwitter: descriptionTwitter,\n    schemaType: schemaType,\n    keywords: keywords,\n    datePublished: datePublished,\n    dateModified: dateModified,\n    imageOG: imageOG,\n    imageAltOG: imageAltOG,\n    imageTwitter: imageTwitter,\n    imageAltTwitter: imageAltTwitter,\n    canonicalUrl: canonicalUrl,\n    flagHidden: flagHidden,\n    mainTag: mainTag,\n    section: section,\n    type: type\n  }, React.createElement(\"script\", {\n    type: \"application/ld+json\"\n  }, JSON.stringify(breadcrumbJSON)));\n}\nexport const query = graphql`\n  query($id: String!, $postsFilterRegex: String!, $imagePathRegex: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        index\n        indexCourse\n        title\n        titleSEO\n        titleOG\n        titleTwitter\n        courseCategoryName\n        desc\n        descSEO\n        descOG\n        descTwitter\n        date\n        updated\n        extraReadTimeMin\n        difficultyLevel\n        flagDraft\n        flagMindfuckery\n        flagRewrite\n        flagOffensive\n        flagProfane\n        flagMultilingual\n        flagUnreliably\n        flagPolitical\n        flagCognitohazard\n        flagHidden\n        flagWideLayoutByDefault\n        schemaType\n        mainTag\n        otherTags\n        keywordsSEO\n        banner {\n          childImageSharp {\n            gatsbyImageData(\n\t\t\t\t\t\t\tformats: [JPG, WEBP], \n\t\t\t\t\t\t\tplaceholder: BLURRED, \n\t\t\t\t\t\t\tquality: 100\n\t\t\t\t\t\t)\n          }\n        }\n        imageOG\n        imageAltOG\n        imageTwitter\n        imageAltTwitter\n        canonicalURL\n        slug\n      }\n      body\n      tableOfContents(maxDepth: 3)\n    }\n    allMdx(filter: {frontmatter: {slug: {regex: $postsFilterRegex}}}) {\n      nodes {\n        frontmatter {\n          index\n          slug\n          banner {\n            childImageSharp {\n              gatsbyImageData(\n                formats: [JPG, WEBP],\n                placeholder: BLURRED,\n                quality: 100\n              )\n            }\n          }\n        }\n      }\n    }\n    allPostImages: allFile(\n      filter: { \n        sourceInstanceName: { eq: \"images\" },\n        relativePath: { regex: $imagePathRegex }\n      }\n    ) {\n      nodes {\n        relativePath\n        childImageSharp {\n          gatsbyImageData(\n            layout: CONSTRAINED\n            placeholder: DOMINANT_COLOR\n            quality: 100\n          )\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport Latex from 'react-latex-next';\nimport 'katex/dist/katex.min.css'; \n  \nconst L = ({ text }) => {\n  return (\n    <Latex>{text}</Latex>\n  );\n};\nexport default L;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","a","span","h3","ul","li","strong","ol","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","Latex","text","Highlight","Code","wrapper","MDXLayout","TableOfContents","_ref","toc","items","stylesTableOfContents","map","item","index","key","url","onClick","e","handleClick","preventDefault","targetId","replace","targetElement","document","getElementById","scrollIntoView","behavior","block","title","PostTemplate","_ref2","data","mdx","allMdx","allPostImages","children","frontmatter","body","tableOfContents","section","slug","split","sortedPosts","nodes","filter","post","includes","sort","b","currentIndex","findIndex","nextPost","lastPost","trimmedSlug","keyCurrent","exec","basePath","isWideLayout","setIsWideLayout","useState","flagWideLayoutByDefault","isAnimating","setIsAnimating","wordsPerMinute","useEffect","timer","setTimeout","clearTimeout","wordsPerMinuteAdventures","wordsPerMinuteResearch","wordsPerMinuteThoughts","wordCount","RemoveMarkdown","trim","length","readTime","minutes","hours","Math","floor","remainder","formatReadTime","ceil","extraReadTimeMin","notices","flag","flagDraft","component","flagMindfuckery","flagRewrite","flagOffensive","flagProfane","flagMultilingual","flagUnreliably","flagPolitical","flagCognitohazard","flagHidden","loadedNotices","setLoadedNotices","forEach","_ref3","then","module","prev","concat","_toConsumableArray","default","motion","div","initial","opacity","animate","exit","transition","duration","PostBanner","postNumber","date","updated","difficulty","difficultyLevel","desc","banner","postKey","isMindfuckery","mainTag","display","justifyContent","flexWrap","maxWidth","marginLeft","paddingRight","marginTop","marginBottom","otherTags","tag","stylesTagBadges","margin","textAlign","button","stylesCustomPostLayouts","toggleLayout","whileTap","scale","stylesButtonsCommon","ease","NoticeComponent","indexCourse","PartOfCourseNotice","category","courseCategoryName","ImageContext","Provider","value","images","MDXProvider","Image","PostBottom","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref4","_frontmatter$banner","_frontmatter$banner$c","_frontmatter$banner$c2","_frontmatter$banner$c3","_frontmatter$banner$c4","titleSEO","titleOG","titleTwitter","description","descSEO","descriptionOG","descOG","descriptionTwitter","descTwitter","schemaType","keywords","keywordsSEO","datePublished","dateModified","imageOG","childImageSharp","gatsbyImageData","fallback","src","imageAltOG","imageTwitter","imageAltTwitter","canonicalUrl","canonicalURL","siteUrl","useSiteMetadata","breadcrumbJSON","SEO","type","JSON","stringify"],"sourceRoot":""}