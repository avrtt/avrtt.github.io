{"version":3,"file":"component---src-templates-post-js-content-file-path-src-pages-posts-research-pixelrnn-and-pixelcnn-mdx-8920f3165dcef822be0b.js","mappings":"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","sources":["webpack://avrtt.blog/./src/pages/posts/research/pixelrnn_and_pixelcnn.mdx","webpack://avrtt.blog/./src/templates/post.js","webpack://avrtt.blog/./src/components/Latex/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\n/**(intro: a quote, catchphrase, joke, etc.)**/\n/*\n\nPixelRNN и PixelCNN\nhttps://neerc.ifmo.ru/wiki/index.php?title=PixelRNN_%D0%B8_PixelCNN\n\n*/\n/*\n\n1. Introduction\n2. Chapter 2: fundamentals of pixel-based generative modeling\nconditional probability distributions, factorization of the joint distribution, importance of receptive fields\n3. PixelRNN\ncore architecture, masked convolutions and dependencies, row and diagonal LSTM variants, diagonal BiLSTM explanation, training procedure and loss function, strengths and limitations\n4. PixelCNN\nnetwork design, masked convolutions in PixelCNN, conditional PixelCNN variants, receptive fields and pixel dependencies, training and sampling strategy, key benefits\n5. Comparison of PixelRNN and PixelCNN\nperformance metrics, computational complexity, image quality and diversity, practical considerations, gated pixelcnn: pixelcnn++, parallelization techniques\n6. Implementation\n7. Applications and use cases\n\n*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Highlight from \"../../../components/Highlight\";\nimport Code from \"../../../components/Code\";\nimport Latex from \"../../../components/Latex\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\",\n    h4: \"h4\",\n    em: \"em\",\n    br: \"br\"\n  }, _provideComponents(), props.components), {Image} = _components;\n  if (!Image) _missingMdxReference(\"Image\", true);\n  return React.createElement(React.Fragment, null, \"\\n\", React.createElement(\"br\"), \"\\n\", \"\\n\", \"\\n\", React.createElement(_components.p, null, \"The idea of generating images pixel-by-pixel may seem both intuitive and daunting in equal measure. On the one hand, images are naturally composed of discrete pixels — each of which can, in principle, be drawn from some distribution — but on the other hand, the dependencies between pixels can be vastly complex and high-dimensional. Many approaches in generative modeling have tackled this problem through implicit probability models (such as Generative Adversarial Networks) or latent-variable models (such as Variational Autoencoders), which sidestep a direct, explicit modeling of each pixel's probability in favor of more abstract representations. However, \", React.createElement(_components.strong, null, \"PixelRNN\"), \" and \", React.createElement(_components.strong, null, \"PixelCNN\"), \" are noteworthy in that they remain firmly rooted in the \", React.createElement(_components.strong, null, \"autoregressive\"), \" paradigm. They explicitly factor the joint distribution of an image over its pixels via the chain rule of probability and attempt to capture as much local and global context as possible to produce realistic samples.\"), \"\\n\", React.createElement(_components.p, null, \"The key insight behind these models is that each pixel \", React.createElement(Latex, {\n    text: \"\\\\(x_i\\\\)\"\n  }), \" in an image can be modeled as conditioned on all previously generated pixels \", React.createElement(Latex, {\n    text: \"\\\\(x_1, x_2, \\\\dots, x_{i-1}\\\\)\"\n  }), \". In other words, one can apply a factorization:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\np(X) = \\\\prod_{i=1}^{N^2} p(x_i \\\\mid x_1, x_2, \\\\dots, x_{i-1}),\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\(X\\\\)\"\n  }), \" represents the image of size \", React.createElement(Latex, {\n    text: \"\\\\(N\\\\times N\\\\)\"\n  }), \" (for simplicity, grayscale or a single channel; for color images, each pixel intensity can be broken down into color channels). Models based on this approach had been studied in earlier works, but the introduction of \", React.createElement(_components.strong, null, \"PixelRNN\"), \" and \", React.createElement(_components.strong, null, \"PixelCNN\"), \" in 2016 (van den Oord and gang, NeurIPS 2016) was a watershed moment, showcasing that purely autoregressive generative models could produce high-quality images, even though at the time they could not rival the best Generative Adversarial Networks in terms of photorealism.\"), \"\\n\", React.createElement(_components.p, null, \"In this article, I dive deeply into the fundamentals of pixel-based generative modeling and the specific architectural choices behind PixelRNN and PixelCNN. I will also compare the two approaches in terms of performance, scalability, and image quality, explore some of their variants (including Gated PixelCNN or PixelCNN++), discuss how one might implement them in practice, and finally look at some of their most common applications and real-world use cases. Along the way, I will incorporate references to the relevant research and expansions on the theoretical underpinnings, so that you come away with a solid grasp of how these models work and why they remain important in modern generative modeling.\"), \"\\n\", React.createElement(Image, {\n    alt: \"An example usage of PixelRNN/PixelCNN\",\n    path: \"\",\n    caption: \"Illustration of pixel-level generation concepts in action. Each pixel is predicted conditioned on previously generated pixels.\",\n    zoom: \"false\"\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"fundamentals-of-pixel-based-generative-modeling\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#fundamentals-of-pixel-based-generative-modeling\",\n    \"aria-label\": \"fundamentals of pixel based generative modeling permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Fundamentals of pixel-based generative modeling\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"conditional-probability-distributions-factorization-of-the-joint-distribution-importance-of-receptive-fields\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#conditional-probability-distributions-factorization-of-the-joint-distribution-importance-of-receptive-fields\",\n    \"aria-label\": \"conditional probability distributions factorization of the joint distribution importance of receptive fields permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Conditional probability distributions, factorization of the joint distribution, importance of receptive fields\"), \"\\n\", React.createElement(_components.p, null, \"At the heart of pixel-based generative modeling is the factorization of an image's joint distribution. For an image \", React.createElement(Latex, {\n    text: \"\\\\(X\\\\)\"\n  }), \" of size \", React.createElement(Latex, {\n    text: \"\\\\(N \\\\times N\\\\)\"\n  }), \" (we will generalize later to color images or rectangular images), we can flatten it into a vector of length \", React.createElement(Latex, {\n    text: \"\\\\(N^2\\\\)\"\n  }), \" in a raster-scan order:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\nV_X = \\\\{ x_1, x_2, \\\\dots, x_{N^2} \\\\},\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\(x_1\\\\)\"\n  }), \" corresponds to the top-left pixel, \", React.createElement(Latex, {\n    text: \"\\\\(x_2\\\\)\"\n  }), \" the next pixel in the row, and so forth, row by row. The fundamental assumption is that each pixel depends on all the previous ones in this flattened sequence, so:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\np(X) = p(x_1, x_2, \\\\dots, x_{N^2}) = \\\\prod_{i=1}^{N^2} p(x_i \\\\mid x_1, x_2, \\\\dots, x_{i-1}).\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"This direct factorization is perfectly valid from a theoretical standpoint; however, implementing it naively poses enormous computational and modeling challenges. An \", React.createElement(_components.strong, null, \"autoregressive\"), \" neural network can be designed to approximate \", React.createElement(Latex, {\n    text: \"\\\\(p(x_i \\\\mid x_1, \\\\dots, x_{i-1})\\\\)\"\n  }), \", but how does one effectively capture the context of potentially thousands of previously seen pixels?\"), \"\\n\", React.createElement(_components.p, null, \"The solution is to carefully structure the \", React.createElement(_components.strong, null, \"receptive field\"), \" in a network so that each pixel's prediction only depends on the relevant subset of previously generated pixels. In an image, the most crucial immediate context is usually found in nearby pixels — including those above it, to the left, and sometimes in diagonally adjacent locations. In an RNN-based approach (PixelRNN), recurrent connections enforce dependencies from previously processed positions. In a CNN-based approach (PixelCNN), carefully \", React.createElement(_components.strong, null, \"masked convolutions\"), \" are used to prevent \\\"seeing\\\" future pixels. The key concept, in either approach, is to ensure that each pixel can incorporate the relevant dependencies while respecting the autoregressive ordering.\"), \"\\n\", React.createElement(_components.p, null, \"Why is this ordering constraint so important? Because if a pixel can inadvertently \\\"see\\\" the value of a future pixel during training, the model will cheat. It would inadvertently glean information about what it is supposed to predict, destroying the validity of the factorization. Masked convolutions are, therefore, a crucial design choice: they block the flow of information from future or rightward / downward positions in the image, preserving the correct autoregressive conditioning.\"), \"\\n\", React.createElement(_components.p, null, \"In summary:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"We are predicting each pixel by conditioning on a subset of previously generated pixels.\"), \"\\n\", React.createElement(_components.li, null, \"The choice of architecture heavily influences how these dependencies are captured (e.g., LSTMs scanning the image or convolutional networks with carefully placed masks).\"), \"\\n\", React.createElement(_components.li, null, \"Ensuring the model only has access to truly \\\"past\\\" pixels is crucial for correct and stable training.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Next, let's explore the specifics of \", React.createElement(_components.strong, null, \"PixelRNN\"), \", which was originally introduced to handle these dependencies with recurrent neural network modules.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"pixelrnn\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#pixelrnn\",\n    \"aria-label\": \"pixelrnn permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"PixelRNN\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"core-architecture\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#core-architecture\",\n    \"aria-label\": \"core architecture permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Core architecture\"), \"\\n\", React.createElement(_components.p, null, \"PixelRNN is built on the fundamental principle that an RNN can be unrolled pixel-by-pixel (or row-by-row, or diagonal-by-diagonal) to model the conditional distributions \", React.createElement(Latex, {\n    text: \"\\\\(p(x_i \\\\mid x_1, \\\\dots, x_{i-1})\\\\)\"\n  }), \". This approach is reminiscent of earlier attempts to use 2D recurrent structures for image modeling (for instance, works on \", React.createElement(_components.strong, null, \"Spatial LSTMs\"), \"). However, the direct 2D RNN approach can be extremely slow, because for each pixel, one needs the hidden state from all relevant neighboring positions.\"), \"\\n\", React.createElement(_components.p, null, \"To mitigate this, the PixelRNN authors introduced specialized LSTM variants, notably \", React.createElement(_components.strong, null, \"RowLSTM\"), \" and \", React.createElement(_components.strong, null, \"Diagonal BiLSTM\"), \", each providing different trade-offs between computation speed and the quality of captured dependencies.\"), \"\\n\", React.createElement(_components.p, null, \"The overall PixelRNN architecture (van den Oord and gang, 2016) can be summarized as follows:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Masked convolution\"), \" (MaskA) to handle the earliest layers of processing (ensuring that each pixel only receives information from previously seen pixels and channels).\"), \"\\n\", React.createElement(_components.li, null, \"Several \", React.createElement(_components.strong, null, \"RNN layers\"), \" in one of two configurations:\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"RowLSTM\"), \" or\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Diagonal BiLSTM\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"Additional convolutional or residual layers (with possible dimension-reduction blocks).\"), \"\\n\", React.createElement(_components.li, null, \"A final \", React.createElement(Latex, {\n    text: \"\\\\(1 \\\\times 1\\\\)\"\n  }), \" convolution that produces logits for a \", React.createElement(_components.strong, null, \"Softmax\"), \" distribution over possible pixel intensities (for each color channel, if in color).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"The masked convolution portion ensures that no future pixels are visible when we pass the input to the recurrent layers. The recurrent layers handle the context. Finally, the softmax or logistic mixture output layer predicts the distribution of each pixel intensity.\"), \"\\n\", React.createElement(Image, {\n    alt: \"Visualization of PixelRNN/PixelCNN approach\",\n    path: \"\",\n    caption: \"Example depiction of how each pixel depends on previously processed pixels.\",\n    zoom: \"false\"\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"masked-convolutions-and-dependencies\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#masked-convolutions-and-dependencies\",\n    \"aria-label\": \"masked convolutions and dependencies permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Masked convolutions and dependencies\"), \"\\n\", React.createElement(_components.p, null, \"The \\\"masked convolution\\\" concept is shared by PixelRNN and PixelCNN. Here, the convolution kernel is intentionally \\\"blocked\\\" or set to zero for weights that correspond to future or rightward positions relative to the current pixel. By convention, two types of masks are often discussed in the PixelCNN/PixelRNN literature:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"MaskA\"), \": used to ensure that the current pixel does not have access to itself or subsequent channels within a color pixel (in color images). For example, if you're generating the red channel of pixel (i,j), you shouldn't see the green or blue channels for that same pixel.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"MaskB\"), \": used at later layers, allowing the model to see the current channel of previously generated color channels, while still preventing it from peeking at future pixel positions.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"In PixelRNN, these masks appear in the earliest convolutional layers (the \\\"input-to-state\\\" transformations). Once the data is passed into the LSTM or RNN blocks, the recurrence ensures that only \\\"past\\\" pixel information is propagated. The combination of masked convolution plus carefully designed RNN transitions captures local and global dependencies in an autoregressive manner.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"row-and-diagonal-lstm-variants\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#row-and-diagonal-lstm-variants\",\n    \"aria-label\": \"row and diagonal lstm variants permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Row and diagonal LSTM variants\"), \"\\n\", React.createElement(_components.p, null, \"The earliest version of PixelRNN used a \\\"naive\\\" 2D LSTM, in which each hidden state \", React.createElement(Latex, {\n    text: \"\\\\(h_{i,j}\\\\)\"\n  }), \" depended on \", React.createElement(Latex, {\n    text: \"\\\\(h_{i-1,j}\\\\)\"\n  }), \", \", React.createElement(Latex, {\n    text: \"\\\\(h_{i,j-1}\\\\)\"\n  }), \", and the current pixel \", React.createElement(Latex, {\n    text: \"\\\\(x_{i,j}\\\\)\"\n  }), \". Though conceptually appealing, this approach is difficult to parallelize because you essentially have to compute the entire row or column in sequence before moving on.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"rowlstm\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#rowlstm\",\n    \"aria-label\": \"rowlstm permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"RowLSTM\"), \"\\n\", React.createElement(_components.p, null, \"In \", React.createElement(_components.strong, null, \"RowLSTM\"), \", the hidden state at position \", React.createElement(Latex, {\n    text: \"(i, j)\\\\)\"\n  }), \" is computed using only the three hidden states from the row above:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\nh_{i,j} = f\\\\bigl(h_{i-1, j-1},\\\\; h_{i-1, j},\\\\; h_{i-1, j+1},\\\\; x_{i,j}\\\\bigr).\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Note that the left neighbor \", React.createElement(Latex, {\n    text: \"(i, j-1)\\\\)\"\n  }), \" of the same row does not directly feed into this recurrence, thereby reducing dependencies and allowing more parallelization. Specifically, for each row \", React.createElement(Latex, {\n    text: \"\\\\(i\\\\)\"\n  }), \", you can compute \", React.createElement(Latex, {\n    text: \"\\\\(h_{i, j}\\\\)\"\n  }), \" in parallel across different \", React.createElement(Latex, {\n    text: \"\\\\(j\\\\)\"\n  }), \" values, because none of them depends on each other. You only need the row \", React.createElement(Latex, {\n    text: \"\\\\(i - 1\\\\)\"\n  }), \". The trade-off is that you lose some immediate horizontal context, which can degrade the final image quality. However, this approach is significantly faster and simpler to implement on modern GPU hardware.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"diagonal-bilstm\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#diagonal-bilstm\",\n    \"aria-label\": \"diagonal bilstm permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Diagonal BiLSTM\"), \"\\n\", React.createElement(_components.p, null, \"Diagonal BiLSTM tries to recover more local context by using a diagonal scanning procedure. Conceptually, each diagonal in the image is processed in parallel, so that the state \", React.createElement(Latex, {\n    text: \"\\\\(h_{i,j}\\\\)\"\n  }), \" depends on \", React.createElement(Latex, {\n    text: \"\\\\(h_{i-1,j}\\\\)\"\n  }), \" and \", React.createElement(Latex, {\n    text: \"\\\\(h_{i,j-1}\\\\)\"\n  }), \". The trick is that, rather than scanning row by row, you shift each row (or equivalently, shift the image) so that the relevant computations line up in columns, enabling parallel calculation across diagonals. This yields better image quality because both the \\\"above\\\" pixel and the \\\"left\\\" pixel are integrated. However, the parallelization strategy is more complex than in RowLSTM, and the computational overhead can be higher.\"), \"\\n\", React.createElement(_components.p, null, \"The LSTM update itself follows the standard formulation:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n[o_i, f_i, i_i, g_i] = \\\\sigma \\\\bigl(K_{ss} \\\\circledast h_{i-1} + K_{is} \\\\circledast x_i \\\\bigr),\\n\\\\]\"\n  }), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\nc_i = f_i \\\\odot c_{i-1} + i_i \\\\odot g_i,\\n\\\\]\"\n  }), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\nh_i = o_i \\\\odot \\\\tanh(c_i),\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\(K_{ss}\\\\)\"\n  }), \" is the state-to-state convolution kernel, \", React.createElement(Latex, {\n    text: \"\\\\(K_{is}\\\\)\"\n  }), \" is the input-to-state kernel, \", React.createElement(Latex, {\n    text: \"\\\\(\\\\circledast\\\\)\"\n  }), \" denotes convolution, \", React.createElement(Latex, {\n    text: \"\\\\(\\\\odot\\\\)\"\n  }), \" denotes elementwise multiplication, and \", React.createElement(Latex, {\n    text: \"\\\\(\\\\sigma\\\\)\"\n  }), \" is typically the sigmoid activation function. The difference between RowLSTM and Diagonal BiLSTM is simply in how \", React.createElement(Latex, {\n    text: \"\\\\(h_{i-1}\\\\)\"\n  }), \" or \", React.createElement(Latex, {\n    text: \"\\\\(h_{i, j}\\\\)\"\n  }), \" is indexed and how parallelization is arranged across the image.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"training-procedure-and-loss-function\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#training-procedure-and-loss-function\",\n    \"aria-label\": \"training procedure and loss function permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Training procedure and loss function\"), \"\\n\", React.createElement(_components.p, null, \"Because these are autoregressive models that predict discrete pixel values (e.g., 0–255 per channel in an 8-bit image), the typical loss is the \", React.createElement(_components.strong, null, \"negative log-likelihood\"), \" (often implemented as a \", React.createElement(_components.strong, null, \"cross-entropy\"), \"). Concretely, for each pixel location \", React.createElement(Latex, {\n    text: \"\\\\(i\\\\)\"\n  }), \", the model outputs a probability distribution over possible values. The training objective is then to minimize:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\mathcal{L} = - \\\\sum_{i=1}^{N^2} \\\\log p_\\\\theta\\\\bigl(x_i \\\\mid x_1, x_2, \\\\dots, x_{i-1}\\\\bigr),\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"averaged over all images in the training dataset. This direct log-likelihood training is stable and does not require an adversary or other specialized optimization method. In practice, large minibatches or specialized GPU parallelization are used to handle the many computations across large image datasets.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"strengths-and-limitations\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#strengths-and-limitations\",\n    \"aria-label\": \"strengths and limitations permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Strengths and limitations\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Strengths:\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Stable training\"), \": Because the model is optimized via a direct log-likelihood objective, there's no need to solve complicated equilibrium conditions (unlike GANs).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Accurate density estimation\"), \": PixelRNN provides an explicit estimate of \", React.createElement(Latex, {\n    text: \"\\\\(p(X)\\\\)\"\n  }), \". You can compute log-likelihoods and interpret them as probabilities.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Good coverage\"), \": Autoregressive models tend not to suffer from mode collapse as severely as some adversarial approaches might.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Limitations:\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Slow sampling\"), \": Generating an image is a sequential process, especially in RNN-based approaches. You must predict each pixel in turn.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Potentially large memory footprint\"), \": Each RNN step processes a hidden state that must be stored and updated, which can be expensive for large images.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Less photorealistic\"), \" than advanced GAN-based or diffusion-based methods for many tasks, although the gap is narrower for some image domains.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Next, let us examine \", React.createElement(_components.strong, null, \"PixelCNN\"), \", an approach that trades some of the recurrent overhead for purely convolutional operations with carefully designed masks.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"pixelcnn\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#pixelcnn\",\n    \"aria-label\": \"pixelcnn permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"PixelCNN\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"network-design\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#network-design\",\n    \"aria-label\": \"network design permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Network design\"), \"\\n\", React.createElement(_components.p, null, \"Where PixelRNN leans on LSTM or recurrent variants to incorporate context from previously generated pixels, PixelCNN uses \", React.createElement(_components.strong, null, \"masked convolutional layers\"), \" to accomplish the same objective. Instead of scanning row by row with RNN steps, PixelCNN processes the entire image in parallel using special convolution masks that \\\"block out\\\" the future pixels.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Masked Convolution\"), \" (MaskA) for the first layer to ensure the model does not peek at the current pixel or future channels.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Additional MaskB\"), \"-type layers in deeper parts of the network, allowing partial context from already processed color channels in the same pixel, but still preventing access to future positions.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Stack of convolutional layers\"), \" that repeatedly expand the receptive field while ensuring no future positions are visible.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Dimension-reduction blocks\"), \" (optional) to handle large images, typically downsampling the spatial resolution partway, then upsampling again, reminiscent of certain U-Net or autoencoder-like structures.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Final \", React.createElement(Latex, {\n    text: \"\\\\(1 \\\\times 1\\\\)\"\n  }), \" convolution\"), \" to map hidden features to pixel-intensity logits, followed by a \", React.createElement(_components.strong, null, \"Softmax\"), \" for discrete distribution output (or a mixture of logistics for real-valued intensities).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Why convolution?\"), \" Convolutions are well-suited to capturing local spatial structure, and they can be executed in parallel across the entire image on modern hardware. By carefully applying masks, you can force the network to respect the autoregressive ordering. This is typically simpler and more parallelizable than an RNN-based approach.\"), \"\\n\", React.createElement(Image, {\n    alt: \"MaskA and MaskB used in PixelCNN\",\n    path: \"\",\n    caption: \"Two types of masks in PixelCNN ensure the network does not peek at future pixel positions.\",\n    zoom: \"false\"\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"masked-convolutions-in-pixelcnn\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#masked-convolutions-in-pixelcnn\",\n    \"aria-label\": \"masked convolutions in pixelcnn permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Masked convolutions in PixelCNN\"), \"\\n\", React.createElement(_components.p, null, \"Recall the difference between \", React.createElement(_components.strong, null, \"MaskA\"), \" and \", React.createElement(_components.strong, null, \"MaskB\"), \":\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"MaskA\"), \": For the very first convolution, we ensure that the current pixel's values (or current channel) is excluded from the receptive field. If you are generating color channels in the order (Red -> Green -> Blue), then for the red channel of pixel \", React.createElement(Latex, {\n    text: \"\\\\(i\\\\)\"\n  }), \", the mask zeros out any weights that would see that same pixel's red channel. For the green channel, the mask must zero out the future position in the green plane but can see the red channel. This ensures no \\\"leaking\\\" of information from the present pixel's green or blue channel into the distribution for the red channel.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"MaskB\"), \": In deeper layers, we slightly relax the restriction so that the network can see what has already been generated in the same channel. In effect, MaskB includes the entire receptive field from previous channels plus the currently processed channel up to the position \", React.createElement(Latex, {\n    text: \"\\\\(i-1\\\\)\"\n  }), \" in the flattened ordering. This enables deeper layers to combine more context and refine predictions.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"conditional-pixelcnn-variants\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#conditional-pixelcnn-variants\",\n    \"aria-label\": \"conditional pixelcnn variants permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Conditional PixelCNN variants\"), \"\\n\", React.createElement(_components.p, null, \"One can easily condition PixelCNN on additional information by injecting some representation (e.g., a class label, a text embedding, or latent features from another network) into each convolutional block. This is typically done through \", React.createElement(_components.strong, null, \"additive or multiplicative gating\"), \" at the hidden layers, or by concatenating the conditioning as extra feature maps. For example, in a \", React.createElement(_components.strong, null, \"class-conditional PixelCNN\"), \", the network can incorporate a one-hot class vector at each layer, effectively learning separate generative pathways for each class.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"receptive-fields-and-pixel-dependencies\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#receptive-fields-and-pixel-dependencies\",\n    \"aria-label\": \"receptive fields and pixel dependencies permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Receptive fields and pixel dependencies\"), \"\\n\", React.createElement(_components.p, null, \"As you stack more masked convolution layers (with standard kernel sizes like \", React.createElement(Latex, {\n    text: \"\\\\(3\\\\times 3\\\\)\"\n  }), \" or \", React.createElement(Latex, {\n    text: \"\\\\(5\\\\times 5\\\\)\"\n  }), \"), the receptive field for each pixel grows, eventually encompassing the entire region of \\\"past\\\" pixels from the top-left corner to the current pixel location. By adding skip connections or residual blocks, the network can preserve features learned at various scales, further enriching the model's capacity.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"training-and-sampling-strategy\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#training-and-sampling-strategy\",\n    \"aria-label\": \"training and sampling strategy permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Training and sampling strategy\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Training\"), \" is analogous to PixelRNN: we minimize the negative log-likelihood. In practice, PixelCNN is typically easier to train on GPUs compared to PixelRNN due to fully convolutional parallelization. The typical training objective remains:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\mathcal{L} = - \\\\sum_{i=1}^{N^2} \\\\log p_\\\\theta\\\\bigl(x_i \\\\mid x_1, x_2, \\\\dots, x_{i-1}\\\\bigr).\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"The difference is that for each forward pass, the entire image is processed in parallel through masked convolutions.\"), \"\\n\", React.createElement(_components.p, null, \"For \", React.createElement(_components.strong, null, \"sampling\"), \", we still have a sequential dependency in concept (we must generate pixels left-to-right, top-to-bottom), but now each new pixel can be updated in a single pass of the CNN. Concretely:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Initialize an empty image (all zeros or random noise).\"), \"\\n\", React.createElement(_components.li, null, \"For each pixel in raster-scan order:\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Feed the partially generated image into the PixelCNN.\"), \"\\n\", React.createElement(_components.li, null, \"Read off the distribution over possible values for the current pixel.\"), \"\\n\", React.createElement(_components.li, null, \"Sample from that distribution (e.g., pick a random value from the predicted categorical distribution).\"), \"\\n\", React.createElement(_components.li, null, \"Place that value in the image and move on to the next pixel.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Although we conceptually proceed in a pixel-by-pixel manner, each pixel's distribution can be computed fairly quickly because the CNN processes all positions in one pass, ignoring only future pixels via the mask. Still, it remains an inherently sequential process: you can't finalize pixel \", React.createElement(Latex, {\n    text: \"\\\\(x_{i}\\\\)\"\n  }), \" without having assigned a value to \", React.createElement(Latex, {\n    text: \"\\\\(x_{i-1}\\\\)\"\n  }), \".\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"key-benefits\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#key-benefits\",\n    \"aria-label\": \"key benefits permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Key benefits\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Parallelizable\"), \": Much better GPU utilization during training compared to PixelRNN.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Stable likelihood training\"), \": As with all autoregressive models, you get a well-defined log-likelihood objective.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Flexible conditioning\"), \": Easy to incorporate side information, such as class labels or partial images.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"However, the speed at inference time is still not as fast as feed-forward generative models (e.g., certain types of VAEs or large diffusion models with specialized sampling strategies). Yet for certain tasks where explicit density estimation is crucial, PixelCNN remains a strong contender.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"comparison-of-pixelrnn-and-pixelcnn\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#comparison-of-pixelrnn-and-pixelcnn\",\n    \"aria-label\": \"comparison of pixelrnn and pixelcnn permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Comparison of PixelRNN and PixelCNN\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"performance-metrics\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#performance-metrics\",\n    \"aria-label\": \"performance metrics permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Performance metrics\"), \"\\n\", React.createElement(_components.p, null, \"PixelRNN and PixelCNN are often evaluated on likelihood-based metrics such as \", React.createElement(_components.strong, null, \"bits per dimension\"), \" (bpd) on standard image datasets like CIFAR-10 or ImageNet. They can also be qualitatively evaluated by the diversity and quality of samples. Typically, PixelRNN shows good performance in capturing complex dependencies, sometimes providing slightly better likelihood scores, but PixelCNN is usually not far behind (and in some cases is even better with advanced variants like Gated PixelCNN or PixelCNN++).\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"computational-complexity\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#computational-complexity\",\n    \"aria-label\": \"computational complexity permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Computational complexity\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"PixelRNN\"), \":\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Potentially slow unrolling across the entire image, especially for large images.\"), \"\\n\", React.createElement(_components.li, null, \"RowLSTM and Diagonal BiLSTM partially mitigate this, but parallelization remains tricky.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"PixelCNN\"), \":\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Very parallelizable on modern GPUs.\"), \"\\n\", React.createElement(_components.li, null, \"Each convolution operation can process all positions in the image simultaneously, subject to the masked constraints.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"In practice, PixelCNN is often favored for large-scale experiments because its parallel convolution architecture is more straightforward to implement efficiently.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"image-quality-and-diversity\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#image-quality-and-diversity\",\n    \"aria-label\": \"image quality and diversity permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Image quality and diversity\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"PixelRNN\"), \" can capture dependencies in both vertical and horizontal directions using recurrent connections, sometimes resulting in slightly sharper or more coherent images for certain domains.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"PixelCNN\"), \" can produce comparable results, and in some improved variants (like \", React.createElement(_components.strong, null, \"Gated PixelCNN\"), \" or \", React.createElement(_components.strong, null, \"PixelCNN++\"), \"), the quality is often on par with or better than PixelRNN.\"), \"\\n\", React.createElement(_components.li, null, \"Both remain outperformed in sheer image realism by certain advanced \", React.createElement(_components.em, null, \"implicit\"), \" generative models (e.g., large-scale diffusion or certain well-tuned GANs). However, they produce explicit likelihood estimates, which is a valuable property for tasks like density estimation, anomaly detection, or image compression research.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"practical-considerations\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#practical-considerations\",\n    \"aria-label\": \"practical considerations permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Practical considerations\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Memory usage\"), \": PixelRNN variants with many LSTM layers can become memory-intensive. PixelCNN is typically more memory-efficient, though large convolutional layers can also be expensive.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Ease of implementation\"), \": Many open-source frameworks provide sample code for PixelCNN-like masked convolutions. Recurrent structures with row or diagonal scanning are slightly more specialized but also well supported.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Interpretability\"), \": Both approaches yield straightforward probabilities for each pixel. This can be used to measure how \\\"surprising\\\" a pixel is under the learned distribution.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"gated-pixelcnn-pixelcnn\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#gated-pixelcnn-pixelcnn\",\n    \"aria-label\": \"gated pixelcnn pixelcnn permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Gated PixelCNN: PixelCNN++\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Gated PixelCNN\"), \" introduced a gating mechanism in the convolutional layers, reminiscent of LSTM gating, to help the model learn more nuanced dependencies. \", React.createElement(_components.strong, null, \"PixelCNN++\"), \" goes further by employing:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Discretized logistic mixture\"), \" output instead of a straightforward softmax for each pixel intensity.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Variable dilation\"), \" in convolutions to expand receptive field more rapidly.\"), \"\\n\", React.createElement(_components.li, null, \"Additional architectural enhancements (skip connections, better residual blocks).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"These refinements often lead to improved likelihood scores and sample quality, making \", React.createElement(_components.strong, null, \"PixelCNN++\"), \" a compelling alternative to PixelRNN.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"parallelization-techniques\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#parallelization-techniques\",\n    \"aria-label\": \"parallelization techniques permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Parallelization techniques\"), \"\\n\", React.createElement(_components.p, null, \"Recent research has looked into ways to \", React.createElement(_components.strong, null, \"parallelize the sampling\"), \" process. For PixelCNN, sampling is inherently sequential in the pixel dimension, but certain \\\"orderless\\\" or \\\"block-wise\\\" approaches partially accelerate sampling by generating multiple pixels at once in a carefully orchestrated manner. Alternatively, one can compromise the strict autoregressive ordering to gain some speed in practice, though this might degrade log-likelihood performance.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"implementation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#implementation\",\n    \"aria-label\": \"implementation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Implementation\"), \"\\n\", React.createElement(_components.p, null, \"Below is a \", React.createElement(_components.strong, null, \"simplified\"), \" example of how one might implement a PixelCNN-like model in PyTorch. This demonstration is purely illustrative and omits advanced features such as gating, skip connections, or color conditioning. It shows how to define a masked convolution layer and stack them into an autoregressive network.\"), \"\\n\", React.createElement(Code, {\n    text: `\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass MaskedConv2d(nn.Conv2d):\n    def __init__(self, in_channels, out_channels, kernel_size, mask_type='A', \n                 color_channels=1, padding=1):\n        super().__init__(in_channels, out_channels, kernel_size, padding=padding, bias=True)\n        \n        # 'mask_type': 'A' or 'B'\n        self.mask_type = mask_type\n        self.register_buffer('mask', torch.ones_like(self.weight.data))\n        \n        # Build the mask\n        # The center pixel of the kernel is at (kernel_size//2, kernel_size//2)\n        # We want to zero out weights that correspond to future pixels.\n        kh, kw = self.kernel_size\n        yc, xc = kh // 2, kw // 2\n        \n        for y in range(kh):\n            for x in range(kw):\n                # If we are beyond the center in the x direction or the same pixel \n                # and mask_type='A' => zero out\n                if (y > yc) or (y == yc and x > xc):\n                    self.mask[:, :, y, x] = 0\n                    \n                # For color images with multiple channels, handle the partial channel ordering:\n                # (In more advanced code, you'd zero out the weights corresponding to future color channels)\n        \n        if self.mask_type == 'A':\n            # For Mask A, zero out the center pixel as well\n            self.mask[:, :, yc, xc] = 0\n\n    def forward(self, x):\n        self.weight.data *= self.mask\n        return super().forward(x)\n\n\nclass SimplePixelCNN(nn.Module):\n    def __init__(self, in_channels=1, hidden_channels=64):\n        super().__init__()\n        # First masked conv (Mask A)\n        self.conv1 = MaskedConv2d(in_channels, hidden_channels, kernel_size=3, mask_type='A')\n        # Subsequent masked convs (Mask B)\n        self.conv2 = MaskedConv2d(hidden_channels, hidden_channels, kernel_size=3, mask_type='B')\n        self.conv3 = MaskedConv2d(hidden_channels, hidden_channels, kernel_size=3, mask_type='B')\n        # Final layer -> produce logits (for each possible pixel intensity or continuous params)\n        self.output = nn.Conv2d(hidden_channels, 256, kernel_size=1)  # For 256 intensities\n\n    def forward(self, x):\n        # x is [batch_size, 1, height, width]\n        x = F.relu(self.conv1(x))\n        x = F.relu(self.conv2(x))\n        x = F.relu(self.conv3(x))\n        x = self.output(x)  \n        return x  # shape: [batch_size, 256, height, width]\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"This snippet showcases:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"MaskedConv2d\"), \": A custom 2D convolution that zeroes out weights corresponding to future pixels based on the mask type.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"SimplePixelCNN\"), \": A straightforward stack of masked convolutions, culminating in a \", React.createElement(Latex, {\n    text: \"\\\\(1 \\\\times 1\\\\)\"\n  }), \" convolution that predicts logits for 256 discrete values per pixel (for a grayscale image).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Forward pass\"), \": Each convolution is activated with ReLU, and the final layer produces the distribution from which we can compute cross-entropy loss with the ground truth pixel intensities.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"A similar approach can be adapted for PixelRNN by combining masked convolutions for input processing with LSTM-based modules in the middle layers. There are open-source reference implementations (e.g., official TensorFlow and PyTorch code for PixelCNN and PixelRNN) that incorporate advanced functionalities like gating, skip connections, and dimension reduction blocks.\"), \"\\n\", React.createElement(_components.p, null, \"When training, one would typically:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Convert an image batch into integer pixel values (0–255).\"), \"\\n\", React.createElement(_components.li, null, \"Forward-pass the images through the network to obtain logits.\"), \"\\n\", React.createElement(_components.li, null, \"Use \", React.createElement(_components.strong, null, \"nn.CrossEntropyLoss\"), \" (in PyTorch) or similar to compute the negative log-likelihood of the correct pixel values.\"), \"\\n\", React.createElement(_components.li, null, \"Backpropagate and update weights.\"), \"\\n\", React.createElement(_components.li, null, \"Evaluate with bits per dimension or negative log-likelihood on a validation set to track progress.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"applications-and-use-cases\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#applications-and-use-cases\",\n    \"aria-label\": \"applications and use cases permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Applications and use cases\"), \"\\n\", React.createElement(_components.p, null, \"PixelRNN and PixelCNN are often overshadowed by newer generative models for purely photorealistic generation. Nonetheless, they offer unique advantages in certain contexts:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Density estimation and anomaly detection\"), React.createElement(_components.br), \"\\n\", \"Because these methods produce an explicit \", React.createElement(Latex, {\n    text: \"\\\\(p(X)\\\\)\"\n  }), \", we can evaluate how \\\"likely\\\" a given image is under the model. This can be leveraged for anomaly detection, outlier detection in images, or novelty detection in medical imaging, where you might want to measure how \\\"unusual\\\" a new scan is relative to known healthy ones.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Conditional image generation (inpainting, colorization, super-resolution)\"), React.createElement(_components.br), \"\\n\", \"If we partially observe an image (e.g., a rectangular region is missing), PixelRNN/PixelCNN can sample from the conditional distribution of missing pixels. The masked convolution approach translates readily to tasks like inpainting or colorization, where a portion of the image (or color channel) is known and the rest must be predicted.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Image completion and extension (outpainting)\"), React.createElement(_components.br), \"\\n\", \"Autoregressive models can be used to extend the borders of an image in a natural-looking way. This is sometimes referred to as \\\"outpainting,\\\" and the model's knowledge of local context can yield interesting expansions of the original scene.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Artistic or stylized generation\"), React.createElement(_components.br), \"\\n\", \"While PixelRNN/PixelCNN might not surpass more advanced generative models in photorealism, they can still produce interesting creative or stylized samples. They can also be combined with other approaches or used to generate texture-like images with strong local dependencies.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Research in probability modeling\"), React.createElement(_components.br), \"\\n\", \"PixelRNN/CNN remain strong baselines for log-likelihood-based generative modeling research. They're widely used to compare new ideas in architecture or training objective against a known, well-understood approach.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(Image, {\n    alt: \"Faces generated via PixelCNN\",\n    path: \"\",\n    caption: \"Faces generated using a PixelCNN-like architecture (courtesy of published research on Natural Image Modeling).\",\n    zoom: \"false\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Beyond these direct applications, PixelRNN and PixelCNN have inspired a number of subsequent breakthroughs. For instance, \", React.createElement(_components.strong, null, \"WaveNet\"), \" (van den Oord and gang, 2016) for audio generation was directly influenced by the success of PixelCNN, adapting masked convolutions for one-dimensional waveforms. Similarly, the concept of masked convolution is key in modern Transformer-based architectures for language modeling (where they use \\\"causal\\\" attention masks).\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"extra-remarks-no-formal-conclusion\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#extra-remarks-no-formal-conclusion\",\n    \"aria-label\": \"extra remarks no formal conclusion permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Extra remarks (no formal conclusion)\"), \"\\n\", React.createElement(_components.p, null, \"PixelRNN and PixelCNN exemplify the power of \", React.createElement(_components.strong, null, \"autoregressive\"), \" modeling for images. While they no longer represent the cutting edge of generative image quality, their conceptual clarity, explicit likelihood training, and widespread reference implementations have made them enduringly relevant in deep learning curricula and research. Moreover, advanced improvements such as \", React.createElement(_components.strong, null, \"Gated PixelCNN\"), \", \", React.createElement(_components.strong, null, \"PixelCNN++\"), \", or hybrid approaches that combine recurrent and convolutional blocks continue to push the boundaries of purely autoregressive image synthesis.\"), \"\\n\", React.createElement(_components.p, null, \"You can find open-source implementations to study further:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/singh-hrituraj/PixelCNN-Pytorch\"\n  }, \"PixelCNN on PyTorch\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/ardapekis/pixel-rnn\"\n  }, \"PixelRNN on PyTorch\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/shirgur/PixelRNN\"\n  }, \"PixelRNN on Keras\")), \"\\n\"), \"\\n\", React.createElement(Image, {\n    alt: \"GAN vs. PixelCNN sample comparison\",\n    path: \"\",\n    caption: \"GAN-synthesized faces often appear more photorealistic than typical PixelCNN outputs, but PixelCNN provides stable training and explicit density.\",\n    zoom: \"false\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Ultimately, these approaches highlight the broader principle that \", React.createElement(_components.strong, null, \"local dependencies\"), \" and \", React.createElement(_components.strong, null, \"proper factorization\"), \" are crucial to generative modeling of high-dimensional data like images. Whether you reach for an RNN or a CNN, the idea of carefully restricting the model's receptive field so it only sees \\\"past\\\" pixels is essential to ensure correct autoregressive training.\"), \"\\n\", React.createElement(_components.p, null, \"In practice, if you desire maximum photorealism, you might opt for a powerful diffusion model or a well-tuned GAN. If, however, you need stable log-likelihood estimation, the ability to do outlier detection, or an interpretable measure of how well a model \\\"understands\\\" each pixel, PixelRNN and PixelCNN remain superb educational and practical tools.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/avrtt/Repos/avrtt.github.io/src/pages/posts/research/pixelrnn_and_pixelcnn.mdx\";\nimport React, {useState, useEffect} from 'react';\nimport {useSiteMetadata} from \"../hooks/useSiteMetadata\";\nimport RemoveMarkdown from 'remove-markdown';\nimport {ImageContext} from '../context/ImageContext';\nimport {MDXProvider} from '@mdx-js/react';\nimport Image from '../components/PostImage';\nimport {motion} from 'framer-motion';\nimport SEO from \"../components/seo\";\nimport PostBanner from '../components/PostBanner';\nimport PostBottom from '../components/PostBottom';\nimport {wordsPerMinuteAdventures, wordsPerMinuteResearch, wordsPerMinuteThoughts} from '../data/commonVariables';\nimport {graphql} from 'gatsby';\nimport PartOfCourseNotice from \"../components/PartOfCourseNotice\";\nimport * as stylesButtonsCommon from \"../styles/buttons_common.module.scss\";\nimport * as stylesCustomPostLayouts from \"../styles/custom_post_layouts.module.scss\";\nimport * as stylesTableOfContents from \"../styles/table_of_contents.module.scss\";\nimport * as stylesTagBadges from \"../styles/tag_badges.module.scss\";\nfunction formatReadTime(minutes) {\n  if (minutes <= 10) return '~10 min';\n  if (minutes <= 20) return '~20 min';\n  if (minutes <= 30) return '~30 min';\n  if (minutes <= 40) return '~40 min';\n  if (minutes <= 50) return '~50 min';\n  if (minutes <= 60) return '~1 h';\n  const hours = Math.floor(minutes / 60);\n  const remainder = minutes % 60;\n  if (remainder <= 30) {\n    return `~${hours}${remainder > 0 ? '.5' : ''} h`;\n  }\n  return `~${hours + 1} h`;\n}\nconst TableOfContents = ({toc}) => {\n  if (!toc || !toc.items) return null;\n  const handleClick = (e, url) => {\n    e.preventDefault();\n    const targetId = url.replace('#', '');\n    const targetElement = document.getElementById(targetId);\n    if (targetElement) {\n      targetElement.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }\n  };\n  return React.createElement(\"nav\", {\n    className: stylesTableOfContents.toc\n  }, React.createElement(\"ul\", null, toc.items.map((item, index) => React.createElement(\"li\", {\n    key: index\n  }, React.createElement(\"a\", {\n    href: item.url,\n    onClick: e => handleClick(e, item.url)\n  }, item.title), item.items && React.createElement(TableOfContents, {\n    toc: {\n      items: item.items\n    }\n  })))));\n};\nexport function PostTemplate({data: {mdx, allMdx, allPostImages}, children}) {\n  const {frontmatter, body, tableOfContents} = mdx;\n  const index = frontmatter.index;\n  const slug = frontmatter.slug;\n  const section = slug.split('/')[1];\n  const posts = allMdx.nodes.filter(post => post.frontmatter.slug.includes(`/${section}/`));\n  const sortedPosts = posts.sort((a, b) => a.frontmatter.index - b.frontmatter.index);\n  const currentIndex = sortedPosts.findIndex(post => post.frontmatter.index === index);\n  const nextPost = sortedPosts[currentIndex + 1];\n  const lastPost = sortedPosts[currentIndex - 1];\n  const trimmedSlug = frontmatter.slug.replace(/\\/$/, '');\n  const keyCurrent = (/[^/]*$/).exec(trimmedSlug)[0];\n  const basePath = `posts/${section}/content/${keyCurrent}/`;\n  const [isWideLayout, setIsWideLayout] = useState(frontmatter.flagWideLayoutByDefault);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const toggleLayout = () => {\n    setIsWideLayout(!isWideLayout);\n  };\n  useEffect(() => {\n    setIsAnimating(true);\n    const timer = setTimeout(() => setIsAnimating(false), 340);\n    return () => clearTimeout(timer);\n  }, [isWideLayout]);\n  var wordsPerMinute;\n  if (section === \"adventures\") {\n    wordsPerMinute = wordsPerMinuteAdventures;\n  } else if (section === \"research\") {\n    wordsPerMinute = wordsPerMinuteResearch;\n  } else if (section === \"thoughts\") {\n    wordsPerMinute = wordsPerMinuteThoughts;\n  }\n  const plainTextBody = RemoveMarkdown(body).replace(/import .*? from .*?;/g, '').replace(/<.*?>/g, '').replace(/\\{\\/\\*[\\s\\S]*?\\*\\/\\}/g, '').trim();\n  const wordCount = plainTextBody.split(/\\s+/).length;\n  const baseReadTimeMinutes = Math.ceil(wordCount / wordsPerMinute);\n  const extraTime = frontmatter.extraReadTimeMin || 0;\n  const totalReadTime = baseReadTimeMinutes + extraTime;\n  const readTime = formatReadTime(totalReadTime);\n  const notices = [{\n    flag: frontmatter.flagDraft,\n    component: () => import(\"../components/NotFinishedNotice\")\n  }, {\n    flag: frontmatter.flagMindfuckery,\n    component: () => import(\"../components/MindfuckeryNotice\")\n  }, {\n    flag: frontmatter.flagRewrite,\n    component: () => import(\"../components/RewriteNotice\")\n  }, {\n    flag: frontmatter.flagOffensive,\n    component: () => import(\"../components/OffensiveNotice\")\n  }, {\n    flag: frontmatter.flagProfane,\n    component: () => import(\"../components/ProfanityNotice\")\n  }, {\n    flag: frontmatter.flagMultilingual,\n    component: () => import(\"../components/MultilingualNotice\")\n  }, {\n    flag: frontmatter.flagUnreliably,\n    component: () => import(\"../components/UnreliablyNotice\")\n  }, {\n    flag: frontmatter.flagPolitical,\n    component: () => import(\"../components/PoliticsNotice\")\n  }, {\n    flag: frontmatter.flagCognitohazard,\n    component: () => import(\"../components/CognitohazardNotice\")\n  }, {\n    flag: frontmatter.flagHidden,\n    component: () => import(\"../components/HiddenNotice\")\n  }];\n  const [loadedNotices, setLoadedNotices] = useState([]);\n  useEffect(() => {\n    notices.forEach(({flag, component}) => {\n      if (flag) {\n        component().then(module => {\n          setLoadedNotices(prev => [...prev, module.default]);\n        });\n      }\n    });\n  }, []);\n  return React.createElement(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.15\n    }\n  }, React.createElement(PostBanner, {\n    postNumber: frontmatter.index,\n    date: frontmatter.date,\n    updated: frontmatter.updated,\n    readTime: readTime,\n    difficulty: frontmatter.difficultyLevel,\n    title: frontmatter.title,\n    desc: frontmatter.desc,\n    banner: frontmatter.banner,\n    section: section,\n    postKey: keyCurrent,\n    isMindfuckery: frontmatter.flagMindfuckery,\n    mainTag: frontmatter.mainTag\n  }), React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      flexWrap: \"wrap\",\n      maxWidth: \"75%\",\n      marginLeft: \"auto\",\n      paddingRight: \"1vw\",\n      marginTop: \"-6vh\",\n      marginBottom: \"4vh\"\n    }\n  }, frontmatter.otherTags.map((tag, index) => React.createElement(\"span\", {\n    key: index,\n    className: `noselect ${stylesTagBadges.tagPosts}`,\n    style: {\n      margin: \"0 5px 5px 0\"\n    }\n  }, tag))), React.createElement(\"div\", {\n    class: \"postBody\"\n  }, React.createElement(TableOfContents, {\n    toc: tableOfContents\n  })), React.createElement(\"br\"), React.createElement(\"div\", {\n    style: {\n      margin: \"0 10% -2vh 30%\",\n      textAlign: \"right\"\n    }\n  }, React.createElement(motion.button, {\n    class: \"noselect\",\n    className: stylesCustomPostLayouts.postButton,\n    id: stylesCustomPostLayouts.postLayoutSwitchButton,\n    onClick: toggleLayout,\n    whileTap: {\n      scale: 0.93\n    }\n  }, React.createElement(motion.div, {\n    className: stylesButtonsCommon.buttonTextWrapper,\n    key: isWideLayout,\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.3,\n      ease: \"easeInOut\"\n    }\n  }, isWideLayout ? \"Switch to default layout\" : \"Switch to wide layout\"))), React.createElement(\"br\"), React.createElement(\"div\", {\n    class: \"postBody\",\n    style: {\n      margin: isWideLayout ? \"0 -14%\" : \"\",\n      maxWidth: isWideLayout ? \"200%\" : \"\",\n      transition: \"margin 1s ease, max-width 1s ease, padding 1s ease\"\n    }\n  }, React.createElement(\"div\", {\n    className: `${stylesCustomPostLayouts.textContent} ${isAnimating ? stylesCustomPostLayouts.fadeOut : stylesCustomPostLayouts.fadeIn}`\n  }, loadedNotices.map((NoticeComponent, index) => React.createElement(NoticeComponent, {\n    key: index\n  })), frontmatter.indexCourse ? React.createElement(PartOfCourseNotice, {\n    index: frontmatter.indexCourse,\n    category: frontmatter.courseCategoryName\n  }) : \"\", React.createElement(ImageContext.Provider, {\n    value: {\n      images: allPostImages.nodes,\n      basePath: basePath.replace(/\\/$/, '') + '/'\n    }\n  }, React.createElement(MDXProvider, {\n    components: {\n      Image\n    }\n  }, children)))), React.createElement(PostBottom, {\n    nextPost: nextPost,\n    lastPost: lastPost,\n    keyCurrent: keyCurrent,\n    section: section\n  }));\n}\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport function Head({data}) {\n  const {frontmatter} = data.mdx;\n  const title = frontmatter.titleSEO || frontmatter.title;\n  const titleOG = frontmatter.titleOG || title;\n  const titleTwitter = frontmatter.titleTwitter || title;\n  const description = frontmatter.descSEO || frontmatter.desc;\n  const descriptionOG = frontmatter.descOG || description;\n  const descriptionTwitter = frontmatter.descTwitter || description;\n  const schemaType = frontmatter.schemaType || \"BlogPosting\";\n  const keywords = frontmatter.keywordsSEO;\n  const datePublished = frontmatter.date;\n  const dateModified = frontmatter.updated || datePublished;\n  const imageOG = frontmatter.imageOG || frontmatter.banner?.childImageSharp?.gatsbyImageData?.images?.fallback?.src;\n  const imageAltOG = frontmatter.imageAltOG || descriptionOG;\n  const imageTwitter = frontmatter.imageTwitter || imageOG;\n  const imageAltTwitter = frontmatter.imageAltTwitter || descriptionTwitter;\n  const canonicalUrl = frontmatter.canonicalURL;\n  const flagHidden = frontmatter.flagHidden || false;\n  const mainTag = frontmatter.mainTag || \"Posts\";\n  const section = frontmatter.slug.split('/')[1] || \"posts\";\n  const type = \"article\";\n  const {siteUrl} = useSiteMetadata();\n  const breadcrumbJSON = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    \"itemListElement\": [{\n      \"@type\": \"ListItem\",\n      \"position\": 1,\n      \"name\": \"Home\",\n      \"item\": siteUrl\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 2,\n      \"name\": mainTag,\n      \"item\": `${siteUrl}/${frontmatter.slug.split('/')[1]}`\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 3,\n      \"name\": title,\n      \"item\": `${siteUrl}${frontmatter.slug}`\n    }]\n  };\n  return React.createElement(SEO, {\n    title: title + \" - avrtt.blog\",\n    titleOG: titleOG,\n    titleTwitter: titleTwitter,\n    description: description,\n    descriptionOG: descriptionOG,\n    descriptionTwitter: descriptionTwitter,\n    schemaType: schemaType,\n    keywords: keywords,\n    datePublished: datePublished,\n    dateModified: dateModified,\n    imageOG: imageOG,\n    imageAltOG: imageAltOG,\n    imageTwitter: imageTwitter,\n    imageAltTwitter: imageAltTwitter,\n    canonicalUrl: canonicalUrl,\n    flagHidden: flagHidden,\n    mainTag: mainTag,\n    section: section,\n    type: type\n  }, React.createElement(\"script\", {\n    type: \"application/ld+json\"\n  }, JSON.stringify(breadcrumbJSON)));\n}\nexport const query = graphql`\n  query($id: String!, $postsFilterRegex: String!, $imagePathRegex: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        index\n        indexCourse\n        title\n        titleSEO\n        titleOG\n        titleTwitter\n        courseCategoryName\n        desc\n        descSEO\n        descOG\n        descTwitter\n        date\n        updated\n        extraReadTimeMin\n        difficultyLevel\n        flagDraft\n        flagMindfuckery\n        flagRewrite\n        flagOffensive\n        flagProfane\n        flagMultilingual\n        flagUnreliably\n        flagPolitical\n        flagCognitohazard\n        flagHidden\n        flagWideLayoutByDefault\n        schemaType\n        mainTag\n        otherTags\n        keywordsSEO\n        banner {\n          childImageSharp {\n            gatsbyImageData(\n\t\t\t\t\t\t\tformats: [JPG, WEBP], \n\t\t\t\t\t\t\tplaceholder: BLURRED, \n\t\t\t\t\t\t\tquality: 100\n\t\t\t\t\t\t)\n          }\n        }\n        imageOG\n        imageAltOG\n        imageTwitter\n        imageAltTwitter\n        canonicalURL\n        slug\n      }\n      body\n      tableOfContents(maxDepth: 3)\n    }\n    allMdx(filter: {frontmatter: {slug: {regex: $postsFilterRegex}}}) {\n      nodes {\n        frontmatter {\n          index\n          slug\n          banner {\n            childImageSharp {\n              gatsbyImageData(\n                formats: [JPG, WEBP],\n                placeholder: BLURRED,\n                quality: 100\n              )\n            }\n          }\n        }\n      }\n    }\n    allPostImages: allFile(\n      filter: { \n        sourceInstanceName: { eq: \"images\" },\n        relativePath: { regex: $imagePathRegex }\n      }\n    ) {\n      nodes {\n        relativePath\n        childImageSharp {\n          gatsbyImageData(\n            layout: CONSTRAINED\n            placeholder: DOMINANT_COLOR\n            quality: 100\n          )\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport Latex from 'react-latex-next';\nimport 'katex/dist/katex.min.css'; \n  \nconst L = ({ text }) => {\n  return (\n    <Latex>{text}</Latex>\n  );\n};\nexport default L;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","h2","a","span","h3","ul","li","ol","h4","em","br","_provideComponents","components","Image","id","component","Error","_missingMdxReference","React","Latex","text","alt","path","caption","zoom","style","position","href","className","dangerouslySetInnerHTML","__html","Code","wrapper","MDXLayout","TableOfContents","_ref","toc","items","stylesTableOfContents","map","item","index","key","url","onClick","e","handleClick","preventDefault","targetId","replace","targetElement","document","getElementById","scrollIntoView","behavior","block","title","PostTemplate","_ref2","data","mdx","allMdx","allPostImages","children","frontmatter","body","tableOfContents","section","slug","split","sortedPosts","nodes","filter","post","includes","sort","b","currentIndex","findIndex","nextPost","lastPost","trimmedSlug","keyCurrent","exec","basePath","isWideLayout","setIsWideLayout","useState","flagWideLayoutByDefault","isAnimating","setIsAnimating","wordsPerMinute","useEffect","timer","setTimeout","clearTimeout","wordsPerMinuteAdventures","wordsPerMinuteResearch","wordsPerMinuteThoughts","wordCount","RemoveMarkdown","trim","length","readTime","minutes","hours","Math","floor","remainder","formatReadTime","ceil","extraReadTimeMin","notices","flag","flagDraft","flagMindfuckery","flagRewrite","flagOffensive","flagProfane","flagMultilingual","flagUnreliably","flagPolitical","flagCognitohazard","flagHidden","loadedNotices","setLoadedNotices","forEach","_ref3","then","module","prev","concat","_toConsumableArray","default","motion","div","initial","opacity","animate","exit","transition","duration","PostBanner","postNumber","date","updated","difficulty","difficultyLevel","desc","banner","postKey","isMindfuckery","mainTag","display","justifyContent","flexWrap","maxWidth","marginLeft","paddingRight","marginTop","marginBottom","otherTags","tag","stylesTagBadges","margin","class","textAlign","button","stylesCustomPostLayouts","toggleLayout","whileTap","scale","stylesButtonsCommon","ease","NoticeComponent","indexCourse","PartOfCourseNotice","category","courseCategoryName","ImageContext","Provider","value","images","MDXProvider","PostBottom","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref4","_frontmatter$banner","_frontmatter$banner$c","_frontmatter$banner$c2","_frontmatter$banner$c3","_frontmatter$banner$c4","titleSEO","titleOG","titleTwitter","description","descSEO","descriptionOG","descOG","descriptionTwitter","descTwitter","schemaType","keywords","keywordsSEO","datePublished","dateModified","imageOG","childImageSharp","gatsbyImageData","fallback","src","imageAltOG","imageTwitter","imageAltTwitter","canonicalUrl","canonicalURL","siteUrl","useSiteMetadata","breadcrumbJSON","SEO","type","JSON","stringify"],"sourceRoot":""}