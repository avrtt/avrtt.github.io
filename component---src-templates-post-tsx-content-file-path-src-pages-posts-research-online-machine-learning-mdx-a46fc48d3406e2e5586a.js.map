{"version":3,"file":"component---src-templates-post-tsx-content-file-path-src-pages-posts-research-online-machine-learning-mdx-a46fc48d3406e2e5586a.js","mappings":"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","sources":["webpack://avrtt.blog/./src/pages/posts/research/online_machine_learning.mdx","webpack://avrtt.blog/./src/templates/post.tsx","webpack://avrtt.blog/./src/components/Latex/index.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\n/**(intro: a quote, catchphrase, joke, etc.)**/\n/*\n\nОбучение в реальном времени\nhttps://neerc.ifmo.ru/wiki/index.php?title=%D0%9E%D0%B1%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2_%D1%80%D0%B5%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%BC_%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%B8\n\n*/\n/*\n\n1. Introduction\nDefinition\nKey differences from batch (offline) learning\n2. Core concepts and principles\n2.1 Continuous model updating\n2.2 Streaming data frameworks\n2.3 Latency and throughput considerations\n2.4 Memory constraints and incremental updates\netc.\n3. Algorithms for online learning\n3.1 Stochastic gradient descent (brief reminder)\n3.2 Online perceptron algorithm\n3.3 Online support vector machines (SVMs)\n3.4 Bandit algorithms\n3.5 Online boosting techniques\netc.\n4. Advantages and challenges\nLower computational cost over time\nReal-time adaptability\nHandling large-scale data\nConcept drift and non-stationary data\nBalancing model accuracy and speed\nManaging noisy and incomplete data\n5. Real-world applications\n5.1 Recommendation systems\n5.2 Online fraud detection\n5.3 Dynamic resource allocation\n5.4 Adaptive control systems\n5.5 Streaming analytics\netc.\n6. Evaluation metrics\n6.1 Online accuracy and loss functions\n6.2 Time-based metrics and latency\n6.3 Memory-based performance measurements\n6.4 Rolling or incremental validation strategies\n7. In practice\nModel deployment and maintenance\nMonitoring and alert systems\nHandling concept drift in production\nTools and frameworks for online learning\nImplementation: code snippets step-by-step\n\n*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Highlight from \"../../../components/Highlight\";\nimport Code from \"../../../components/Code\";\nimport Latex from \"../../../components/Latex\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    a: \"a\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    ol: \"ol\",\n    strong: \"strong\",\n    em: \"em\"\n  }, _provideComponents(), props.components), {Image} = _components;\n  if (!Image) _missingMdxReference(\"Image\", true);\n  return React.createElement(React.Fragment, null, \"\\n\", React.createElement(\"br\"), \"\\n\", \"\\n\", \"\\n\", React.createElement(_components.p, null, \"Online machine learning — sometimes referred to as real-time learning or incremental learning — is a family of machine learning methods designed for scenarios in which data arrives sequentially and continuously over time. Rather than collecting a large static dataset, training a model all at once, and then using it for prediction (the batch or offline approach), online learning algorithms continually update model parameters as new data points come in. This type of learning is ideal for applications where the data stream is potentially unbounded, fast-changing, or simply too large to fit in memory at once.\"), \"\\n\", React.createElement(_components.p, null, \"To illustrate, suppose I want to maintain a classifier that detects fraudulent credit card transactions. Transactions stream in continuously around the clock. In a batch learning setting, I might train a model on historical data each night, for example, and only update it once per day. By contrast, in an online learning setup, I would incorporate new data points — labeled or partially labeled transactions — into the model's parameters immediately or in rapid mini-batches. That way, the model remains up-to-date with the latest behavior in the data, potentially adapting to new fraud patterns in near real time.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"key-differences-from-batch-offline-learning\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#key-differences-from-batch-offline-learning\",\n    \"aria-label\": \"key differences from batch offline learning permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Key differences from batch (offline) learning\"), \"\\n\", React.createElement(_components.p, null, \"Batch learning (offline learning) operates under the assumption that you have access to a large, curated dataset in its entirety before training begins. You typically load all of this data into memory (or mini-batches, if the dataset is too large), compute some aggregate statistic (like a gradient), adjust your model, and iterate until the model converges or runs out of time.\"), \"\\n\", React.createElement(_components.p, null, \"In contrast, online learning algorithms receive data points one by one (or in small bursts, referred to as streaming data) and update model parameters with each new example (or each small subset). This single pass or limited multi-pass nature offers some distinct advantages, such as reduced memory usage, the ability to adapt to changing data distributions (concept drift), and immediate updates that allow real-time or near-real-time predictions. However, it also introduces unique complexities in algorithm design, model stability, and evaluation strategies.\"), \"\\n\", React.createElement(_components.p, null, \"Online learning is often subdivided into:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(Highlight, null, \"Supervised online learning\"), \", in which labeled data becomes available in a streaming fashion, and you update the model accordingly.\"), \"\\n\", React.createElement(_components.li, null, \"Online learning with limited feedback, in which you only observe partial feedback or rewards (bandit scenarios).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(Highlight, null, \"Unsupervised online learning\"), \", in which the data doesn't come with labels or ground-truth, and the model updates incrementally based on clustering or density-based criteria.\"), \"\\n\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{In many cases, these categories overlap, especially in real-world applications.} \\\\)\"\n  }), \"\\n\", React.createElement(_components.p, null, \"I'll dive deeper into how online learning differs from batch learning with respect to computational costs, memory constraints, and the speed at which models must make predictions, while also discussing the flexibility they provide in adaptive, high-velocity environments.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"core-concepts-and-principles\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#core-concepts-and-principles\",\n    \"aria-label\": \"core concepts and principles permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Core concepts and principles\"), \"\\n\", React.createElement(_components.p, null, \"Online learning is guided by a set of foundational concepts that define how data is ingested, how the model parameters are updated, and how the entire workflow is orchestrated in real or near-real time. These concepts concern both the theoretical principles of incremental updates and the practical aspects of handling streaming data at scale.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"21-continuous-model-updating\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#21-continuous-model-updating\",\n    \"aria-label\": \"21 continuous model updating permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"2.1 Continuous model updating\"), \"\\n\", React.createElement(_components.p, null, \"Unlike the \\\"train once and deploy\\\" mindset of classic batch learning, online learning revolves around continuous model updating. Formally, suppose we have a model parameter vector \", React.createElement(Latex, {\n    text: \"\\\\( w_t \\\\)\"\n  }), \" at time step \", React.createElement(Latex, {\n    text: \"\\\\( t \\\\)\"\n  }), \". When a new data point \", React.createElement(Latex, {\n    text: \"\\\\( z_t \\\\)\"\n  }), \" arrives (which could be a single example \", React.createElement(Latex, {\n    text: \"\\\\( x_t \\\\)\"\n  }), \" and its label \", React.createElement(Latex, {\n    text: \"\\\\( y_t \\\\)\"\n  }), \", or some unlabeled observation in an unsupervised setting), an online algorithm updates \", React.createElement(Latex, {\n    text: \"\\\\( w_t \\\\)\"\n  }), \" to \", React.createElement(Latex, {\n    text: \"\\\\( w_{t+1} \\\\)\"\n  }), \" according to:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\nw_{t+1} = w_t - \\\\gamma_t \\\\nabla_w Q(z_t, w_t)\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\( Q(z_t, w_t) \\\\)\"\n  }), \" is a loss function measuring the discrepancy between the model's prediction and the actual label (or a reconstruction error in unsupervised learning), and \", React.createElement(Latex, {\n    text: \"\\\\( \\\\gamma_t \\\\)\"\n  }), \" is a learning rate. This incremental update means we do not need to revisit old data. The model \\\"learns as it goes,\\\" one sample at a time.\"), \"\\n\", React.createElement(_components.p, null, \"This principle can be generalized: in advanced algorithms, we might not rely solely on a simple gradient but could incorporate second-order information, or use more complex updates that combine ensemble strategies or partial feedback. In each case, the overarching idea is to incorporate new information as soon as it arrives, thereby maintaining an updated model that is presumed more relevant to current conditions.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"22-streaming-data-frameworks\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#22-streaming-data-frameworks\",\n    \"aria-label\": \"22 streaming data frameworks permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"2.2 Streaming data frameworks\"), \"\\n\", React.createElement(_components.p, null, \"To implement online learning in production, I need systems that can ingest data in real time and feed it into the learning algorithm. Popular streaming frameworks like Apache Kafka, Apache Flink, Apache Storm, and Apache Samza are frequently used in big data pipelines to handle high-velocity data sources. They orchestrate data ingestion, buffering, and distribution to downstream consumers. In an online learning pipeline, the machine learning model acts as a consumer that processes events (i.e., data points) as soon as they arrive.\"), \"\\n\", React.createElement(_components.p, null, \"A typical workflow might look like:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Data ingestion\"), \": Data is produced by sensors, user interactions, or system logs, and is pushed to a message broker (like Kafka).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Stream processing\"), \": A processing framework (e.g. Flink) consumes these events in micro-batches or as a continuous stream.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Model update\"), \": The event (or batch of events) is sent to a module that adjusts the model parameters using an online learning algorithm.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Prediction service\"), \": The updated model can then be used immediately for predictions or scoring.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"These frameworks also handle fault tolerance (by checkpointing the state of streams and computations) and enable horizontal scalability, so the online learning system can handle large or fluctuating data throughput without losing performance.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"23-latency-and-throughput-considerations\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#23-latency-and-throughput-considerations\",\n    \"aria-label\": \"23 latency and throughput considerations permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"2.3 Latency and throughput considerations\"), \"\\n\", React.createElement(_components.p, null, \"Latency — the time it takes from receiving a new data point to updating the model and producing a prediction — is critical in many real-time applications. For instance, in an online fraud detection system, you can't wait for hours to confirm whether a transaction is fraudulent. Instead, you need a near-instantaneous decision. Similarly, in recommendation systems for large e-commerce websites, updated user interactions (clicks, purchases) feed back into the recommendation model in seconds or minutes to show users the most relevant items.\"), \"\\n\", React.createElement(_components.p, null, \"Throughput — how many data points the system can handle per unit time — also matters. High-velocity streams may reach hundreds of thousands or even millions of events per second. Online learning algorithms thus must be efficient enough (in CPU and memory) to operate at these speeds.\"), \"\\n\", React.createElement(_components.p, null, \"Balancing low latency and high throughput often requires specialized data structures, distributed computing setups, and algorithmic optimizations like mini-batch processing, asynchronous updates, or specialized approximate gradient computations.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"24-memory-constraints-and-incremental-updates\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#24-memory-constraints-and-incremental-updates\",\n    \"aria-label\": \"24 memory constraints and incremental updates permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"2.4 Memory constraints and incremental updates\"), \"\\n\", React.createElement(_components.p, null, \"One of the main motivations for online learning is that storing the entire dataset in memory (as in batch learning) is impossible or cost-prohibitive in many modern applications. As new data arrives, older data might be discarded or summarized, rather than stored in full. Hence, the model must update parameters incrementally with minimal overhead.\"), \"\\n\", React.createElement(_components.p, null, \"If the model tries to keep track of all historical data, we defeat the purpose of online learning and revert to a partial-batch approach. Instead, truly online algorithms are designed to only require the most recent model parameters (plus minimal auxiliary statistics) to incorporate new information. This incremental update approach is sometimes described mathematically as a stochastic approximation, because each step is effectively a gradient descent (or other optimization) step on a single sample or mini-batch from a large (often infinite) data stream.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"25-concept-drift-and-non-stationary-distributions\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#25-concept-drift-and-non-stationary-distributions\",\n    \"aria-label\": \"25 concept drift and non stationary distributions permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"2.5 Concept drift and non-stationary distributions\"), \"\\n\", React.createElement(_components.p, null, \"Online learning is especially relevant when the data distribution changes over time, often called concept drift. For example, the types of credit card fraud might change as fraudsters develop new schemes. A model trained on data from last year or even last month could become stale. Online models can track these distribution shifts more closely because they are always updating based on the latest examples. However, concept drift introduces extra complexity: older data might become less relevant or even misleading. Algorithms thus employ mechanisms to detect and adapt to drift, sometimes by putting more weight on recent data or by resetting or re-initializing parameters when a dramatic shift is detected.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"26-partial-feedback-scenarios\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#26-partial-feedback-scenarios\",\n    \"aria-label\": \"26 partial feedback scenarios permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"2.6 Partial feedback scenarios\"), \"\\n\", React.createElement(_components.p, null, \"Traditional supervised online learning requires a labeled data stream to update the model. But in many real applications, I might only observe partial feedback. A prime example is the multi-armed bandit setting, where at each time step I must choose one of multiple actions (e.g., recommending one of several products), and I only observe the reward of that chosen action (e.g., whether the user clicked or purchased), not the reward I would have gotten from the other actions. Online learning in such partial feedback (or bandit) scenarios is an active area of research, driving new algorithmic developments for fast, adaptive decision-making under limited information.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"algorithms-for-online-learning\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#algorithms-for-online-learning\",\n    \"aria-label\": \"algorithms for online learning permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Algorithms for online learning\"), \"\\n\", React.createElement(_components.p, null, \"Below are some widely known algorithms and algorithm families designed explicitly (or easily adaptable) for online learning. These techniques vary in complexity and assumptions, but all are grounded in the principle of updating with minimal overhead per incoming observation or small micro-batch.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"31-stochastic-gradient-descent-brief-reminder\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#31-stochastic-gradient-descent-brief-reminder\",\n    \"aria-label\": \"31 stochastic gradient descent brief reminder permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.1 Stochastic gradient descent (brief reminder)\"), \"\\n\", React.createElement(_components.p, null, React.createElement(Latex, {\n    text: \"\\\\( \\\\text{Stochastic Gradient Descent (SGD)} \\\\)\"\n  }), \" is the backbone of many online learning methods. In batch gradient descent, we compute the gradient of the loss function by summing over the entire dataset, then we update parameters. In contrast, \", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{SGD} \\\\)\"\n  }), \" updates model parameters using the gradient from just one (or a small batch of) sample(s):\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\nw_{t+1} = w_t - \\\\gamma_t \\\\nabla_w Q(z_t, w_t)\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Here \", React.createElement(Latex, {\n    text: \"\\\\( z_t \\\\)\"\n  }), \" is the data point drawn at time step \", React.createElement(Latex, {\n    text: \"\\\\( t \\\\)\"\n  }), \" (or a small batch if using mini-batch SGD), \", React.createElement(Latex, {\n    text: \"\\\\( \\\\gamma_t \\\\)\"\n  }), \" is the learning rate, and \", React.createElement(Latex, {\n    text: \"\\\\( w_t \\\\)\"\n  }), \" are the parameters at time \", React.createElement(Latex, {\n    text: \"\\\\( t \\\\)\"\n  }), \". Typically, the term \", React.createElement(Latex, {\n    text: \"\\\\( \\\\nabla_w Q \\\\)\"\n  }), \" stands for the gradient of a loss function measuring how well the model fits \", React.createElement(Latex, {\n    text: \"\\\\( z_t \\\\)\"\n  }), \". In an online context, you can conceptualize \", React.createElement(Latex, {\n    text: \"\\\\( z_t \\\\)\"\n  }), \" as the most recent event from your data stream, so you only do a single pass (or a handful of passes) through the data. SGD is well-suited to large-scale and streaming scenarios, and, when combined with appropriate learning rate schedules or momentum-based techniques, it often converges more quickly than batch methods in practice.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"32-online-perceptron-algorithm\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#32-online-perceptron-algorithm\",\n    \"aria-label\": \"32 online perceptron algorithm permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.2 Online perceptron algorithm\"), \"\\n\", React.createElement(_components.p, null, \"The perceptron is a simple linear classifier from the earliest days of machine learning. In batch form, it iterates over the dataset multiple times, adjusting weights whenever it makes a misclassification. The online perceptron is a natural extension of this idea: when a new data point arrives, the perceptron checks whether it misclassifies that point. If it does, it updates its weights. Otherwise, it leaves them as is. Formally:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Given a labeled data point \", React.createElement(Latex, {\n    text: \"\\\\( (x_t, y_t) \\\\)\"\n  }), \", where \", React.createElement(Latex, {\n    text: \"\\\\( y_t \\\\in \\\\{ -1, +1 \\\\} \\\\)\"\n  }), \".\"), \"\\n\", React.createElement(_components.li, null, \"Predict \", React.createElement(Latex, {\n    text: \"\\\\( \\\\hat{y}_t = \\\\text{sign}(w_t^\\\\top x_t + \\\\beta_t) \\\\)\"\n  }), \".\"), \"\\n\", React.createElement(_components.li, null, \"If \", React.createElement(Latex, {\n    text: \"\\\\( \\\\hat{y}_t \\\\ne y_t \\\\)\"\n  }), \", update:\", \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\nw_{t+1} = w_t + y_t x_t, \\\\quad \\\\beta_{t+1} = \\\\beta_t + y_t\\n\\\\]\"\n  }), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"Otherwise, \", React.createElement(Latex, {\n    text: \"\\\\( w_{t+1} = w_t \\\\)\"\n  }), \" and \", React.createElement(Latex, {\n    text: \"\\\\( \\\\beta_{t+1} = \\\\beta_t \\\\)\"\n  }), \".\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Because it updates parameters immediately upon mistakes, the perceptron is a purely online algorithm. Although it converges under certain conditions (data linear separability), it remains a cornerstone example of incremental learning. Variants like the \", React.createElement(Highlight, null, \"kernelized perceptron\"), \" allow for non-linear decision boundaries in an online manner as well.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"33-online-support-vector-machines-svms\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#33-online-support-vector-machines-svms\",\n    \"aria-label\": \"33 online support vector machines svms permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.3 Online support vector machines (SVMs)\"), \"\\n\", React.createElement(_components.p, null, \"Support vector machines were originally formulated for batch learning, requiring a solution to a convex quadratic program. However, various adaptations exist to make SVMs more amenable to online or incremental learning. Examples include:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"LASVM\"), \": An incremental SVM approach that updates the decision boundary by processing new data points one at a time (or in small bursts).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"NORMA\"), \" (Proposed by J. Kivinen, A. Smola, and R. Williamson): A general online kernel learning algorithm that updates the model in a stochastic gradient fashion, with a regularization term.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"In an online SVM, when a new labeled data point arrives, the algorithm checks whether it violates the margin conditions. If it does, the algorithm updates the support vectors (and the associated coefficients) accordingly. The challenge is to manage the support vector set size, which can grow with streaming data. Techniques such as support vector removal (to forget older data that is less relevant) or bounding the number of support vectors ensure the model remains tractable over time.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"34-bandit-algorithms\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#34-bandit-algorithms\",\n    \"aria-label\": \"34 bandit algorithms permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.4 Bandit algorithms\"), \"\\n\", React.createElement(_components.p, null, \"Many real-time systems do not receive full label information immediately. Instead, they only receive partial feedback (sometimes called reward). For example, in an online advertisement scenario, you show an ad to a user, and you only see whether they click on it or not. You don't observe the user's response to other ads you \", React.createElement(_components.em, null, \"didn't\"), \" show. This is called the multi-armed bandit problem, reminiscent of a gambler who must choose which slot machine (\\\"arm\\\") to pull with limited knowledge of the reward distribution.\"), \"\\n\", React.createElement(_components.p, null, \"Bandit algorithms like \", React.createElement(_components.strong, null, \"UCB\"), \" (Upper Confidence Bound), \", React.createElement(_components.strong, null, \"Thompson Sampling\"), \", and \", React.createElement(_components.strong, null, \"EXP3\"), \" are inherently online: they balance exploration (trying suboptimal actions to gather more information) and exploitation (favoring actions known to yield high reward) in a streaming fashion. Each time step yields a single reward from one action, and the algorithm updates its estimates about that action's distribution. These methods, especially contextual bandits that incorporate side information (features of the user or environment), have become key in recommendation systems and personalization engines.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"35-online-boosting-techniques\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#35-online-boosting-techniques\",\n    \"aria-label\": \"35 online boosting techniques permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.5 Online boosting techniques\"), \"\\n\", React.createElement(_components.p, null, \"Boosting is a family of ensemble methods that combine multiple weak learners to produce a strong predictor. Classic boosting algorithms like AdaBoost or Gradient Boosting typically rely on multiple passes through the dataset to adjust the distribution or weighting of training examples. However, \", React.createElement(_components.strong, null, \"online boosting\"), \" modifies these algorithms to update the ensemble incrementally as new data arrives.\"), \"\\n\", React.createElement(_components.p, null, \"One approach is to maintain an ensemble of weak learners, each trained in an online manner (like an incremental decision tree or perceptron). When a new data point arrives, the ensemble updates each weak learner's weights (or parameters) based on its individual error, re-weights the data point for the next learner in the chain, and so on. This requires careful design to ensure the updated ensemble retains the theoretical advantages of boosting, such as reducing bias and variance.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"36-other-specialized-algorithms\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#36-other-specialized-algorithms\",\n    \"aria-label\": \"36 other specialized algorithms permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.6 Other specialized algorithms\"), \"\\n\", React.createElement(_components.p, null, \"Numerous other specialized online learning algorithms exist, for tasks like:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Online matrix factorization\"), \" for streaming recommendation (collaborative filtering),\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Online clustering\"), \" (e.g., incremental k-means, streaming DBSCAN variants),\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Online variants of Bayesian methods\"), \" (e.g., using Bayesian updating or Bayesian online changepoint detection to track concept drift),\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Neural network-based online learning\"), \", where weights are updated with each mini-batch of data in a constant stream.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Each method must handle the ephemeral nature of streaming data, limit memory usage, and adapt quickly to changing distributions.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"advantages-and-challenges\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#advantages-and-challenges\",\n    \"aria-label\": \"advantages and challenges permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Advantages and challenges\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"lower-computational-cost-over-time\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#lower-computational-cost-over-time\",\n    \"aria-label\": \"lower computational cost over time permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Lower computational cost over time\"), \"\\n\", React.createElement(_components.p, null, \"Batch learning can be computationally expensive if, every time new data arrives, you have to retrain the model from scratch (or do a large partial re-training). With online learning, you update incrementally at each time step, which can drastically reduce the average computation cost over the system's lifetime. In large-scale production settings, this advantage often translates to reduced infrastructure costs and more responsive systems.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"real-time-adaptability\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#real-time-adaptability\",\n    \"aria-label\": \"real time adaptability permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Real-time adaptability\"), \"\\n\", React.createElement(_components.p, null, \"By definition, an online approach reacts to newly arriving data instantly (or nearly so). This real-time adaptability is crucial for domains like anomaly or fraud detection, recommendation systems, dynamic resource allocation, and any environment where the data distribution can shift quickly (concept drift). Real-time updates can keep the model relevant and avoid performance degradation over time.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"handling-large-scale-data\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#handling-large-scale-data\",\n    \"aria-label\": \"handling large scale data permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Handling large-scale data\"), \"\\n\", React.createElement(_components.p, null, \"In scenarios with massive data volumes, it may be infeasible to store or process the entire dataset offline. Online learning can handle data as it arrives and then discard or compress it, significantly reducing memory overhead. With a well-designed streaming pipeline, you can keep pace with high-velocity data without facing the storage and processing bottlenecks of batch approaches.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"concept-drift-and-non-stationary-data\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#concept-drift-and-non-stationary-data\",\n    \"aria-label\": \"concept drift and non stationary data permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Concept drift and non-stationary data\"), \"\\n\", React.createElement(_components.p, null, \"One of the biggest challenges in real-world machine learning is that the data distribution is seldom stationary. Online learning mitigates this by continuously updating the model to reflect the most recent data. Of course, not all online algorithms automatically handle drift well; some might exhibit slow adaptation or be prone to forgetting older patterns. Specialized strategies exist to detect and respond to drift, such as resetting parameters, time-weighted updates, or drift detection using statistical tests.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"balancing-model-accuracy-and-speed\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#balancing-model-accuracy-and-speed\",\n    \"aria-label\": \"balancing model accuracy and speed permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Balancing model accuracy and speed\"), \"\\n\", React.createElement(_components.p, null, \"Online updates are generally faster than retraining from scratch, but they can also accumulate noise or biases from small numbers of samples. A single mislabeled data point in a purely online system might cause a large model shift. Additionally, online methods often require fine-tuning of learning rates or forgetting factors. The fundamental tension is between reactivity (quickly adapting to new data) and stability (not overreacting to outliers).\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"managing-noisy-and-incomplete-data\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#managing-noisy-and-incomplete-data\",\n    \"aria-label\": \"managing noisy and incomplete data permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Managing noisy and incomplete data\"), \"\\n\", React.createElement(_components.p, null, \"Because data in the wild often arrives with missing values, noisy signals, or partial feedback, online methods must handle these imperfections gracefully. Techniques like robust loss functions, partial labeling (e.g., bandits), or incremental imputation methods can help. Still, the possibility of \\\"garbage in, garbage out\\\" is even more pronounced in streaming environments where you can't always go back to clean or correct data once it's processed.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"real-world-applications\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#real-world-applications\",\n    \"aria-label\": \"real world applications permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Real-world applications\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"51-recommendation-systems\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#51-recommendation-systems\",\n    \"aria-label\": \"51 recommendation systems permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"5.1 Recommendation systems\"), \"\\n\", React.createElement(_components.p, null, \"Recommendation engines often leverage streaming user interactions (clicks, views, likes, ratings) to update their models in real time. For example, a large e-commerce site might continuously update user preference vectors or item latent factors in an online matrix factorization system as it observes new user behavior. This ensures that the recommendations reflect up-to-the-minute behavior, such as a sudden increased interest in a particular product category.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"52-online-fraud-detection\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#52-online-fraud-detection\",\n    \"aria-label\": \"52 online fraud detection permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"5.2 Online fraud detection\"), \"\\n\", React.createElement(_components.p, null, \"Fraud detection systems for credit cards, insurance claims, or other financial products must make split-second decisions about potentially fraudulent transactions. Because fraudulent patterns can evolve quickly (or attackers might test new methods), an online classifier or anomaly detection model is beneficial. By continuously retraining on new labeled or partially labeled transactions, the system maintains high detection accuracy and reduces the window of vulnerability to new fraud patterns.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"53-dynamic-resource-allocation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#53-dynamic-resource-allocation\",\n    \"aria-label\": \"53 dynamic resource allocation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"5.3 Dynamic resource allocation\"), \"\\n\", React.createElement(_components.p, null, \"In networking, cloud computing, or manufacturing, resources (e.g., CPU, memory, production capacity) need to be allocated dynamically based on real-time loads or demands. An online method can update predictive models for resource usage on the fly, ensuring that decisions reflect the latest usage patterns. This is crucial in modern distributed systems where demand can spike unpredictably.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"54-adaptive-control-systems\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#54-adaptive-control-systems\",\n    \"aria-label\": \"54 adaptive control systems permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"5.4 Adaptive control systems\"), \"\\n\", React.createElement(_components.p, null, \"Control systems in robotics, industrial process control, or autonomous vehicles often must learn and adapt to changing conditions. For instance, if a robot experiences wear in a joint or changes in its environment, an online reinforcement learning or control algorithm can adapt its policy incrementally without requiring a complete offline retraining.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"55-streaming-analytics\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#55-streaming-analytics\",\n    \"aria-label\": \"55 streaming analytics permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"5.5 Streaming analytics\"), \"\\n\", React.createElement(_components.p, null, \"Beyond predictive modeling, online learning also underpins many streaming analytics frameworks, such as computing rolling averages, rolling correlations, or incremental sketches for big data. Tools like HyperLogLog or Count-Min Sketch are not exactly \\\"learning\\\" algorithms, but they share the same incremental principle to handle large or unbounded data in real time.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"evaluation-metrics\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#evaluation-metrics\",\n    \"aria-label\": \"evaluation metrics permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Evaluation metrics\"), \"\\n\", React.createElement(_components.p, null, \"Evaluating online models differs from standard batch evaluation. While we can still measure accuracy, precision, recall, or other supervised metrics, we need to do so in a streaming context, often with limited or delayed labels.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"61-online-accuracy-and-loss-functions\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#61-online-accuracy-and-loss-functions\",\n    \"aria-label\": \"61 online accuracy and loss functions permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.1 Online accuracy and loss functions\"), \"\\n\", React.createElement(_components.p, null, \"One approach is to track the cumulative loss or accuracy over time. For example, at each step \", React.createElement(Latex, {\n    text: \"\\\\( t \\\\)\"\n  }), \", I measure \", React.createElement(Latex, {\n    text: \"\\\\( Q(z_t, w_t) \\\\)\"\n  }), \" (the loss for the new data point) and then compute an overall metric such as \", React.createElement(Latex, {\n    text: \"\\\\( \\\\sum_t Q(z_t, w_t) \\\\)\"\n  }), \". Minimizing the average or total loss over the sequence is a typical objective in online learning theory. Alternatively, we can measure incremental classification accuracy on a rolling basis, such as the fraction of correctly predicted labels over the most recent \", React.createElement(Latex, {\n    text: \"\\\\( k \\\\)\"\n  }), \" samples.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"62-time-based-metrics-and-latency\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#62-time-based-metrics-and-latency\",\n    \"aria-label\": \"62 time based metrics and latency permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.2 Time-based metrics and latency\"), \"\\n\", React.createElement(_components.p, null, \"Because an online model's quality might degrade if it cannot keep up with the stream, time-based metrics (like end-to-end latency from data arrival to model inference) can be just as critical as predictive accuracy. In real-time applications, we may demand that the model produce predictions within a few milliseconds. For this reason, many frameworks log not only correctness metrics but also average or 99th-percentile latency.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"63-memory-based-performance-measurements\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#63-memory-based-performance-measurements\",\n    \"aria-label\": \"63 memory based performance measurements permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.3 Memory-based performance measurements\"), \"\\n\", React.createElement(_components.p, null, \"Online algorithms often tout minimal memory usage as a feature. To ensure this claim holds in practice, memory usage should be monitored as new data arrives. If the method's memory usage creeps upward (e.g., storing too many support vectors in an online SVM, or an unbounded buffer in streaming frameworks), you risk losing the advantages of an online approach.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"64-rolling-or-incremental-validation-strategies\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#64-rolling-or-incremental-validation-strategies\",\n    \"aria-label\": \"64 rolling or incremental validation strategies permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.4 Rolling or incremental validation strategies\"), \"\\n\", React.createElement(_components.p, null, \"In a batch scenario, we typically separate data into training, validation, and test sets. But in online learning, new data arrives continuously, and you might not have a separate hold-out set at the start. Techniques like \", React.createElement(_components.strong, null, \"prequential evaluation\"), \" (or test-then-train) are common: for each new data point, you first test the model on that point (to measure immediate prediction accuracy), then use that same point to update the model. This strategy simulates a real use case where the model must predict before it sees the true label, and ensures that you do not cheat by training on the same data before testing.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"in-practice\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#in-practice\",\n    \"aria-label\": \"in practice permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"In practice\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"model-deployment-and-maintenance\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#model-deployment-and-maintenance\",\n    \"aria-label\": \"model deployment and maintenance permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Model deployment and maintenance\"), \"\\n\", React.createElement(_components.p, null, \"Deploying an online model typically involves setting up a pipeline that automatically:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Collects or receives streaming data,\"), \"\\n\", React.createElement(_components.li, null, \"Extracts or transforms features (potentially in real time),\"), \"\\n\", React.createElement(_components.li, null, \"Updates the model parameters incrementally,\"), \"\\n\", React.createElement(_components.li, null, \"Stores the updated model state (or partial states) to ensure persistence,\"), \"\\n\", React.createElement(_components.li, null, \"Serves predictions to an application or user interface.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(Highlight, null, \"Maintenance\"), \" includes monitoring performance for concept drift, anomalies, or distribution changes. If a drastic shift occurs, you might have to reset, re-initialize, or drastically reconfigure the model. In some systems, a hybrid approach is used: a fully online model handles rapid short-term adaptation, while a larger batch pipeline occasionally retrains a more complex model with improved accuracy.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"monitoring-and-alert-systems\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#monitoring-and-alert-systems\",\n    \"aria-label\": \"monitoring and alert systems permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Monitoring and alert systems\"), \"\\n\", React.createElement(_components.p, null, \"Because an online model updates itself with minimal human supervision, monitoring is vital. Typical monitoring includes:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Prediction drift\"), \": The model's predictions might systematically shift if the data changes distribution.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Performance metrics\"), \": Tracking classification error or reward over time, looking for abrupt drops.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Resource usage\"), \": CPU, memory, or network utilization, especially if scale is unpredictable.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"In robust production setups, you might define thresholds or triggers (alerts) for these metrics, prompting a deeper investigation or automated fallback if something drifts too far out of the ordinary.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"handling-concept-drift-in-production\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#handling-concept-drift-in-production\",\n    \"aria-label\": \"handling concept drift in production permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Handling concept drift in production\"), \"\\n\", React.createElement(_components.p, null, \"Concept drift can break an online model if the drift is large and abrupt. Production systems might:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Implement \", React.createElement(_components.strong, null, \"drift detection\"), \": Use statistical tests or specialized detectors (like DDM — Drift Detection Method) that analyze the online error rate. If the drift is detected, you might reset the model parameters or reduce the learning rate to carefully adapt.\"), \"\\n\", React.createElement(_components.li, null, \"Use \", React.createElement(_components.strong, null, \"sliding windows\"), \": Keep a window of the most recent data. Weight the examples within the window higher in the gradient updates. Discard or de-weight older data. This approach can track slow or gradual drifts well.\"), \"\\n\", React.createElement(_components.li, null, \"Maintain \", React.createElement(_components.strong, null, \"ensemble approaches\"), \": Each ensemble member might be trained on data from different time windows or start times, thus collectively reacting to drift. If one model's error spikes, it might be replaced with a freshly trained model.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"tools-and-frameworks-for-online-learning\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#tools-and-frameworks-for-online-learning\",\n    \"aria-label\": \"tools and frameworks for online learning permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Tools and frameworks for online learning\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"River\"), \" (formerly \", React.createElement(_components.strong, null, \"creme\"), \"): A Python library specialized for incremental learning on data streams, supporting classification, regression, and anomaly detection. River focuses on memory-efficient and streaming-friendly algorithms.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Vowpal Wabbit\"), \": A fast C++ library designed for online learning, with support for interactive learning (bandit) and large-scale linear or factorization-based models.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"scikit-multiflow\"), \": Another Python-based library that focuses on streaming data, including concept drift detection, online ensemble methods, etc.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Apache SAMOA\"), \": An open-source platform for mining big data streams, integrating with Apache Storm, Flink, and Samza.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"implementation-code-snippets-step-by-step\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#implementation-code-snippets-step-by-step\",\n    \"aria-label\": \"implementation code snippets step by step permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Implementation: code snippets step-by-step\"), \"\\n\", React.createElement(_components.p, null, \"Let's illustrate a simple online learning workflow in Python using a partial fit approach. For instance, \", React.createElement(_components.strong, null, \"scikit-learn\"), \" provides \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">partial_fit</code>\"\n    }\n  }), \" methods for certain estimators (like \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SGDClassifier</code>\"\n    }\n  }), \"). Although scikit-learn is not specialized for streaming in the same sense as River or Vowpal Wabbit, it still demonstrates the principle of incremental updates.\"), \"\\n\", React.createElement(Code, {\n    text: `\nimport numpy as np\nfrom sklearn.linear_model import SGDClassifier\n\n# Suppose we have streaming data generating function\ndef data_stream(num_points=10000, dims=10):\n    for _ in range(num_points):\n        X = np.random.randn(dims)\n        # Generate a label using a random hyperplane\n        y = 1 if np.dot(X, np.random.randn(dims)) > 0 else 0\n        yield X, y\n\n# Initialize the online classifier\nclf = SGDClassifier(loss=\"log\", learning_rate=\"constant\", eta0=0.01)\n\n# We'll do an incremental training loop\nbatch_size = 50\nX_buffer, y_buffer = [], []\n\nfor i, (X, y) in enumerate(data_stream(num_points=1000, dims=10)):\n    X_buffer.append(X)\n    y_buffer.append(y)\n    \n    # Once we reach a mini-batch size, we do a partial fit\n    if (i + 1) % batch_size == 0:\n        X_batch = np.array(X_buffer)\n        y_batch = np.array(y_buffer)\n        \n        # If it's the first time, we need to provide the classes for partial_fit\n        if i < batch_size:\n            clf.partial_fit(X_batch, y_batch, classes=[0,1])\n        else:\n            clf.partial_fit(X_batch, y_batch)\n        \n        # Clear the buffer\n        X_buffer, y_buffer = [], []\n\n        # Optionally, evaluate on a small holdout or measure intermediate performance\n        # In real online learning, you might do prequential evaluation (test then train).\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"In this example, each incoming data point is buffered until we reach a certain mini-batch size (50). Then we call \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">partial_fit</code>\"\n    }\n  }), \" to update the model's parameters. The model is never fully retrained from scratch; it just updates the current parameters based on the new mini-batch. This is a simplified approach that merges batch-based processing with streaming concepts, bridging the gap between pure online (single-sample) updates and practical incremental updates.\"), \"\\n\", React.createElement(_components.p, null, \"For a more genuine streaming approach, libraries like River allow you to do something like:\"), \"\\n\", React.createElement(Code, {\n    text: `\nfrom river import linear_model\nfrom river import optim\nfrom river import metrics\n\nmodel = linear_model.LogisticRegression(optimizer=optim.SGD(0.01))\nmetric = metrics.Accuracy()\n\nfor i, (X, y) in enumerate(data_stream(num_points=1000, dims=10)):\n    # Predict\n    y_pred = model.predict_one(dict(enumerate(X)))\n    # Update the metric\n    metric.update(y, y_pred)\n    # Learn (online update)\n    model.learn_one(dict(enumerate(X)), y)\n    \n    # If desired, print performance occasionally\n    if i % 100 == 0 and i > 0:\n        print(f\"Step {i}, Accuracy: {metric.get()}\") \n`\n  }), \"\\n\", React.createElement(_components.p, null, \"Notice that with River, we feed one sample at a time directly to \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">learn_one</code>\"\n    }\n  }), \", achieving true single-sample incremental learning. This kind of approach is well-suited for production streaming systems or memory-constrained environments.\"), \"\\n\", React.createElement(Image, {\n    alt: \"Illustration of a continuous data stream updating a model in real-time\",\n    path: \"\",\n    caption: \"Conceptual diagram of how data flows into an online learning system and updates the model incrementally.\",\n    zoom: \"false\"\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"optional-extended-discussion-theoretical-underpinnings\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#optional-extended-discussion-theoretical-underpinnings\",\n    \"aria-label\": \"optional extended discussion theoretical underpinnings permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"(Optional) Extended discussion: theoretical underpinnings\"), \"\\n\", React.createElement(_components.p, null, \"Many online learning algorithms can be viewed as instances of the \", React.createElement(_components.em, null, \"stochastic approximation\"), \" framework, wherein the goal is to minimize an expected risk \", React.createElement(Latex, {\n    text: \"\\\\( J(w) \\\\)\"\n  }), \":\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\nJ(w) = \\\\mathbb{E}_z \\\\; Q(z,w).\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"We do not know the distribution \", React.createElement(Latex, {\n    text: \"\\\\( P(z) \\\\)\"\n  }), \" explicitly, but we can sample from it as data arrives. A single online update step is effectively a stochastic gradient step toward minimizing \", React.createElement(Latex, {\n    text: \"\\\\( J(w) \\\\)\"\n  }), \":\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\nw_{t+1} = w_t - \\\\gamma_t \\\\nabla_w Q(z_t, w_t).\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Under mild conditions (like diminishing learning rates \", React.createElement(Latex, {\n    text: \"\\\\( \\\\gamma_t \\\\)\"\n  }), \" and certain smoothness assumptions), such updates converge to a local or global minimum of \", React.createElement(Latex, {\n    text: \"\\\\( J \\\\)\"\n  }), \" in expectation. That said, real-time or streaming contexts introduce additional difficulties: concept drift, outlier data, or partial feedback. Researchers continue to refine these theories to handle more complicated scenarios.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"final-remarks\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#final-remarks\",\n    \"aria-label\": \"final remarks permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Final remarks\"), \"\\n\", React.createElement(_components.p, null, \"Online machine learning is a powerful framework that addresses the needs of modern data-driven applications where data arrives continuously and may change rapidly. By incrementally updating model parameters in real time and avoiding the need to store the entire dataset or retrain from scratch, online learning provides a flexible, scalable approach that adapts quickly to new information. However, success requires careful consideration of:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Algorithm selection (e.g., linear vs. ensemble vs. neural approaches),\"), \"\\n\", React.createElement(_components.li, null, \"Streaming data infrastructure (e.g., Kafka, Flink),\"), \"\\n\", React.createElement(_components.li, null, \"Monitoring for concept drift and anomalies,\"), \"\\n\", React.createElement(_components.li, null, \"Proper evaluation methods (prequential, incremental metrics),\"), \"\\n\", React.createElement(_components.li, null, \"Hyperparameter tuning (especially for learning rates and forgetting mechanisms).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Adoption of online learning has accelerated with the growth of streaming analytics, IoT sensors, real-time personalization, and large-scale event-driven architectures. While the theoretical foundations date back decades (e.g., perceptron, stochastic approximation theory), recent advances in library support (River, scikit-multiflow, Vowpal Wabbit) and big data infrastructures (Kafka, Flink, Storm) have made it more accessible to practitioners. As data sources become ever more voluminous and time-sensitive, online machine learning will remain at the forefront of practical, adaptive AI solutions.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/avrtt/Repos/avrtt.github.io/src/pages/posts/research/online_machine_learning.mdx\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React, {useState, useEffect} from 'react';\nimport {useSiteMetadata} from \"../hooks/useSiteMetadata\";\nimport RemoveMarkdown from 'remove-markdown';\nimport {ImageContext} from '../context/ImageContext';\nimport {MDXProvider} from '@mdx-js/react';\nimport Image from '../components/PostImage';\nimport {motion} from 'framer-motion';\nimport SEO from \"../components/seo\";\nimport PostBanner from '../components/PostBanner';\nimport PostBottom from '../components/PostBottom';\nimport {wordsPerMinuteAdventures, wordsPerMinuteResearch, wordsPerMinuteThoughts} from '../data/commonVariables';\nimport PartOfCourseNotice from \"../components/PartOfCourseNotice\";\nimport * as stylesButtonsCommon from \"../styles/buttons_common.module.scss\";\nimport * as stylesCustomPostLayouts from \"../styles/custom_post_layouts.module.scss\";\nimport * as stylesTableOfContents from \"../styles/table_of_contents.module.scss\";\nimport * as stylesTagBadges from \"../styles/tag_badges.module.scss\";\nfunction formatReadTime(minutes) {\n  if (minutes <= 10) return '~10 min';\n  if (minutes <= 20) return '~20 min';\n  if (minutes <= 30) return '~30 min';\n  if (minutes <= 40) return '~40 min';\n  if (minutes <= 50) return '~50 min';\n  if (minutes <= 60) return '~1 h';\n  const hours = Math.floor(minutes / 60);\n  const remainder = minutes % 60;\n  if (remainder <= 30) {\n    return `~${hours}${remainder > 0 ? '.5' : ''} h`;\n  }\n  return `~${hours + 1} h`;\n}\nconst TableOfContents = _ref => {\n  let {toc} = _ref;\n  if (!toc || !toc.items) return null;\n  const handleClick = (e, url) => {\n    e.preventDefault();\n    const targetId = url.replace('#', '');\n    const targetElement = document.getElementById(targetId);\n    if (targetElement) {\n      targetElement.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }\n  };\n  return React.createElement(\"nav\", {\n    className: stylesTableOfContents.toc\n  }, React.createElement(\"ul\", null, toc.items.map((item, index) => React.createElement(\"li\", {\n    key: index\n  }, React.createElement(\"a\", {\n    href: item.url,\n    onClick: e => handleClick(e, item.url)\n  }, item.title), item.items && React.createElement(TableOfContents, {\n    toc: {\n      items: item.items\n    }\n  })))));\n};\nexport function PostTemplate(_ref2) {\n  let {data: {mdx, allMdx, allPostImages}, children} = _ref2;\n  const {frontmatter, body, tableOfContents} = mdx;\n  const index = frontmatter.index;\n  const slug = frontmatter.slug;\n  const section = slug.split('/')[1];\n  const posts = allMdx.nodes.filter(post => post.frontmatter.slug.includes(`/${section}/`));\n  const sortedPosts = posts.sort((a, b) => a.frontmatter.index - b.frontmatter.index);\n  const currentIndex = sortedPosts.findIndex(post => post.frontmatter.index === index);\n  const nextPost = sortedPosts[currentIndex + 1];\n  const lastPost = sortedPosts[currentIndex - 1];\n  const trimmedSlug = frontmatter.slug.replace(/\\/$/, '');\n  const keyCurrent = (/[^/]*$/).exec(trimmedSlug)[0];\n  const basePath = `posts/${section}/content/${keyCurrent}/`;\n  const {0: isWideLayout, 1: setIsWideLayout} = useState(frontmatter.flagWideLayoutByDefault);\n  const {0: isAnimating, 1: setIsAnimating} = useState(false);\n  const toggleLayout = () => {\n    setIsWideLayout(!isWideLayout);\n  };\n  useEffect(() => {\n    setIsAnimating(true);\n    const timer = setTimeout(() => setIsAnimating(false), 340);\n    return () => clearTimeout(timer);\n  }, [isWideLayout]);\n  var wordsPerMinute;\n  if (section === \"adventures\") {\n    wordsPerMinute = wordsPerMinuteAdventures;\n  } else if (section === \"research\") {\n    wordsPerMinute = wordsPerMinuteResearch;\n  } else if (section === \"thoughts\") {\n    wordsPerMinute = wordsPerMinuteThoughts;\n  }\n  const plainTextBody = RemoveMarkdown(body).replace(/import .*? from .*?;/g, '').replace(/<.*?>/g, '').replace(/\\{\\/\\*[\\s\\S]*?\\*\\/\\}/g, '').trim();\n  const wordCount = plainTextBody.split(/\\s+/).length;\n  const baseReadTimeMinutes = Math.ceil(wordCount / wordsPerMinute);\n  const extraTime = frontmatter.extraReadTimeMin || 0;\n  const totalReadTime = baseReadTimeMinutes + extraTime;\n  const readTime = formatReadTime(totalReadTime);\n  const notices = [{\n    flag: frontmatter.flagDraft,\n    component: () => import(\"../components/NotFinishedNotice\")\n  }, {\n    flag: frontmatter.flagMindfuckery,\n    component: () => import(\"../components/MindfuckeryNotice\")\n  }, {\n    flag: frontmatter.flagRewrite,\n    component: () => import(\"../components/RewriteNotice\")\n  }, {\n    flag: frontmatter.flagOffensive,\n    component: () => import(\"../components/OffensiveNotice\")\n  }, {\n    flag: frontmatter.flagProfane,\n    component: () => import(\"../components/ProfanityNotice\")\n  }, {\n    flag: frontmatter.flagMultilingual,\n    component: () => import(\"../components/MultilingualNotice\")\n  }, {\n    flag: frontmatter.flagUnreliably,\n    component: () => import(\"../components/UnreliablyNotice\")\n  }, {\n    flag: frontmatter.flagPolitical,\n    component: () => import(\"../components/PoliticsNotice\")\n  }, {\n    flag: frontmatter.flagCognitohazard,\n    component: () => import(\"../components/CognitohazardNotice\")\n  }, {\n    flag: frontmatter.flagHidden,\n    component: () => import(\"../components/HiddenNotice\")\n  }];\n  const {0: loadedNotices, 1: setLoadedNotices} = useState([]);\n  useEffect(() => {\n    notices.forEach(_ref3 => {\n      let {flag, component} = _ref3;\n      if (flag) {\n        component().then(module => {\n          setLoadedNotices(prev => [].concat(_toConsumableArray(prev), [module.default]));\n        });\n      }\n    });\n  }, []);\n  return React.createElement(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.15\n    }\n  }, React.createElement(PostBanner, {\n    postNumber: frontmatter.index,\n    date: frontmatter.date,\n    updated: frontmatter.updated,\n    readTime: readTime,\n    difficulty: frontmatter.difficultyLevel,\n    title: frontmatter.title,\n    desc: frontmatter.desc,\n    banner: frontmatter.banner,\n    section: section,\n    postKey: keyCurrent,\n    isMindfuckery: frontmatter.flagMindfuckery,\n    mainTag: frontmatter.mainTag\n  }), React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      flexWrap: \"wrap\",\n      maxWidth: \"75%\",\n      marginLeft: \"auto\",\n      paddingRight: \"1vw\",\n      marginTop: \"-6vh\",\n      marginBottom: \"4vh\"\n    }\n  }, frontmatter.otherTags.map((tag, index) => React.createElement(\"span\", {\n    key: index,\n    className: `noselect ${stylesTagBadges.tagPosts}`,\n    style: {\n      margin: \"0 5px 5px 0\"\n    }\n  }, tag))), React.createElement(\"div\", {\n    className: \"postBody\"\n  }, React.createElement(TableOfContents, {\n    toc: tableOfContents\n  })), React.createElement(\"br\", null), React.createElement(\"div\", {\n    style: {\n      margin: \"0 10% -2vh 30%\",\n      textAlign: \"right\"\n    }\n  }, React.createElement(motion.button, {\n    className: `noselect ${stylesCustomPostLayouts.postButton}`,\n    id: stylesCustomPostLayouts.postLayoutSwitchButton,\n    onClick: toggleLayout,\n    whileTap: {\n      scale: 0.93\n    }\n  }, React.createElement(motion.div, {\n    className: stylesButtonsCommon.buttonTextWrapper,\n    key: isWideLayout,\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.3,\n      ease: \"easeInOut\"\n    }\n  }, isWideLayout ? \"Switch to default layout\" : \"Switch to wide layout\"))), React.createElement(\"br\", null), React.createElement(\"div\", {\n    className: \"postBody\",\n    style: {\n      margin: isWideLayout ? \"0 -14%\" : \"\",\n      maxWidth: isWideLayout ? \"200%\" : \"\",\n      transition: \"margin 1s ease, max-width 1s ease, padding 1s ease\"\n    }\n  }, React.createElement(\"div\", {\n    className: `${stylesCustomPostLayouts.textContent} ${isAnimating ? stylesCustomPostLayouts.fadeOut : stylesCustomPostLayouts.fadeIn}`\n  }, loadedNotices.map((NoticeComponent, index) => React.createElement(NoticeComponent, {\n    key: index\n  })), frontmatter.indexCourse ? React.createElement(PartOfCourseNotice, {\n    index: frontmatter.indexCourse,\n    category: frontmatter.courseCategoryName\n  }) : \"\", React.createElement(ImageContext.Provider, {\n    value: {\n      images: allPostImages.nodes,\n      basePath: basePath.replace(/\\/$/, '') + '/'\n    }\n  }, React.createElement(MDXProvider, {\n    components: {\n      Image\n    }\n  }, children)))), React.createElement(PostBottom, {\n    nextPost: nextPost,\n    lastPost: lastPost,\n    keyCurrent: keyCurrent,\n    section: section\n  }));\n}\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport function Head(_ref4) {\n  var _frontmatter$banner, _frontmatter$banner$c, _frontmatter$banner$c2, _frontmatter$banner$c3, _frontmatter$banner$c4;\n  let {data} = _ref4;\n  const {frontmatter} = data.mdx;\n  const title = frontmatter.titleSEO || frontmatter.title;\n  const titleOG = frontmatter.titleOG || title;\n  const titleTwitter = frontmatter.titleTwitter || title;\n  const description = frontmatter.descSEO || frontmatter.desc;\n  const descriptionOG = frontmatter.descOG || description;\n  const descriptionTwitter = frontmatter.descTwitter || description;\n  const schemaType = frontmatter.schemaType || \"BlogPosting\";\n  const keywords = frontmatter.keywordsSEO;\n  const datePublished = frontmatter.date;\n  const dateModified = frontmatter.updated || datePublished;\n  const imageOG = frontmatter.imageOG || ((_frontmatter$banner = frontmatter.banner) === null || _frontmatter$banner === void 0 ? void 0 : (_frontmatter$banner$c = _frontmatter$banner.childImageSharp) === null || _frontmatter$banner$c === void 0 ? void 0 : (_frontmatter$banner$c2 = _frontmatter$banner$c.gatsbyImageData) === null || _frontmatter$banner$c2 === void 0 ? void 0 : (_frontmatter$banner$c3 = _frontmatter$banner$c2.images) === null || _frontmatter$banner$c3 === void 0 ? void 0 : (_frontmatter$banner$c4 = _frontmatter$banner$c3.fallback) === null || _frontmatter$banner$c4 === void 0 ? void 0 : _frontmatter$banner$c4.src);\n  const imageAltOG = frontmatter.imageAltOG || descriptionOG;\n  const imageTwitter = frontmatter.imageTwitter || imageOG;\n  const imageAltTwitter = frontmatter.imageAltTwitter || descriptionTwitter;\n  const canonicalUrl = frontmatter.canonicalURL;\n  const flagHidden = frontmatter.flagHidden || false;\n  const mainTag = frontmatter.mainTag || \"Posts\";\n  const section = frontmatter.slug.split('/')[1] || \"posts\";\n  const type = \"article\";\n  const {siteUrl} = useSiteMetadata();\n  const breadcrumbJSON = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    \"itemListElement\": [{\n      \"@type\": \"ListItem\",\n      \"position\": 1,\n      \"name\": \"Home\",\n      \"item\": siteUrl\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 2,\n      \"name\": mainTag,\n      \"item\": `${siteUrl}/${frontmatter.slug.split('/')[1]}`\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 3,\n      \"name\": title,\n      \"item\": `${siteUrl}${frontmatter.slug}`\n    }]\n  };\n  return React.createElement(SEO, {\n    title: title + \" - avrtt.blog\",\n    titleOG: titleOG,\n    titleTwitter: titleTwitter,\n    description: description,\n    descriptionOG: descriptionOG,\n    descriptionTwitter: descriptionTwitter,\n    schemaType: schemaType,\n    keywords: keywords,\n    datePublished: datePublished,\n    dateModified: dateModified,\n    imageOG: imageOG,\n    imageAltOG: imageAltOG,\n    imageTwitter: imageTwitter,\n    imageAltTwitter: imageAltTwitter,\n    canonicalUrl: canonicalUrl,\n    flagHidden: flagHidden,\n    mainTag: mainTag,\n    section: section,\n    type: type\n  }, React.createElement(\"script\", {\n    type: \"application/ld+json\"\n  }, JSON.stringify(breadcrumbJSON)));\n}\nconst query = \"2571018839\";\n","/* \n\nCopyright © 2022  Vladislav Averett (avrtt)\nDistributed under the GNU AGPLv3 license. For details and source code, please refer to <https://github.com/avrtt/avrtt.github.io>.\n\n*/\n\nimport React from \"react\";\nimport Latex from 'react-latex-next';\nimport 'katex/dist/katex.min.css'; \n\ninterface LatexProps {\n  text: string;\n}\n  \nconst L = ({ text }: LatexProps) => {\n  return (\n    <Latex>{text}</Latex>\n  );\n};\nexport default L;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h3","a","span","ul","li","h2","ol","strong","em","_provideComponents","components","Image","id","component","Error","_missingMdxReference","React","style","position","href","className","dangerouslySetInnerHTML","__html","Highlight","Latex","text","Code","alt","path","caption","zoom","wrapper","MDXLayout","TableOfContents","_ref","toc","items","stylesTableOfContents","map","item","index","key","url","onClick","e","handleClick","preventDefault","targetId","replace","targetElement","document","getElementById","scrollIntoView","behavior","block","title","PostTemplate","_ref2","data","mdx","allMdx","allPostImages","children","frontmatter","body","tableOfContents","section","slug","split","sortedPosts","nodes","filter","post","includes","sort","b","currentIndex","findIndex","nextPost","lastPost","trimmedSlug","keyCurrent","exec","basePath","isWideLayout","setIsWideLayout","useState","flagWideLayoutByDefault","isAnimating","setIsAnimating","wordsPerMinute","useEffect","timer","setTimeout","clearTimeout","wordsPerMinuteAdventures","wordsPerMinuteResearch","wordsPerMinuteThoughts","wordCount","RemoveMarkdown","trim","length","readTime","minutes","hours","Math","floor","remainder","formatReadTime","ceil","extraReadTimeMin","notices","flag","flagDraft","flagMindfuckery","flagRewrite","flagOffensive","flagProfane","flagMultilingual","flagUnreliably","flagPolitical","flagCognitohazard","flagHidden","loadedNotices","setLoadedNotices","forEach","_ref3","then","module","prev","concat","_toConsumableArray","default","motion","div","initial","opacity","animate","exit","transition","duration","PostBanner","postNumber","date","updated","difficulty","difficultyLevel","desc","banner","postKey","isMindfuckery","mainTag","display","justifyContent","flexWrap","maxWidth","marginLeft","paddingRight","marginTop","marginBottom","otherTags","tag","stylesTagBadges","margin","textAlign","button","stylesCustomPostLayouts","toggleLayout","whileTap","scale","stylesButtonsCommon","ease","NoticeComponent","indexCourse","PartOfCourseNotice","category","courseCategoryName","ImageContext","Provider","value","images","MDXProvider","PostBottom","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref4","_frontmatter$banner","_frontmatter$banner$c","_frontmatter$banner$c2","_frontmatter$banner$c3","_frontmatter$banner$c4","titleSEO","titleOG","titleTwitter","description","descSEO","descriptionOG","descOG","descriptionTwitter","descTwitter","schemaType","keywords","keywordsSEO","datePublished","dateModified","imageOG","childImageSharp","gatsbyImageData","fallback","src","imageAltOG","imageTwitter","imageAltTwitter","canonicalUrl","canonicalURL","siteUrl","useSiteMetadata","breadcrumbJSON","SEO","type","JSON","stringify"],"sourceRoot":""}