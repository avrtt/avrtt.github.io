"use strict";(self.webpackChunkavrtt_blog=self.webpackChunkavrtt_blog||[]).push([[5694],{46598:function(e,t,a){a.r(t),a.d(t,{Head:function(){return N},PostTemplate:function(){return S},default:function(){return M}});var n=a(28453),i=a(96540),r=(a(61992),a(62087)),l=a(90548);function s(e){const t=Object.assign({p:"p",h2:"h2",a:"a",span:"span",h3:"h3",ul:"ul",li:"li",ol:"ol"},(0,n.RP)(),e.components),{Image:a}=t;return a||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Image",!0),i.createElement(i.Fragment,null,"\n",i.createElement("br"),"\n","\n","\n",i.createElement(t.p,null,"Deep Belief Networks (DBNs) represent a milestone in the evolution of deep learning, standing at the intersection between probabilistic graphical models and modern connectionist approaches. Before the explosive popularity of purely backpropagation-based deep neural networks that now dominate tasks such as image recognition, natural language processing, and speech synthesis, DBNs demonstrated that layered, hierarchical feature extraction could be achieved through an efficient layer-by-layer training procedure. This unexpected success initially broadened the horizons of neural network research, challenging the pervasive belief of the time that deep architectures could not be effectively trained due to issues such as vanishing or exploding gradients."),"\n",i.createElement(t.p,null,"By essentially stacking multiple Restricted Boltzmann Machines (RBMs) on top of each other and then performing a global fine-tuning step, DBNs overcame longstanding hurdles in training multi-layer networks. Hinton and gang (2006) revealed that this layer-wise approach opened up possibilities for learning rich internal representations, and moreover, for applying these representations to both discriminative and generative tasks. Rather than relying solely on purely supervised signals, DBNs can leverage unlabeled data through unsupervised pretraining steps, making them particularly appealing to scenarios where labeled examples are expensive or hard to acquire."),"\n",i.createElement(t.p,null,"In their heyday, DBNs provided new insights into the world of unsupervised and semi-supervised learning. Today, however, they have largely been superseded by end-to-end backpropagation-based networks, variational autoencoders, or other generative techniques such as Generative Adversarial Networks (GANs). Nonetheless, DBNs remain an essential chapter in the history of deep learning. Understanding their architecture, theoretical underpinnings, and training mechanisms is incredibly instructive for researchers wishing to grasp the evolution of deep neural networks. By familiarizing oneself with DBNs, one can appreciate the design and objectives of modern generative models, as well as see how historical solutions influenced today's deep architectures."),"\n",i.createElement(t.p,null,"In this article, I will thoroughly explain DBN architecture from first principles, tying the discussion to the foundational concept of RBMs, the specialized training procedures that stitch these modules together, and the broader theoretical context under which DBNs influenced machine learning. Along the way, I will dive into the energy-based perspective that frames RBMs, highlight representative formulas using LaTeX syntax, demonstrate short snippets of Python code to illustrate key points, and offer placeholder tags for images that would typically show the high-level structure of DBNs. While DBNs are no longer the frontrunners in large-scale machine learning applications, they remain elegant and historically significant vehicles for studying how layered representation learning can be done with probabilistic frameworks."),"\n",i.createElement(t.h2,{id:"the-building-block-restricted-boltzmann-machines",style:{position:"relative"}},i.createElement(t.a,{href:"#the-building-block-restricted-boltzmann-machines","aria-label":"the building block restricted boltzmann machines permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"The building block: restricted Boltzmann machines"),"\n",i.createElement(t.p,null,"One cannot discuss DBNs without first understanding the core building block upon which these networks are assembled: the Restricted Boltzmann Machine (RBM). An RBM is a special type of Markov Random Field (MRF) that links visible variables to hidden variables in a bipartite manner. Historically, RBMs have been used for feature learning, dimensionality reduction, and as generative models capable of sampling data resembling the distribution of the training set. In essence, an RBM aims to learn the joint distribution of the visible variables ",i.createElement(l.A,{text:"\\(v\\)"})," and hidden variables ",i.createElement(l.A,{text:"\\(h\\)"}),"."),"\n",i.createElement(t.h3,{id:"energy-based-formulation",style:{position:"relative"}},i.createElement(t.a,{href:"#energy-based-formulation","aria-label":"energy based formulation permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Energy-based formulation"),"\n",i.createElement(t.p,null,"An RBM is an energy-based model: it assigns a scalar energy to each configuration of visible and hidden variables, and then attempts to configure its parameters such that observed data configurations have low energy relative to configurations that do not appear often in the data. The probability of a particular joint configuration ",i.createElement(l.A,{text:"\\((v, h)\\)"})," is inversely related to the exponential of the energy:"),"\n",i.createElement(l.A,{text:"\\[\nP(v, h) = \\frac{e^{-E(v, h)}}{Z}\n\\]"}),"\n",i.createElement(t.p,null,"Here, ",i.createElement(l.A,{text:"\\(E(v, h)\\)"})," is the energy function, and ",i.createElement(l.A,{text:"\\(Z\\)"})," denotes the partition function — a normalization constant that is typically very expensive to compute exactly, as it involves summing or integrating over all possible configurations of both ",i.createElement(l.A,{text:"\\(v\\)"})," and ",i.createElement(l.A,{text:"\\(h\\)"}),". For a standard binary RBM with visible units ",i.createElement(l.A,{text:"\\(v_i\\in \\{0,1\\}\\)"})," and hidden units ",i.createElement(l.A,{text:"\\(h_j\\in \\{0,1\\}\\)"}),", the energy function is commonly written as:"),"\n",i.createElement(l.A,{text:"\\[\nE(v, h) = -\\sum_{i=1}^{I} \\sum_{j=1}^{J} v_i W_{ij} h_j \n- \\sum_{i=1}^{I} b_i v_i \n- \\sum_{j=1}^{J} c_j h_j,\n\\]"}),"\n",i.createElement(t.p,null,"where:"),"\n",i.createElement(t.ul,null,"\n",i.createElement(t.li,null,i.createElement(l.A,{text:"\\(W_{ij}\\)"})," is the weight connecting visible unit ",i.createElement(l.A,{text:"\\(v_i\\)"})," to hidden unit ",i.createElement(l.A,{text:"\\(h_j\\)"}),"."),"\n",i.createElement(t.li,null,i.createElement(l.A,{text:"\\(b_i\\)"})," is the bias term for visible unit ",i.createElement(l.A,{text:"\\(v_i\\)"}),"."),"\n",i.createElement(t.li,null,i.createElement(l.A,{text:"\\(c_j\\)"})," is the bias term for hidden unit ",i.createElement(l.A,{text:"\\(h_j\\)"}),"."),"\n",i.createElement(t.li,null,i.createElement(l.A,{text:"\\(I\\)"})," and ",i.createElement(l.A,{text:"\\(J\\)"})," denote the number of visible and hidden units, respectively."),"\n"),"\n",i.createElement(t.p,null,"Intuitively, configurations ",i.createElement(l.A,{text:"\\((v, h)\\)"}),' that align well with the learned weights and biases have lower energy, and thus higher probability under the model. RBMs are "restricted" in the sense that connections among visible units themselves are absent, and similarly, there are no connections among hidden units — only between visible and hidden. This bipartite restriction ensures that given the visible units, the hidden units are conditionally independent, which in turn simplifies sampling and inference computations.'),"\n",i.createElement(t.h3,{id:"contrastive-divergence",style:{position:"relative"}},i.createElement(t.a,{href:"#contrastive-divergence","aria-label":"contrastive divergence permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Contrastive divergence"),"\n",i.createElement(t.p,null,"Although powerful as a conceptual tool, training an RBM requires approximating the gradient of the log-likelihood of the data with respect to the parameters ",i.createElement(l.A,{text:"\\((W,b,c)\\)"}),". The main obstacle is computing or approximating the partition function ",i.createElement(l.A,{text:"\\(Z\\)"}),". Geoffrey Hinton proposed a solution known as Contrastive Divergence (CD), which typically uses a small number of Gibbs sampling steps to get approximate negative samples. The idea is to perform a quick procedure:"),"\n",i.createElement(t.ol,null,"\n",i.createElement(t.li,null,"Start with a batch of observed data, ",i.createElement(l.A,{text:"\\(\\{v_i\\}\\)"}),"."),"\n",i.createElement(t.li,null,"Sample the hidden state ",i.createElement(l.A,{text:"\\(h\\)"})," given ",i.createElement(l.A,{text:"\\(v\\)"}),"."),"\n",i.createElement(t.li,null,'Sample a "reconstruction" ',i.createElement(l.A,{text:"\\(\\tilde{v}\\)"})," by sampling from the conditional distribution of the visible units given those hidden states."),"\n",i.createElement(t.li,null,"Use the difference in correlations between ",i.createElement(l.A,{text:"\\((v, h)\\)"})," and ",i.createElement(l.A,{text:"\\((\\tilde{v}, \\tilde{h})\\)"})," as an approximation to the gradient of the log-likelihood."),"\n"),"\n",i.createElement(t.p,null,"The update rule for weight ",i.createElement(l.A,{text:"\\(W_{ij}\\)"})," can be informally written as:"),"\n",i.createElement(l.A,{text:"\\[\n\\Delta W_{ij} \\propto \\langle v_i h_j \\rangle_{\\text{data}} - \\langle v_i h_j \\rangle_{\\text{recon}},\n\\]"}),"\n",i.createElement(t.p,null,"where ",i.createElement(l.A,{text:"\\(\\langle \\cdot \\rangle_{\\text{data}}\\)"})," is the expectation with respect to the observed data distribution, and ",i.createElement(l.A,{text:"\\(\\langle \\cdot \\rangle_{\\text{recon}}\\)"})," is the expectation under the model distribution determined by the reconstructed samples. Similarly, biases in ",i.createElement(l.A,{text:"\\(b\\)"})," and ",i.createElement(l.A,{text:"\\(c\\)"})," undergo analogous update steps based on the difference between data-driven and reconstruction-driven activation frequencies in the visible and hidden units, respectively."),"\n",i.createElement(t.p,null,'Readers should keep in mind that Contrastive Divergence is only an approximation, and more sophisticated methods — such as Persistent Contrastive Divergence (PCD) or parallel tempering — have been proposed to further refine the RBM\'s training. However, even the approximate CD algorithm has proved to be sufficient for many practical scenarios. This design forms the basis on which DBNs are built, as each "layer" in a DBN is typically an RBM or a slight variant.'),"\n",i.createElement(t.h2,{id:"dbns-a-deeper-perspective",style:{position:"relative"}},i.createElement(t.a,{href:"#dbns-a-deeper-perspective","aria-label":"dbns a deeper perspective permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"DBNs: a deeper perspective"),"\n",i.createElement(t.p,null,'DBNs rose to prominence as a method of training deep networks at a time when backpropagation alone struggled for success when dealing with multiple hidden layers. The trick was to train each layer in an unsupervised fashion as an RBM, then "stack" these RBMs to form a deeper, hierarchical representation of the data. This generative pretraining phase would subsequently prime the network weights, placing them in a region of parameter space that is more amenable to the final step of supervised fine-tuning.'),"\n",i.createElement(t.h3,{id:"graphical-representation",style:{position:"relative"}},i.createElement(t.a,{href:"#graphical-representation","aria-label":"graphical representation permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Graphical representation"),"\n",i.createElement(t.p,null,"A classical representation of a DBN shows multiple layers of hidden units, with each layer forming an RBM with the layer below it, except for the top two layers that jointly form an undirected bipartite graph. Put differently:"),"\n",i.createElement(t.ul,null,"\n",i.createElement(t.li,null,"The connections between the top hidden layer and the layer just below it are undirected and form an RBM-like structure."),"\n",i.createElement(t.li,null,"The lower layers (those closer to the visible units) assume a directed, top-down generative process."),"\n"),"\n",i.createElement(t.p,null,"Indeed, the architecture can be described as having a hidden layer ",i.createElement(l.A,{text:"\\(h^{(1)}\\)"})," that connects directly to the visible units ",i.createElement(l.A,{text:"\\(v\\)"}),", then another layer ",i.createElement(l.A,{text:"\\(h^{(2)}\\)"})," that connects to ",i.createElement(l.A,{text:"\\(h^{(1)}\\)"}),', and so on. Typically, each layer is trained as if it were a standalone RBM on top of the "features" provided by the layer below. In a sense, the topmost RBM sets the overall generative model for data drawn from the distribution at that top layer, but the entire network can be "unrolled" to produce or explain data at the visible level.'),"\n",i.createElement(a,{alt:"DBN schematic",path:"",caption:"An example schematic of a DBN's stacked RBMs, illustrating bipartite connections between adjacent layers.",zoom:"false"}),"\n",i.createElement(t.p,null,"This hierarchical generative process is one of the defining traits of DBNs. In principle, one can sample from the model by first drawing samples from the top-level RBM, and then propagating those samples downward, stochastically reconstructing the visible units in each subsequent layer until the bottom-most (visible) layer is reached."),"\n",i.createElement(t.h3,{id:"generative-interpretation",style:{position:"relative"}},i.createElement(t.a,{href:"#generative-interpretation","aria-label":"generative interpretation permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Generative interpretation"),"\n",i.createElement(t.p,null,"From a probabilistic viewpoint, DBNs can be seen as providing a joint distribution over the visible units ",i.createElement(l.A,{text:"\\(v\\)"})," and all hidden units ",i.createElement(l.A,{text:"\\(h^{(1)}, h^{(2)}, \\dots\\)"}),". One way to write this (in a simplified form for two hidden layers, though it generalizes easily) is:"),"\n",i.createElement(l.A,{text:"\\[\nP(v, h^{(1)}, h^{(2)}) = P(h^{(2)} \\mid h^{(1)}) P(h^{(1)}, v),\n\\]"}),"\n",i.createElement(t.p,null,"where ",i.createElement(l.A,{text:"\\(P(h^{(1)}, v)\\)"})," is defined by the RBM energy between ",i.createElement(l.A,{text:"\\(h^{(1)}\\)"})," and ",i.createElement(l.A,{text:"\\(v\\)"}),", and ",i.createElement(l.A,{text:"\\(P(h^{(2)} \\mid h^{(1)})\\)"})," is a conditional distribution typically parameterized in a directed fashion (like a sigmoid transformation if we are dealing with binary units). For deeper DBNs, one includes additional factors for each extra layer. The topmost layers often form a full RBM again, merging the final layer of hidden units in an undirected manner."),"\n",i.createElement(t.p,null,"Conceptually, each layer is meant to capture a progressively abstract set of latent features in the data. The lower-level RBM might encode local correlations in the raw input space, the next layer might capture higher-level correlations among those extracted features, and so on. While modern practice focuses on backprop-tuned networks implemented with standard frameworks like TensorFlow or PyTorch, the DBN approach was a crucial demonstration that purely unsupervised, layer-wise pretraining could help to effectively initialize deep architecture parameters."),"\n",i.createElement(t.h2,{id:"training-deep-belief-networks",style:{position:"relative"}},i.createElement(t.a,{href:"#training-deep-belief-networks","aria-label":"training deep belief networks permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Training deep belief networks"),"\n",i.createElement(t.h3,{id:"layer-by-layer-pretraining",style:{position:"relative"}},i.createElement(t.a,{href:"#layer-by-layer-pretraining","aria-label":"layer by layer pretraining permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Layer-by-layer pretraining"),"\n",i.createElement(t.p,null,"The key insight in building a DBN is to train each layer of the network as a standalone RBM in a greedy, layer-wise manner. Suppose we start with the visible layer ",i.createElement(l.A,{text:"\\(v\\)"})," and a hidden layer ",i.createElement(l.A,{text:"\\(h^{(1)}\\)"}),". We first treat ",i.createElement(l.A,{text:"\\((v, h^{(1)})\\)"})," as an RBM, training it using Contrastive Divergence. Once that training finishes, we take the hidden layer ",i.createElement(l.A,{text:"\\(h^{(1)}\\)"}),' and treat it as "data" or "visible" units for the second RBM, whose hidden layer is ',i.createElement(l.A,{text:"\\(h^{(2)}\\)"}),". We again train the new RBM with CD, effectively learning weights ",i.createElement(l.A,{text:"\\(W^{(2)}\\)"})," that connect ",i.createElement(l.A,{text:"\\(h^{(1)}\\)"})," and ",i.createElement(l.A,{text:"\\(h^{(2)}\\)"}),"."),"\n",i.createElement(t.p,null,'We continue stacking layers. Each newly introduced hidden layer is learned as an RBM on top of the features output by the previously trained layer. This approach is possible because the hidden units of an RBM can be stochastically sampled (or sometimes deterministically set to their mean activation), producing a representation that can serve as the "input" to the next layer. The advantage of this method is that each layer is trained independently of the others, which simplifies the learning dynamics significantly. It also means that each layer can be learned with unsupervised data, ignoring labels for the moment. In situations with large amounts of unlabeled data but relatively few labeled examples, this unsupervised pretraining can be enormously beneficial.'),"\n",i.createElement(t.p,null,"The theoretical explanation behind why greedy layer-wise pretraining worked so well is that each layer attempts to improve the log-likelihood bound on the data distribution. Under certain assumptions, adding a new RBM on top of the previous layers can only improve (or at worst, keep the same) the lower bound on the log probability of the training data (Hinton and gang, 2006, Science). This property gave DBNs a theoretical advantage that purely random initializations for deep MLPs (multilayer perceptrons) did not necessarily share."),"\n",i.createElement(t.h3,{id:"fine-tuning-with-backprop",style:{position:"relative"}},i.createElement(t.a,{href:"#fine-tuning-with-backprop","aria-label":"fine tuning with backprop permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Fine-tuning with backprop"),"\n",i.createElement(t.p,null,'After the stacking of RBMs, we typically have a multi-layer network whose parameters are a good starting point to solve tasks of interest. If the task is classification or regression, we can "unroll" the generative network, append an output layer for the labeled task, and use backpropagation to fine-tune all the weights in a supervised manner. This final phase modifies the stacked RBM parameters to optimize the usual supervised loss function (for instance, cross-entropy in classification tasks), but crucially, from a more favorable initialization that has already captured meaningful structure in the data.'),"\n",i.createElement(t.p,null,"Alternatively, if the primary objective is generative modeling, one can use additional approximate training steps (like further Contrastive Divergence or a variety of sampling-based fine-tuning approaches) while carefully adjusting how the layers interact in a unified generative model. In many classical demos, the discriminative fine-tuning step is shown to drastically improve classification accuracy compared to networks that have no unsupervised pretraining."),"\n",i.createElement(t.p,null,"This fusion of unsupervised pretraining followed by supervised fine-tuning compensated for gradient-based difficulties in very deep networks. Although modern regularization techniques and powerful GPUs now allow us to train deep architectures from scratch, the DBN approach is an elegant demonstration of how generative pretraining plus a small supervised step can transform learning in the presence of limited labeled data."),"\n",i.createElement(t.h3,{id:"potential-variants",style:{position:"relative"}},i.createElement(t.a,{href:"#potential-variants","aria-label":"potential variants permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Potential variants"),"\n",i.createElement(t.p,null,"Researchers have explored numerous variations on standard DBNs. For instance, one could build Gaussian-Bernoulli RBMs if the visible data consists of continuous values instead of binary ones. Similarly, if one is dealing with count data or Poisson-like distributions, specialized RBM variants and corresponding training routines may be designed. Persistent Contrastive Divergence can be used at each layer instead of the basic CD-k approach, which can yield more accurate estimates of the model distribution. Parallel tempering or advanced MCMC methods can also help address mixing problems in deeper or more complicated RBMs."),"\n",i.createElement(t.p,null,"Moreover, hybrid DBN architectures have been employed in tasks such as speech recognition (e.g., pretraining deep networks for phoneme classification) or in collaborative filtering for recommender systems. While these tasks are typically performed today using more direct end-to-end approaches, many of the insights gleaned from the DBN era remain valuable. Understanding how to fine-tune generative pretraining for a discriminative objective is a recurring theme in more modern frameworks like BERT (in NLP) or self-supervised learning approaches in vision, albeit framed quite differently in contemporary architectures."),"\n",i.createElement(t.h2,{id:"detailed-architecture",style:{position:"relative"}},i.createElement(t.a,{href:"#detailed-architecture","aria-label":"detailed architecture permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Detailed architecture"),"\n",i.createElement(t.h3,{id:"representation-of-the-joint-distribution",style:{position:"relative"}},i.createElement(t.a,{href:"#representation-of-the-joint-distribution","aria-label":"representation of the joint distribution permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Representation of the joint distribution"),"\n",i.createElement(t.p,null,"Formally, let ",i.createElement(l.A,{text:"\\(v\\)"})," denote the visible layer (the observed data) and let ",i.createElement(l.A,{text:"\\(\\{h^{(l)}\\}_{l=1}^L\\)"})," denote the hidden layers for a DBN with ",i.createElement(l.A,{text:"\\(L\\)"})," hidden layers. The top two layers typically form an RBM with an undirected connection:"),"\n",i.createElement(l.A,{text:"\\[\nP(h^{(L)}, h^{(L-1)}) = \\frac{1}{Z} e^{-E(h^{(L)}, h^{(L-1)})},\n\\]"}),"\n",i.createElement(t.p,null,"where ",i.createElement(l.A,{text:"\\(E(\\cdot)\\)"})," is the RBM energy function for these top layers, and ",i.createElement(l.A,{text:"\\(Z\\)"})," is the partition function for that part of the model. The lower layers are modeled in a directed manner:"),"\n",i.createElement(l.A,{text:"\\[\nP(h^{(l-1)} \\mid h^{(l)}) = \\prod_i P(h^{(l-1)}_i \\mid h^{(l)}),\n\\]"}),"\n",i.createElement(t.p,null,"where each hidden unit in layer ",i.createElement(l.A,{text:"\\((l-1)\\)"})," typically has a conditional distribution that can be parameterized by a logistic or similar non-linear function of the units in layer ",i.createElement(l.A,{text:"\\(l\\)"}),". Finally, the joint distribution of the entire DBN can be factored (in the case of a two-hidden-layer DBN, for illustration) as:"),"\n",i.createElement(l.A,{text:"\\[\nP(v, h^{(1)}, h^{(2)}) = P(h^{(2)}, h^{(1)}) \\prod_{i} P(v_i \\mid h^{(1)}).\n\\]"}),"\n",i.createElement(t.p,null,"In deeper DBNs, a chain of conditional distributions covers the generative flow from the topmost hidden layer all the way down to the visible layer. This approach leads to a hierarchical representation in which top-level concepts can be refined into mid-level features, and finally into pixel-level or raw input-level features."),"\n",i.createElement(t.h3,{id:"inference-procedure",style:{position:"relative"}},i.createElement(t.a,{href:"#inference-procedure","aria-label":"inference procedure permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Inference procedure"),"\n",i.createElement(t.p,null,"Within a trained DBN, inference (i.e., computing ",i.createElement(l.A,{text:"\\(P(h^{(l)} \\mid v)\\)"}),") is not trivial, as it requires marginalizing or sampling from hidden variables in a multi-layer hierarchical setup. In practice, one often applies a mean-field approximation (replacing hidden states by their mean activation rather than sampling stochastically) or employs block Gibbs sampling if we want to reconstruct the visible data or sample new data from the model."),"\n",i.createElement(t.p,null,'During the pretraining phase, each layer is effectively learned to perform approximate inference from the distribution of the layer below it, thanks to the RBM\'s bipartite property. This local approach bypasses the need for global inference across the entire network. Once all layers are pretrained, one can treat the entire DBN as a generative model by sampling from the top layer (the topmost RBM), and then successively performing downward passes that convert those higher-level activations into lower-level visible patterns. The flexibility and modularity of RBMs in each layer make DBNs a compelling study in how local generative assumptions can be "stacked" to approach globally coherent models.'),"\n",i.createElement(t.h2,{id:"implementation-details",style:{position:"relative"}},i.createElement(t.a,{href:"#implementation-details","aria-label":"implementation details permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Implementation details"),"\n",i.createElement(t.p,null,"While DBNs have fallen out of the mainstream for large-scale tasks, there is still substantial educational value in implementing a small DBN from scratch or using an existing library. This helps clarify the process of stacking RBMs and the subsequent fine-tuning step. Below is a simplified Python code snippet using PyTorch-like syntax to illustrate the conceptual approach (note that this is a toy example and omits many real-world optimizations such as persistent chains, advanced hyperparameter settings, etc.):"),"\n",i.createElement(r.A,{text:"\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\n\nclass RBM(nn.Module):\n    def __init__(self, n_visible, n_hidden, lr=0.01):\n        super().__init__()\n        self.n_visible = n_visible\n        self.n_hidden = n_hidden\n        self.lr = lr\n        \n        # Parameters\n        self.W = nn.Parameter(torch.randn(n_visible, n_hidden) * 0.1)\n        self.v_bias = nn.Parameter(torch.zeros(n_visible))\n        self.h_bias = nn.Parameter(torch.zeros(n_hidden))\n\n    def forward(self, v):\n        # Usually in an RBM we don't define a typical forward pass\n        # We'll define sampling methods instead\n        return self.sample_h(v)\n    \n    def sample_h(self, v):\n        # Probability of h=1 given v\n        p_h_given_v = torch.sigmoid(torch.matmul(v, self.W) + self.h_bias)\n        return p_h_given_v, torch.bernoulli(p_h_given_v)\n\n    def sample_v(self, h):\n        # Probability of v=1 given h\n        p_v_given_h = torch.sigmoid(torch.matmul(h, self.W.t()) + self.v_bias)\n        return p_v_given_h, torch.bernoulli(p_v_given_h)\n\n    def contrastive_divergence(self, v):\n        # Positive phase\n        p_h_given_v0, h0 = self.sample_h(v)\n\n        # Negative phase (reconstruction)\n        p_v_given_h0, v1 = self.sample_v(h0)\n        p_h_given_v1, h1 = self.sample_h(v1)\n\n        # Update parameters\n        positive_grad = torch.matmul(v.t(), p_h_given_v0)\n        negative_grad = torch.matmul(v1.t(), p_h_given_v1)\n\n        self.W.grad = -(positive_grad - negative_grad)\n        self.v_bias.grad = -(torch.sum(v - v1, dim=0))\n        self.h_bias.grad = -(torch.sum(p_h_given_v0 - p_h_given_v1, dim=0))\n\n        # Gradient descent step\n        with torch.no_grad():\n            self.W -= self.lr * self.W.grad\n            self.v_bias -= self.lr * self.v_bias.grad\n            self.h_bias -= self.lr * self.h_bias.grad\n            \n        # Zero gradients after update\n        self.W.grad.fill_(0)\n        self.v_bias.grad.fill_(0)\n        self.h_bias.grad.fill_(0)\n\nclass DBN:\n    def __init__(self, layer_sizes, lr=0.01, epochs=10):\n        # layer_sizes: list like [n_visible, n_hidden1, n_hidden2, ...]\n        self.rbm_layers = []\n        self.epochs = epochs\n        for i in range(len(layer_sizes) - 1):\n            rbm = RBM(layer_sizes[i], layer_sizes[i+1], lr=lr)\n            self.rbm_layers.append(rbm)\n\n    def pretrain(self, data):\n        # data expected as a torch tensor of shape (num_samples, n_visible)\n        for l, rbm in enumerate(self.rbm_layers):\n            print(f\"Training RBM layer {l+1}/{len(self.rbm_layers)}...\")\n            layer_input = data\n            # Train the RBM\n            for epoch in range(self.epochs):\n                for x in layer_input:\n                    x = x.view(1, -1)  # reshape single sample\n                    rbm.contrastive_divergence(x)\n            # After training, we sample the hidden representation \n            # to serve as input to the next layer\n            p_h, h_sample = rbm.sample_h(layer_input)\n            data = p_h.detach()\n"}),"\n",i.createElement(t.p,null,"In this illustrative snippet, the DBN class has a list of RBMs stacked one after another. The pretrain method shows how each RBM is trained in a greedy, layer-wise fashion, using the output (hidden representation) from the previous layer as input for the next. In a more complete code, one might add optional fine-tuning steps (e.g., a final classification layer on top) using standard backprop. Also, note that for real projects, using a specialized library or a more advanced approach to sampling and hyperparameter optimization is strongly recommended."),"\n",i.createElement(t.h2,{id:"advanced-aspects",style:{position:"relative"}},i.createElement(t.a,{href:"#advanced-aspects","aria-label":"advanced aspects permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Advanced aspects"),"\n",i.createElement(t.h3,{id:"deeper-theoretical-insights",style:{position:"relative"}},i.createElement(t.a,{href:"#deeper-theoretical-insights","aria-label":"deeper theoretical insights permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Deeper theoretical insights"),"\n",i.createElement(t.p,null,"DBNs introduced many researchers to the idea that unsupervised pretraining can discover hierarchical features more effectively than purely random initialization or shallow pretraining. Hinton and gang (Science 2006) demonstrated that if one views each RBM as an undirected model that improves a tractable bound on the log-likelihood of the data, then stacking these RBMs to form a DBN amounts to successively refining the representation of the input distribution. Each layer's training can be seen as partially unrolling a variational bound on the data likelihood, ensuring that the generative model always moves in a direction of improving that bound (at least in theory)."),"\n",i.createElement(t.p,null,"Besides offering a generative perspective, DBNs also clarified the role of local energy-based learning. By local, we mean that each layer's training mostly depends on local correlations (the adjacency between that layer's visible and hidden units) rather than having to backpropagate a global gradient. This local approach helped bypass issues of vanishing or exploding gradients that hamper older attempts at training deep networks with backprop alone."),"\n",i.createElement(t.h3,{id:"potential-pitfalls",style:{position:"relative"}},i.createElement(t.a,{href:"#potential-pitfalls","aria-label":"potential pitfalls permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Potential pitfalls"),"\n",i.createElement(t.p,null,"Despite their elegance, DBNs are not without pitfalls. First, training multiple RBMs can be computationally expensive, especially if large-scale data sets are used or if many layers are stacked. Contrastive Divergence is only an approximate method, which may lead to suboptimal models if not carefully tuned. Additionally, the requirement to compute the partition function (or approximate it) can become more challenging in higher-dimensional latent spaces."),"\n",i.createElement(t.p,null,"Another subtle issue is that any mismatch or poor initialization in lower layers can propagate to higher layers, creating an accumulation of errors. While each layer is locally pretrained, the global coherence of the entire DBN still relies on the final fine-tuning steps. If the transitions between layers do not produce progressively more informative representations, the entire system may fail to deliver the expected gains."),"\n",i.createElement(t.p,null,"In practical contexts, DBNs have largely been overshadowed by purely backprop-driven deep neural networks, especially once large labeled datasets and more sophisticated regularization methods (like dropout or batch normalization) came to prominence. Moreover, new generative frameworks such as Variational Autoencoders (VAEs), Generative Adversarial Networks (GANs), and diffusion models have taken center stage for tasks that demand flexible or high-fidelity generative capabilities. Nonetheless, DBNs remain a pivotal stepping stone, bridging old-school generative neural networks and the more advanced architectures that followed."),"\n",i.createElement(t.h3,{id:"relationship-with-modern-architectures",style:{position:"relative"}},i.createElement(t.a,{href:"#relationship-with-modern-architectures","aria-label":"relationship with modern architectures permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Relationship with modern architectures"),"\n",i.createElement(t.p,null,"The process of layer-wise unsupervised pretraining introduced by DBNs helped spark renewed interest in deep learning, culminating in the widespread success of myriad deep architectures that rely almost exclusively on backpropagation. Furthermore, the concept of learning hierarchical representations from unlabeled data found a new incarnation in large language models, computer vision self-supervised learning, and beyond. In contemporary practice, we often see large-scale autoencoder or transformer-based approaches that aim to capture structure in unlabeled data, somewhat echoing the original impetus of DBNs — that deeper networks can discover meaningful structure and that pretraining can substantially help with downstream tasks."),"\n",i.createElement(t.p,null,"Hence, while DBNs themselves might not be the main technique now, their historical significance is immense, and their design continues to influence how we think about constructing and optimizing multi-layer generative models. Contemporary exploration of energy-based models also has ties to RBMs and DBNs, albeit with more advanced sampling or flow-based approaches to circumvent the limitations of older methods."),"\n",i.createElement(t.h2,{id:"applications",style:{position:"relative"}},i.createElement(t.a,{href:"#applications","aria-label":"applications permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Applications"),"\n",i.createElement(t.h3,{id:"classification-with-dbns",style:{position:"relative"}},i.createElement(t.a,{href:"#classification-with-dbns","aria-label":"classification with dbns permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Classification with DBNs"),"\n",i.createElement(t.p,null,"Historically, one of the benchmark applications of DBNs was in classification tasks, especially when labeled data was scarce. After unsupervised pretraining of each RBM layer, one could append a small output layer (for example, logistic regression or a small MLP) on top of the final hidden layer. The entire network, from input to output, would then be fine-tuned with standard backprop under a supervised loss function. This approach often significantly outperformed random initialization in early deep neural networks (prior to widespread adoption of ReLUs, batch normalization, and other enhancements)."),"\n",i.createElement(t.p,null,'For instance, in digit classification tasks such as MNIST, DBNs were among the first deep architectures to achieve low error rates, demonstrating that deep hierarchical feature learning can be highly beneficial. They also provided interpretability angles: one could "visualize" what each RBM layer was capturing by examining the learned weights or by performing reconstructions. Although overshadowed by purely end-to-end trained deep convolutional networks, the DBN approach to classification stands as a historically important demonstration that deeper networks can learn better features.'),"\n",i.createElement(t.h3,{id:"collaborative-filtering",style:{position:"relative"}},i.createElement(t.a,{href:"#collaborative-filtering","aria-label":"collaborative filtering permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Collaborative filtering"),"\n",i.createElement(t.p,null,"Before neural collaborative filtering methods dominated, DBNs (or more specifically stacks of RBMs) were adapted to address collaborative filtering tasks. In these scenarios, an RBM might be used to model user preference vectors (visible units) and latent features (hidden units), capturing the distribution of user-item interactions. By stacking multiple RBMs, the network could capture increasingly complex patterns in how users rate items or interact with them."),"\n",i.createElement(t.p,null,"Salakhutdinov and gang introduced RBM-based approaches to collaborative filtering around 2007, demonstrating improvements over classical methods like matrix factorization in certain tasks. The logic behind these gains is that an RBM-based model can capture non-trivial correlations in user-item interactions, thus discovering underlying patterns that a straightforward linear factorization might overlook. Stacking multiple RBMs might further refine these patterns, leading to more nuanced and accurate recommendations."),"\n",i.createElement(t.h3,{id:"representation-learning",style:{position:"relative"}},i.createElement(t.a,{href:"#representation-learning","aria-label":"representation learning permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Representation learning"),"\n",i.createElement(t.p,null,'Beyond supervised classification or collaborative filtering, DBNs were also used as feature extractors in unsupervised settings. By taking a trained DBN and "clamping" the visible data, one could examine the activation of hidden layers as informative representations of the input. These representations could then be used in subsequent tasks such as clustering, anomaly detection, or simply as a dimensionality reduction approach.'),"\n",i.createElement(t.p,null,"Compared to linear dimensionality reduction approaches (like PCA), DBNs can capture more intricate non-linear structures in the data, particularly if sufficient layers are stacked and the model is well-trained. Some early results demonstrated that spectral clustering or other classical algorithms could exhibit improved performance when applied to DBN-based embeddings. Such representations can also serve as a precursor to transfer learning, where a DBN pretrained on one domain is fine-tuned or adapted to a new but related domain. Although these uses are less common in today's CNN-heavy or transformer-heavy world, the underlying principle persists: that unsupervised representation learning can unlock hidden structure in data, providing a robust initialization for downstream tasks."),"\n",i.createElement(t.h2,{id:"conclusion",style:{position:"relative"}},i.createElement(t.a,{href:"#conclusion","aria-label":"conclusion permalink",className:"anchor before"},i.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Conclusion"),"\n",i.createElement(t.p,null,"Deep Belief Networks emerged as a transformative idea that catalyzed the modern deep learning revolution. By stacking RBMs and refining them with unsupervised pretraining, DBNs effectively showcased that it was indeed possible to train multi-layer neural networks and achieve impressive performance — at a time when many were still skeptical of deep architectures. The synergy of local energy-based training (per layer) combined with a global fine-tuning step was crucial to overcoming major optimization barriers."),"\n",i.createElement(t.p,null,"Although DBNs have become less common in the face of powerful end-to-end deep networks, they remain a key milestone in the evolution of modern machine learning. Their generative foundation, grounded in probabilistic graphical modeling, still resonates in current research that explores methods for unsupervised or self-supervised learning. The energy-based perspective that underpins RBMs and DBNs likewise fosters understanding of advanced top-down and bottom-up interactions in hierarchical systems."),"\n",i.createElement(t.p,null,"Moreover, while not ubiquitous in production-level applications today, DBNs continue to be a superb teaching tool for illustrating how layered representations can be learned in a more biologically inspired and generative manner. The historical achievements of DBNs paved the way for future innovations — from breakthroughs in image recognition through autoencoders and convolutional architectures, to the realm of big data analytics, speech-to-text pipelines, and large-scale language models leveraging billions of parameters."),"\n",i.createElement(t.p,null,"I encourage any researcher or engineer who wishes to grasp the fundamental principles of deep generative architectures to revisit DBNs, at least for educational and conceptual clarity. By unpacking how local, layer-wise energy-based training merges into a global model, one gains broader insight into the potential (and also the challenges) of building hierarchical feature detectors that reflect the high-level structure of data. Learning about DBNs helps fortify an understanding of how the field of deep learning grew: from improbable attempts at training multi-layer networks, through the surprising success of generative pretraining, and into the deep neural network era of transformative performance across a vast spectrum of tasks."))}var o=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,n.RP)(),e.components);return t?i.createElement(t,e,i.createElement(s,e)):s(e)};var c=a(54506),h=a(88864),d=a(58481),p=a.n(d),m=a(5984),u=a(43672),g=a(27042),f=a(72031),v=a(81817),b=a(27105),y=a(17265),w=a(2043),E=a(95751),_=a(94328),x=a(80791),k=a(78137);const B=e=>{let{toc:t}=e;if(!t||!t.items)return null;return i.createElement("nav",{className:x.R},i.createElement("ul",null,t.items.map(((e,t)=>i.createElement("li",{key:t},i.createElement("a",{href:e.url,onClick:t=>((e,t)=>{e.preventDefault();const a=t.replace("#",""),n=document.getElementById(a);n&&n.scrollIntoView({behavior:"smooth",block:"start"})})(t,e.url)},e.title),e.items&&i.createElement(B,{toc:{items:e.items}}))))))};function S(e){let{data:{mdx:t,allMdx:r,allPostImages:l},children:s}=e;const{frontmatter:o,body:h,tableOfContents:d}=t,f=o.index,x=o.slug.split("/")[1],S=r.nodes.filter((e=>e.frontmatter.slug.includes(`/${x}/`))).sort(((e,t)=>e.frontmatter.index-t.frontmatter.index)),M=S.findIndex((e=>e.frontmatter.index===f)),N=S[M+1],A=S[M-1],H=o.slug.replace(/\/$/,""),T=/[^/]*$/.exec(H)[0],D=`posts/${x}/content/${T}/`,{0:z,1:R}=(0,i.useState)(o.flagWideLayoutByDefault),{0:C,1:I}=(0,i.useState)(!1);var P;(0,i.useEffect)((()=>{I(!0);const e=setTimeout((()=>I(!1)),340);return()=>clearTimeout(e)}),[z]),"adventures"===x?P=y.cb:"research"===x?P=y.Qh:"thoughts"===x&&(P=y.T6);const V=p()(h).replace(/import .*? from .*?;/g,"").replace(/<.*?>/g,"").replace(/\{\/\*[\s\S]*?\*\/\}/g,"").trim().split(/\s+/).length,L=function(e){if(e<=10)return"~10 min";if(e<=20)return"~20 min";if(e<=30)return"~30 min";if(e<=40)return"~40 min";if(e<=50)return"~50 min";if(e<=60)return"~1 h";const t=Math.floor(e/60),a=e%60;return a<=30?`~${t}${a>0?".5":""} h`:`~${t+1} h`}(Math.ceil(V/P)+(o.extraReadTimeMin||0)),j=[{flag:o.flagDraft,component:()=>Promise.all([a.e(5850),a.e(9833)]).then(a.bind(a,49833))},{flag:o.flagMindfuckery,component:()=>Promise.all([a.e(5850),a.e(7805)]).then(a.bind(a,27805))},{flag:o.flagRewrite,component:()=>Promise.all([a.e(5850),a.e(8916)]).then(a.bind(a,78916))},{flag:o.flagOffensive,component:()=>Promise.all([a.e(5850),a.e(6731)]).then(a.bind(a,49112))},{flag:o.flagProfane,component:()=>Promise.all([a.e(5850),a.e(3336)]).then(a.bind(a,83336))},{flag:o.flagMultilingual,component:()=>Promise.all([a.e(5850),a.e(2343)]).then(a.bind(a,62343))},{flag:o.flagUnreliably,component:()=>Promise.all([a.e(5850),a.e(6865)]).then(a.bind(a,11627))},{flag:o.flagPolitical,component:()=>Promise.all([a.e(5850),a.e(4417)]).then(a.bind(a,24417))},{flag:o.flagCognitohazard,component:()=>Promise.all([a.e(5850),a.e(8669)]).then(a.bind(a,18669))},{flag:o.flagHidden,component:()=>Promise.all([a.e(5850),a.e(8124)]).then(a.bind(a,48124))}],{0:W,1:G}=(0,i.useState)([]);return(0,i.useEffect)((()=>{j.forEach((e=>{let{flag:t,component:a}=e;t&&a().then((e=>{G((t=>[].concat((0,c.A)(t),[e.default])))}))}))}),[]),i.createElement(g.P.div,{initial:{opacity:0},animate:{opacity:1},exit:{opacity:0},transition:{duration:.15}},i.createElement(v.A,{postNumber:o.index,date:o.date,updated:o.updated,readTime:L,difficulty:o.difficultyLevel,title:o.title,desc:o.desc,banner:o.banner,section:x,postKey:T,isMindfuckery:o.flagMindfuckery,mainTag:o.mainTag}),i.createElement("div",{style:{display:"flex",justifyContent:"flex-end",flexWrap:"wrap",maxWidth:"75%",marginLeft:"auto",paddingRight:"1vw",marginTop:"-6vh",marginBottom:"4vh"}},o.otherTags.map(((e,t)=>i.createElement("span",{key:t,className:`noselect ${k.MW}`,style:{margin:"0 5px 5px 0"}},e)))),i.createElement("div",{className:"postBody"},i.createElement(B,{toc:d})),i.createElement("br",null),i.createElement("div",{style:{margin:"0 10% -2vh 30%",textAlign:"right"}},i.createElement(g.P.button,{className:`noselect ${_.pb}`,id:_.xG,onClick:()=>{R(!z)},whileTap:{scale:.93}},i.createElement(g.P.div,{className:E.DJ,key:z,initial:{opacity:0},animate:{opacity:1},exit:{opacity:0},transition:{duration:.3,ease:"easeInOut"}},z?"Switch to default layout":"Switch to wide layout"))),i.createElement("br",null),i.createElement("div",{className:"postBody",style:{margin:z?"0 -14%":"",maxWidth:z?"200%":"",transition:"margin 1s ease, max-width 1s ease, padding 1s ease"}},i.createElement("div",{className:`${_.P_} ${C?_.Xn:_.qG}`},W.map(((e,t)=>i.createElement(e,{key:t}))),o.indexCourse?i.createElement(w.A,{index:o.indexCourse,category:o.courseCategoryName}):"",i.createElement(m.Z.Provider,{value:{images:l.nodes,basePath:D.replace(/\/$/,"")+"/"}},i.createElement(n.xA,{components:{Image:u.A}},s)))),i.createElement(b.A,{nextPost:N,lastPost:A,keyCurrent:T,section:x}))}function M(e){return i.createElement(S,e,i.createElement(o,e))}function N(e){var t,a,n,r,l;let{data:s}=e;const{frontmatter:o}=s.mdx,c=o.titleSEO||o.title,d=o.titleOG||c,p=o.titleTwitter||c,m=o.descSEO||o.desc,u=o.descOG||m,g=o.descTwitter||m,v=o.schemaType||"BlogPosting",b=o.keywordsSEO,y=o.date,w=o.updated||y,E=o.imageOG||(null===(t=o.banner)||void 0===t||null===(a=t.childImageSharp)||void 0===a||null===(n=a.gatsbyImageData)||void 0===n||null===(r=n.images)||void 0===r||null===(l=r.fallback)||void 0===l?void 0:l.src),_=o.imageAltOG||u,x=o.imageTwitter||E,k=o.imageAltTwitter||g,B=o.canonicalURL,S=o.flagHidden||!1,M=o.mainTag||"Posts",N=o.slug.split("/")[1]||"posts",{siteUrl:A}=(0,h.Q)(),H={"@context":"https://schema.org","@type":"BreadcrumbList",itemListElement:[{"@type":"ListItem",position:1,name:"Home",item:A},{"@type":"ListItem",position:2,name:M,item:`${A}/${o.slug.split("/")[1]}`},{"@type":"ListItem",position:3,name:c,item:`${A}${o.slug}`}]};return i.createElement(f.A,{title:c+" - avrtt.blog",titleOG:d,titleTwitter:p,description:m,descriptionOG:u,descriptionTwitter:g,schemaType:v,keywords:b,datePublished:y,dateModified:w,imageOG:E,imageAltOG:_,imageTwitter:x,imageAltTwitter:k,canonicalUrl:B,flagHidden:S,mainTag:M,section:N,type:"article"},i.createElement("script",{type:"application/ld+json"},JSON.stringify(H)))}},90548:function(e,t,a){var n=a(96540),i=a(7978);t.A=e=>{let{text:t}=e;return n.createElement(i.A,null,t)}}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-src-pages-posts-research-dbn-architecture-mdx-4949b0b662f4823e37c9.js.map