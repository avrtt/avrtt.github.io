{"version":3,"file":"2443-cb8f02fc569ffd40e979.js","mappings":"yMA+EA,MA7EUA,IAQH,IARI,SACTC,EAAQ,cACRC,EAAgB,IAAG,aACnBC,EAAe,IAAI,SACnBC,EAAW,CAAC,GAAI,IAAG,UACnBC,EAAY,UAAS,MACrBC,EAAK,UACLC,GACDP,EAEC,MAAMQ,GAAeC,EAAAA,EAAAA,QAAO,OACtB,EAACC,EAAM,EAACC,IAAYC,EAAAA,EAAAA,UAAS,IA0CnC,OAxCAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAWC,aAAY,KAC3B,GAAIP,EAAaQ,QAAS,CACxB,MAAM,MAAEC,EAAK,OAAEC,GAAWV,EAAaQ,QAAQG,wBAGzCC,EAAOC,KAAKC,SAAWL,EAAQ,GAC/BM,EAAMF,KAAKC,SAAWJ,EAAS,IAG9BM,EAASC,GAAWrB,EACrBsB,EAAOF,EAAUH,KAAKC,UAAYG,EAAUD,GAE5CG,EAAa,CACjBC,GAAIC,KAAKC,MAAQT,KAAKC,SACtBS,UAAWF,KAAKC,MAChBxB,MAAO,CACL0B,SAAU,WACVZ,OACAG,MACAU,QAAS,GACTC,SAAUR,EACVS,MAAO9B,EACP+B,cAAe,OACfC,UAAW,iBAAiBlC,wBAKhCQ,GAAU2B,IACR,MAAMR,EAAMD,KAAKC,MACXS,EAAWD,EAAKE,QAAOC,GAAKX,EAAMW,EAAEV,UAAY5B,IACtD,MAAM,GAANuC,QAAAC,EAAAA,EAAAA,GAAWJ,GAAQ,CAAEZ,GAAU,GAEnC,IACCzB,GAEH,MAAO,IAAM0C,cAAc9B,EAAS,GACnC,CAACZ,EAAeC,EAAcC,EAAUC,IAGzCwC,EAAAA,cAAA,QACEC,IAAKtC,EACLD,UAAWA,EACXD,MAAO,CAAE0B,SAAU,WAAYe,QAAS,kBAAmBzC,IAE1DL,EACAS,EAAMsC,KAAIP,GACTI,EAAAA,cAAA,QAAMI,IAAKR,EAAEb,GAAItB,MAAOmC,EAAEnC,OAAO,QAMnCuC,EAAAA,cAAA,aAAQ,+LAMH,E,sBCrDX,MAhBwBK,IAEvBL,EAAAA,cAAAA,EAAAA,SAAA,KACCA,EAAAA,cAACM,EAAC,CACD/C,SAAY,CAAC,GAAI,IACjBD,aAAgB,IAChBD,cAAiB,KAEjB2C,EAAAA,cAAA,OAAKO,MAAOC,EAAAA,IACXR,EAAAA,cAAA,UAAIA,EAAAA,cAACS,EAAAA,EAAW,CAACC,QAAQ,aAAaC,WAAW,MAAMC,YAAY,UAAS,IAACZ,EAAAA,cAAA,QAAMvC,MAAO,CAAE6B,MAAO,MAAOuB,WAAY,UAAW,kBACjIb,EAAAA,cAACc,EAAAA,EAAC,CAACC,KAAK,oQ,uCCdZ,MAAMC,EAAiB,CACrBC,MAAOA,IAAM,gCACbC,YAAaA,IAAM,gCACnBC,QAASA,IAAM,gCACfC,cAAeA,IAAM,gCACrBC,cAAeA,IAAM,gCACrBC,IAAKA,IAAM,gCACXC,UAAWA,IAAM,gCACjBC,gBAAiBA,IAAM,gCACvBC,MAAOA,IAAM,gCACbC,KAAMA,IAAM,gCACZC,SAAUA,IAAM,gCAChBC,aAAcA,IAAM,gCACpBC,UAAWA,IAAM,+BACjBC,WAAYA,IAAM,+BAClBC,aAAcA,IAAM,gCACpBC,SAAUA,IAAM,+BAChBC,WAAYA,IAAM,gCAClBC,WAAYA,IAAM,gCAClBC,YAAaA,IAAM,gCACnBC,UAAWA,IAAM,gCACjBC,UAAWA,IAAM,gCACjBC,gBAAiBA,IAAM,gCACvBC,gBAAiBA,IAAM,gCACvBC,aAAcA,IAAM,+BACpBC,OAAQA,IAAM,gCACdC,UAAWA,IAAM,gCACjBC,WAAYA,IAAM,gCAClBC,YAAaA,IAAM,gCACnBC,WAAYA,IAAM,gCAClBC,gBAAiBA,IAAM,gCACvBC,UAAWA,IAAM,gCACjBC,UAAWA,IAAM,gCACjBC,OAAQA,IAAM,gCACdC,WAAYA,IAAM,gCAClBC,SAAUA,IAAM,gCAChBC,WAAYA,IAAM,gCAClBC,SAAUA,IAAM,gCAChBC,aAAcA,IAAM,gCACpBC,SAAUA,IAAM,2BAChBC,UAAWA,IAAM,gCA0BnB,IAvBoBrG,IAA2D,IAA1D,QAAEuD,EAAO,WAAEC,EAAa,MAAK,YAAEC,EAAc,OAAOzD,EACvE,MAAM,EAACsG,EAAW,EAACC,IAAiB3F,EAAAA,EAAAA,UAAS,MAQ7C,IANAC,EAAAA,EAAAA,YAAU,KACJgD,EAAeN,IACjBM,EAAeN,KAAWiD,MAAMC,GAAWF,EAAcE,EAAOC,UAClE,GACC,CAACnD,KAEC+C,EAAY,OAAO,KAExB,MAAMK,EAAe,CACnB1F,MAAO,QACPC,OAAQ,QACR0F,cAAe,SACfC,UAAW,QACXpD,YAAaA,EACbD,WAAYA,GAGd,OAAOX,EAAAA,cAAA,OAAKiE,IAAI,UAAUxG,MAAOqG,EAAcI,IAAKT,GAAc,C","sources":["webpack://avrtt.blog/./src/components/Burn/index.js","webpack://avrtt.blog/./src/components/OffensiveNotice/index.js","webpack://avrtt.blog/./src/components/StickerPack/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst B = ({\n  children,\n  fireFrequency = 300, // ms\n  fireDuration = 3000, // ms\n  fireSize = [10, 18], // random font size between 10px and 20px\n  fireColor = '#FFC700',\n  style,\n  className,\n}) => {\n\n  const containerRef = useRef(null);\n  const [fires, setFires] = useState([]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (containerRef.current) {\n        const { width, height } = containerRef.current.getBoundingClientRect();\n\n        // pick a random position within the container\n        const left = Math.random() * width * 0.8;\n        const top = Math.random() * height * 0.5;\n\n        // choose a random size from the range\n        const [minSize, maxSize] = fireSize;\n        const size = minSize + Math.random() * (maxSize - minSize);\n\n        const newSparkle = {\n          id: Date.now() + Math.random(), // unique id\n          createdAt: Date.now(),\n          style: {\n            position: 'absolute',\n            left,\n            top,\n            opacity: 0.8,\n            fontSize: size,\n            color: fireColor,\n            pointerEvents: 'none',\n            animation: `fireAnimation ${fireDuration}ms linear forwards`\n          }\n        };\n\n        // remove old fires (older than fireDuration) and add the new one\n        setFires((prev) => {\n          const now = Date.now();\n          const filtered = prev.filter(s => now - s.createdAt < fireDuration);\n          return [...filtered, newSparkle];\n        });\n      }\n    }, fireFrequency);\n\n    return () => clearInterval(interval);\n  }, [fireFrequency, fireDuration, fireSize, fireColor]);\n\n  return (\n    <span\n      ref={containerRef}\n      className={className}\n      style={{ position: 'relative', display: 'inline-block', ...style }}\n    >\n      {children}\n      {fires.map(s => (\n        <span key={s.id} style={s.style}>\n          🔥\n        </span>\n      ))}\n\n      {/* define the keyframes for the burning animation */}\n      <style>{`\n        @keyframes fireAnimation {\n          0% { opacity: 1; transform: scale(1) rotate(0deg); }\n          100% { opacity: 0; transform: scale(0.5) rotate(0deg); }\n        }\n      `}</style>\n    </span>\n  );\n};\n\nexport default B;","import React from \"react\"\nimport M from \"../Markdown\"\nimport B from \"../Burn\"\nimport StickerPack from \"../../components/StickerPack\"\nimport * as stylesPlaques from \"../../styles/plaques.module.scss\"\n\nconst OffensiveNotice = () => {\n  return (\n\t<>\n\t\t<B\n\t\t\tfireSize = {[16, 30]}\n\t\t\tfireDuration = {1000}\n\t\t\tfireFrequency = {300}\n\t\t>\n\t\t\t<div class={stylesPlaques.greyNoticeCompact}>\n\t\t\t\t<h2><StickerPack sticker=\"pepe_punch\" marginLeft=\"0px\" marginRight=\"0.2em\"/> <span style={{ color: \"red\", fontWeight: \"66666\" }}>OFFENSIVENESS</span></h2>\n\t\t\t\t<M text=\"This page may be offensive to some people. It's probably filled with satire to scare off the wrong crowd and attract the right one, or just to make some lulz out of it. Sensitive individuals are advised to [go fuck themselves](/dev/null) right now. 🖕❤️\"/>\n\t\t\t</div>\n\t\t</B>\n\t</>\n  );\n};\nexport default OffensiveNotice;","import React, { useState, useEffect } from \"react\";\n\nconst stickerImports = {\n  hater: () => import(\"../../stickers/hater.png\"),\n  babel_tower: () => import(\"../../stickers/babel_tower.png\"),\n  bibizan: () => import(\"../../stickers/bibizan.gif\"),\n  cursed_emoji2: () => import(\"../../stickers/cursed_emoji2.png\"),\n  cursed_emoji1: () => import(\"../../stickers/cursed_emoji1.png\"),\n  mda: () => import(\"../../stickers/mda.png\"),\n  cat_shake: () => import(\"../../stickers/cat_shake.gif\"),\n  nerazdyplenish3: () => import(\"../../stickers/nerazdyplenish3.gif\"),\n  burnt: () => import(\"../../stickers/burnt.gif\"),\n  chad: () => import(\"../../stickers/chad.gif\"),\n  hedgehog: () => import(\"../../stickers/hedgehog.gif\"),\n  yoba_dovolen: () => import(\"../../stickers/yoba_dovolen.png\"),\n  pug_dance: () => import(\"../../stickers/pug_dance.gif\"),\n  pepe_chair: () => import(\"../../stickers/pepe_chair.gif\"),\n  pepe_serious: () => import(\"../../stickers/pepe_serious.gif\"),\n  pepe_run: () => import(\"../../stickers/pepe_run.gif\"),\n  pepe_punch: () => import(\"../../stickers/pepe_punch.gif\"),\n  pepe_agree: () => import(\"../../stickers/pepe_agree.gif\"),\n  pepe_pledik: () => import(\"../../stickers/pepe_pledik.png\"),\n  cat_stand: () => import(\"../../stickers/cat_stand.png\"),\n  cat_sleep: () => import(\"../../stickers/cat_sleep.png\"),\n  nerazdyplenish2: () => import(\"../../stickers/nerazdyplenish2.png\"),\n  nerazdyplenish1: () => import(\"../../stickers/nerazdyplenish1.png\"),\n  morshu_gnome: () => import(\"../../stickers/morshu_gnome.png\"),\n  cat_bw: () => import(\"../../stickers/cat_bw.png\"),\n  pepe_mage: () => import(\"../../stickers/pepe_mage.png\"),\n  pepe_linux: () => import(\"../../stickers/pepe_linux.png\"),\n  yoba_pledik: () => import(\"../../stickers/yoba_pledik.png\"),\n  pepe_chill: () => import(\"../../stickers/pepe_chill.png\"),\n  pepe_meditation: () => import(\"../../stickers/pepe_meditation.png\"),\n  trollface: () => import(\"../../stickers/trollface.png\"),\n  cat_smile: () => import(\"../../stickers/cat_smile.png\"),\n  beluga: () => import(\"../../stickers/beluga.png\"),\n  pepe_money: () => import(\"../../stickers/pepe_money.gif\"),\n  pepe_cry: () => import(\"../../stickers/pepe_cry.gif\"),\n  pepe_dance: () => import(\"../../stickers/pepe_dance.gif\"),\n  dog_nerd: () => import(\"../../stickers/dog_nerd.png\"),\n  cat_ya_piska: () => import(\"../../stickers/cat_ya_piska.png\"),\n  gandonio: () => import(\"../../stickers/gandonio.png\"),\n  pepe_wink: () => import(\"../../stickers/pepe_wink.gif\"),\n};\n\nconst StickerPack = ({ sticker, marginLeft = \"4px\", marginRight = \"0px\" }) => {\n  const [stickerSrc, setStickerSrc] = useState(null);\n\n  useEffect(() => {\n    if (stickerImports[sticker]) {\n      stickerImports[sticker]().then((module) => setStickerSrc(module.default));\n    }\n  }, [sticker]);\n\n  if (!stickerSrc) return null; // avoid rendering until loaded\n\n  const stickerStyle = {\n    width: \"1.8em\",\n    height: \"1.8em\",\n    verticalAlign: \"middle\",\n    marginTop: \"-10px\",\n    marginRight: marginRight,\n    marginLeft: marginLeft,\n  }\n\n  return <img alt=\"sticker\" style={stickerStyle} src={stickerSrc} />\n}\n\nexport default StickerPack\n\n"],"names":["_ref","children","fireFrequency","fireDuration","fireSize","fireColor","style","className","containerRef","useRef","fires","setFires","useState","useEffect","interval","setInterval","current","width","height","getBoundingClientRect","left","Math","random","top","minSize","maxSize","size","newSparkle","id","Date","now","createdAt","position","opacity","fontSize","color","pointerEvents","animation","prev","filtered","filter","s","concat","_toConsumableArray","clearInterval","React","ref","display","map","key","OffensiveNotice","B","class","stylesPlaques","StickerPack","sticker","marginLeft","marginRight","fontWeight","M","text","stickerImports","hater","babel_tower","bibizan","cursed_emoji2","cursed_emoji1","mda","cat_shake","nerazdyplenish3","burnt","chad","hedgehog","yoba_dovolen","pug_dance","pepe_chair","pepe_serious","pepe_run","pepe_punch","pepe_agree","pepe_pledik","cat_stand","cat_sleep","nerazdyplenish2","nerazdyplenish1","morshu_gnome","cat_bw","pepe_mage","pepe_linux","yoba_pledik","pepe_chill","pepe_meditation","trollface","cat_smile","beluga","pepe_money","pepe_cry","pepe_dance","dog_nerd","cat_ya_piska","gandonio","pepe_wink","stickerSrc","setStickerSrc","then","module","default","stickerStyle","verticalAlign","marginTop","alt","src"],"sourceRoot":""}