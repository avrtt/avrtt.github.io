"use strict";(self.webpackChunkavrtt_blog=self.webpackChunkavrtt_blog||[]).push([[3128],{66627:function(e,t,n){n.r(t),n.d(t,{Head:function(){return C},PostTemplate:function(){return _},default:function(){return z}});var a=n(28453),r=n(96540),l=n(61992),i=n(62087),s=n(90548);function o(e){const t=Object.assign({p:"p",hr:"hr",h2:"h2",a:"a",span:"span",h3:"h3",ul:"ul",li:"li",strong:"strong"},(0,a.RP)(),e.components);return r.createElement(r.Fragment,null,"\n",r.createElement("br"),"\n","\n",r.createElement(t.p,null,"Algorithms and data structures form the backbone of computer science, and they are equally critical in the fields of data science and machine learning. While machine learning is often about training predictive models, you invariably deal with massive volumes of data, intricate transformations, and performance bottlenecks. A sound understanding of algorithms and data structures can help you select the right data representation, optimize resource usage, and drastically reduce computation time. This becomes especially important when working on large-scale datasets or deploying ML pipelines in production environments with strict latency constraints."),"\n",r.createElement(t.p,null,"In this article, we will explore foundational and advanced data structures, important algorithmic concepts, Big O notation, and selected Python essentials that will help you prototype and optimize data science and machine learning applications effectively. We will also cover practical use cases in ML workflows — ranging from tree-based models to graph analytics — and touch upon deeper topics such as P vs. NP problems, which, while not always front-and-center in day-to-day DS/ML tasks, underscore the theoretical limits of what can be computed efficiently."),"\n",r.createElement(t.hr),"\n",r.createElement(t.h2,{id:"python-essentials-for-advanced-data-structures-and-algorithms",style:{position:"relative"}},r.createElement(t.a,{href:"#python-essentials-for-advanced-data-structures-and-algorithms","aria-label":"python essentials for advanced data structures and algorithms permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Python essentials for advanced data structures and algorithms"),"\n",r.createElement(t.p,null,"Although data structures and algorithms are language-agnostic, Python provides high-level constructs and syntactic conveniences that can speed up development. Understanding some of Python's powerful features, such as functional programming tools, iterators, generators, and object-oriented programming (OOP) design, will help you quickly implement (and reason about) algorithmic ideas."),"\n",r.createElement(t.h3,{id:"functional-tools-filter-map-and-reduce",style:{position:"relative"}},r.createElement(t.a,{href:"#functional-tools-filter-map-and-reduce","aria-label":"functional tools filter map and reduce permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Functional tools: filter, map, and reduce"),"\n",r.createElement(t.p,null,"Python's built-in functions ",r.createElement(l.A,null,"filter"),", ",r.createElement(l.A,null,"map"),", and ",r.createElement(l.A,null,"reduce")," (available in the ",r.createElement(l.A,null,"functools")," module) allow for concise and expressive code when dealing with transformations on sequences."),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"filter"),": Takes a function and a sequence, returning items in the sequence that satisfy the function's condition."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"map"),": Applies a function to every element in the sequence."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"reduce"),": Sequentially applies a function to elements of the sequence, reducing it to a single cumulative value."),"\n"),"\n",r.createElement(t.p,null,"These constructs often come in handy for quick data manipulations, but keep in mind that, under the hood, they typically run in ",r.createElement(s.A,{text:"\\(O(n)\\)"})," time just as standard loops do. Their main benefit is code clarity — though in some cases, ",r.createElement(l.A,null,"map")," and ",r.createElement(l.A,null,"filter")," can be slightly faster than equivalent for-loops in CPython due to internal optimizations."),"\n",r.createElement(i.A,{text:"\nfrom functools import reduce\n\nnumbers = [1, 2, 3, 4, 5]\n\n# filter out only even numbers\nevens = list(filter(lambda x: x % 2 == 0, numbers))\n\n# square each number\nsquares = list(map(lambda x: x*x, numbers))\n\n# compute product of all elements\nproduct = reduce(lambda x, y: x * y, numbers)\nprint(evens, squares, product)\n"}),"\n",r.createElement(t.h3,{id:"generators-and-iterators",style:{position:"relative"}},r.createElement(t.a,{href:"#generators-and-iterators","aria-label":"generators and iterators permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Generators and iterators"),"\n",r.createElement(t.p,null,"Generators and iterators enable Python to handle large datasets without storing all data in memory at once. In many ML scenarios — like streaming or mini-batch gradient descent — this can be crucial for memory management."),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Generator expressions")," use a syntax similar to list comprehensions but return an iterator instead of an entire list."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Yield-based generators")," (using the ",r.createElement(l.A,null,"yield")," keyword) enable stateful functions that remember where they left off each time they yield a value, resuming execution from that point upon the next iteration call."),"\n"),"\n",r.createElement(i.A,{text:'\ndef fibonacci(n):\n    """Generate the first n Fibonacci numbers."""\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        yield a\n        a, b = b, a + b\n        count += 1\n\nfib_gen = fibonacci(10)\nfor val in fib_gen:\n    print(val)  # prints Fibonacci sequence up to n\n'}),"\n",r.createElement(t.p,null,"Generators are excellent for large-scale data pipelines where pulling data on-demand is more efficient than precomputing an entire dataset, especially if you only need to iterate over it once."),"\n",r.createElement(t.h3,{id:"object-oriented-programming-refresher-classes-inheritance-polymorphism-encapsulation",style:{position:"relative"}},r.createElement(t.a,{href:"#object-oriented-programming-refresher-classes-inheritance-polymorphism-encapsulation","aria-label":"object oriented programming refresher classes inheritance polymorphism encapsulation permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Object-oriented programming refresher (classes, inheritance, polymorphism, encapsulation)"),"\n",r.createElement(t.p,null,"While many data science prototypes use functional or procedural code, object-oriented paradigms become invaluable when building complex ML systems or production-grade applications:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Classes")," define blueprints for objects; you bundle data (attributes) and behaviors (methods) together."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Inheritance")," allows you to create hierarchies where child classes extend or specialize parent classes."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Polymorphism")," lets you write code that can work interchangeably with different class types, as long as they implement the same interface."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Encapsulation")," helps protect internal states via access modifiers (though Python itself relies on conventions like a leading underscore ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_my_var</code>'}})," to denote a private or protected member)."),"\n"),"\n",r.createElement(t.p,null,"One practical use case is creating a common interface for ML models or data pipeline components. For instance, a base ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Transform</code>'}})," class can define a method ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">transform(X)</code>'}}),", which all subclasses (e.g., ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ScalingTransform</code>'}}),", ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">PolynomialTransform</code>'}}),", etc.) must implement."),"\n",r.createElement(t.hr),"\n",r.createElement(t.h2,{id:"understanding-big-o-notation-and-algorithm-optimization",style:{position:"relative"}},r.createElement(t.a,{href:"#understanding-big-o-notation-and-algorithm-optimization","aria-label":"understanding big o notation and algorithm optimization permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Understanding big O notation and algorithm optimization"),"\n",r.createElement(t.p,null,"One of the cornerstones of algorithmic efficiency is understanding how code or data structure operations scale as your input grows. This is captured by ",r.createElement(t.strong,null,"Big O notation"),", which provides an asymptotic upper bound on growth in time or space usage."),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Time complexity"),": How execution time scales."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Space complexity"),": How memory usage scales."),"\n"),"\n",r.createElement(t.p,null,"Common complexities:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(s.A,{text:"\\(O(1)\\)"}),": Constant time — independent of input size."),"\n",r.createElement(t.li,null,r.createElement(s.A,{text:"\\(O(n)\\)"}),": Linear time — grows proportionally to the input size."),"\n",r.createElement(t.li,null,r.createElement(s.A,{text:"\\(O(\\log n)\\)"}),": Logarithmic time — grows slowly, typical of divide-and-conquer or balanced tree lookups."),"\n",r.createElement(t.li,null,r.createElement(s.A,{text:"\\(O(n \\log n)\\)"}),": Common in efficient sorting algorithms like mergesort and quicksort (on average)."),"\n",r.createElement(t.li,null,r.createElement(s.A,{text:"\\(O(n^2)\\)"}),": Quadratic time — often arises from nested loops."),"\n",r.createElement(t.li,null,r.createElement(s.A,{text:"\\(O(2^n)\\)"})," and ",r.createElement(s.A,{text:"\\(O(n!)\\)"}),": Exponential or factorial time — these become impractical for larger inputs."),"\n"),"\n",r.createElement(t.h3,{id:"best-average-and-worst-case-scenarios",style:{position:"relative"}},r.createElement(t.a,{href:"#best-average-and-worst-case-scenarios","aria-label":"best average and worst case scenarios permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Best, average, and worst-case scenarios"),"\n",r.createElement(t.p,null,"Many algorithms have different complexities depending on how favorable the input is:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Best case"),": The scenario in which the algorithm performs optimally (e.g., quicksort with an ideal pivot split)."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Average case"),": The expected scenario over random input distributions."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Worst case"),": The upper bound scenario that ensures the algorithm never performs worse than a certain threshold (e.g., an already sorted list can degrade some sorting algorithms)."),"\n"),"\n",r.createElement(t.h3,{id:"techniques-for-performance-improvement",style:{position:"relative"}},r.createElement(t.a,{href:"#techniques-for-performance-improvement","aria-label":"techniques for performance improvement permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Techniques for performance improvement"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Optimized data structures"),": Switch from arrays to hash tables for faster lookups, or from lists to heaps when you frequently need to extract the smallest or largest element."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Caching and memoization"),": Store partial results to avoid recomputing them (popular in dynamic programming and repeated sub-calculations)."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Parallelization"),": Leverage concurrency and parallel libraries (e.g., ",r.createElement(l.A,null,"multiprocessing"),", GPU computing)."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Algorithmic refinements"),": Choose more optimal approaches when possible, e.g., binary search instead of linear search."),"\n"),"\n",r.createElement(t.hr),"\n",r.createElement(t.h2,{id:"foundational-data-structures",style:{position:"relative"}},r.createElement(t.a,{href:"#foundational-data-structures","aria-label":"foundational data structures permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Foundational data structures"),"\n",r.createElement(t.h3,{id:"arrays",style:{position:"relative"}},r.createElement(t.a,{href:"#arrays","aria-label":"arrays permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Arrays"),"\n",r.createElement(t.p,null,"An array is a contiguous block of memory that stores a fixed number of elements (often of the same type). In Python, the closest built-in structure is the ",r.createElement(l.A,null,"list"),", which is more dynamic but typically backed by an array under the hood."),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Time complexity"),":","\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"Indexing by position: ",r.createElement(s.A,{text:"\\(O(1)\\)"})),"\n",r.createElement(t.li,null,"Appending (amortized): ",r.createElement(s.A,{text:"\\(O(1)\\)"})),"\n",r.createElement(t.li,null,"Insertion at arbitrary position: ",r.createElement(s.A,{text:"\\(O(n)\\)"})," (since elements need shifting)"),"\n"),"\n"),"\n"),"\n",r.createElement(t.h3,{id:"linked-lists",style:{position:"relative"}},r.createElement(t.a,{href:"#linked-lists","aria-label":"linked lists permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Linked lists"),"\n",r.createElement(t.p,null,"A linked list stores elements (nodes) where each node has a reference (pointer) to the next node (singly linked) or to both next and previous nodes (doubly linked)."),"\n",r.createElement(t.p,null,r.createElement(l.A,null,"Advantages")," include constant-time insertion or deletion at known nodes. However, accessing an arbitrary element by index requires ",r.createElement(s.A,{text:"\\(O(n)\\)"})," traversal."),"\n",r.createElement(i.A,{text:"\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def insert_at_head(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n"}),"\n",r.createElement(t.h3,{id:"stacks",style:{position:"relative"}},r.createElement(t.a,{href:"#stacks","aria-label":"stacks permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Stacks"),"\n",r.createElement(t.p,null,"A stack follows a Last-In-First-Out (",r.createElement(l.A,null,"LIFO"),") principle. The primary operations are:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"push"),": Insert an item onto the stack (top)."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"pop"),": Remove the most recently added item."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"peek"),": View the top item without removing it."),"\n"),"\n",r.createElement(t.p,null,"In Python, you can simulate a stack using a list and the ",r.createElement(l.A,null,"append")," and ",r.createElement(l.A,null,"pop")," methods."),"\n",r.createElement(s.A,{text:"\\( \\text{push/pop: } O(1) \\quad \\text{peek: } O(1) \\quad \\text{search: } O(n) \\)"}),"\n",r.createElement(t.h3,{id:"queues",style:{position:"relative"}},r.createElement(t.a,{href:"#queues","aria-label":"queues permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Queues"),"\n",r.createElement(t.p,null,"A queue follows a First-In-First-Out (",r.createElement(l.A,null,"FIFO"),") pattern. The main operations are:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"enqueue"),": Insert an item at the back."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"dequeue"),": Remove the item from the front."),"\n"),"\n",r.createElement(t.p,null,"For Python, ",r.createElement(l.A,null,"collections.deque")," is highly optimized for queue operations at both ends in ",r.createElement(s.A,{text:"\\(O(1)\\)"})," time."),"\n",r.createElement(t.h3,{id:"hash-tables",style:{position:"relative"}},r.createElement(t.a,{href:"#hash-tables","aria-label":"hash tables permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Hash tables"),"\n",r.createElement(t.p,null,"Hash tables (or dictionaries in Python) map keys to values using a hashing function to determine bucket locations. They usually provide average-case ",r.createElement(s.A,{text:"\\(O(1)\\)"})," time for insertion, lookup, and deletion, though collisions can degrade performance."),"\n",r.createElement(i.A,{text:'\nmy_dict = {}\nmy_dict["model"] = "RandomForest"\nprint(my_dict["model"])  # average O(1) lookup\n'}),"\n",r.createElement(t.p,null,"This efficiency makes hash tables indispensable for tasks such as counting frequencies, caching intermediate computations, or implementing fast lookups in ML pipelines."),"\n",r.createElement(t.hr),"\n",r.createElement(t.h2,{id:"advanced-data-structures",style:{position:"relative"}},r.createElement(t.a,{href:"#advanced-data-structures","aria-label":"advanced data structures permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Advanced data structures"),"\n",r.createElement(t.h3,{id:"trees",style:{position:"relative"}},r.createElement(t.a,{href:"#trees","aria-label":"trees permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Trees"),"\n",r.createElement(t.p,null,"A tree is a hierarchical data structure with nodes connected by edges, having no cycles, and a designated root. The most common variant in data science is the ",r.createElement(t.strong,null,"binary tree"),", where each node has up to two children."),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Binary Search Tree (BST)"),": Each node's left child is smaller, and the right child is greater (often used for sorted data)."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Balanced trees")," (like AVL trees, Red-Black trees): Maintain ",r.createElement(s.A,{text:"\\(O(\\log n)\\)"})," insertion/lookup/deletion by keeping tree height small."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Decision trees")," (a pillar in ML): Not exactly the same as BST, but they rely on a recursive branching structure to partition data."),"\n"),"\n",r.createElement(t.h3,{id:"heaps",style:{position:"relative"}},r.createElement(t.a,{href:"#heaps","aria-label":"heaps permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Heaps"),"\n",r.createElement(t.p,null,"A ",r.createElement(t.strong,null,"heap")," is a specialized binary tree satisfying the heap property:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"In a ",r.createElement(t.strong,null,"min-heap"),", each node's value is smaller than or equal to that of its children (so the root is the minimum)."),"\n",r.createElement(t.li,null,"In a ",r.createElement(t.strong,null,"max-heap"),", each node's value is larger than or equal to that of its children (so the root is the maximum)."),"\n"),"\n",r.createElement(t.p,null,"Heaps are crucial for implementing ",r.createElement(t.strong,null,"priority queues"),", which let you insert an element and extract the highest (or lowest) priority element in ",r.createElement(s.A,{text:"\\(O(\\log n)\\)"})," time. Python's ",r.createElement(l.A,null,"heapq")," module implements a min-heap on top of a list."),"\n",r.createElement(t.h3,{id:"graphs",style:{position:"relative"}},r.createElement(t.a,{href:"#graphs","aria-label":"graphs permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Graphs"),"\n",r.createElement(t.p,null,"A ",r.createElement(t.strong,null,"graph")," is a collection of nodes (vertices) connected by edges. Graphs can be:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Directed or undirected")),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Weighted or unweighted")),"\n"),"\n",r.createElement(t.p,null,"They model relationships between entities (e.g., users in a social network). In data science:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"Graphs can represent everything from dependency structures in scheduling tasks to knowledge graphs capturing relationships between facts or concepts."),"\n",r.createElement(t.li,null,"In ML, graph-based clustering and semi-supervised learning (e.g., label propagation) are active research areas (e.g., Zhu and Ghahramani, ICML 2002)."),"\n"),"\n",r.createElement(t.hr),"\n",r.createElement(t.h2,{id:"practical-applications-of-advanced-data-structures-in-dsml",style:{position:"relative"}},r.createElement(t.a,{href:"#practical-applications-of-advanced-data-structures-in-dsml","aria-label":"practical applications of advanced data structures in dsml permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Practical applications of advanced data structures in DS/ML"),"\n",r.createElement(t.h3,{id:"in-decision-trees-and-random-forests",style:{position:"relative"}},r.createElement(t.a,{href:"#in-decision-trees-and-random-forests","aria-label":"in decision trees and random forests permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"In decision trees and random forests"),"\n",r.createElement(t.p,null,"Decision trees are naturally represented by ",r.createElement(t.strong,null,"tree")," data structures, where each node splits the data based on a feature threshold (for continuous features) or a specific category (for categorical features). Random forests are essentially ",r.createElement(t.strong,null,"collections (ensembles) of decision trees"),', thus the name "forest."'),"\n",r.createElement(t.h3,{id:"priority-queues-for-real-time-tasks",style:{position:"relative"}},r.createElement(t.a,{href:"#priority-queues-for-real-time-tasks","aria-label":"priority queues for real time tasks permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Priority queues for real-time tasks"),"\n",r.createElement(t.p,null,"If you are dealing with streaming data (like real-time event processing or online learning), you might need to handle tasks or data points in the order of their priority (urgency, time stamp, etc.). Priority queues, implemented via ",r.createElement(t.strong,null,"heaps"),", excel in such scheduling and real-time scenarios."),"\n",r.createElement(t.h3,{id:"graph-based-modeling-in-ml",style:{position:"relative"}},r.createElement(t.a,{href:"#graph-based-modeling-in-ml","aria-label":"graph based modeling in ml permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Graph-based modeling in ML"),"\n",r.createElement(t.p,null,"Certain ML tasks, such as community detection, recommender systems (collaborative filtering via user-item graphs), or shortest-path problems, rely heavily on graph data structures. For example, BFS and DFS can be used to traverse user connections in a social network, and advanced algorithms like PageRank (Page and gang, 1999) exploit graph connectivity."),"\n",r.createElement(t.h3,{id:"hash-based-indexing-for-large-scale-data",style:{position:"relative"}},r.createElement(t.a,{href:"#hash-based-indexing-for-large-scale-data","aria-label":"hash based indexing for large scale data permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Hash-based indexing for large-scale data"),"\n",r.createElement(t.p,null,"When you have enormous datasets (say tens of millions of rows) that need fast random access, hashing-based structures can speed up lookups dramatically. Locality-sensitive hashing (LSH) is also used in approximate nearest neighbor search — a key technique in high-dimensional ML tasks (e.g., Johnson and gang, TPAMI 2019)."),"\n",r.createElement(t.hr),"\n",r.createElement(t.h2,{id:"algorithms-for-sorting-and-searching",style:{position:"relative"}},r.createElement(t.a,{href:"#algorithms-for-sorting-and-searching","aria-label":"algorithms for sorting and searching permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Algorithms for sorting and searching"),"\n",r.createElement(t.h3,{id:"sorting-quicksort-mergesort-and-other-variations",style:{position:"relative"}},r.createElement(t.a,{href:"#sorting-quicksort-mergesort-and-other-variations","aria-label":"sorting quicksort mergesort and other variations permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Sorting: quicksort, mergesort, and other variations"),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Quicksort")," uses a pivot to divide the array into elements less than and greater than the pivot. Its average time complexity is ",r.createElement(s.A,{text:"\\(O(n \\log n)\\)"}),", though worst-case is ",r.createElement(s.A,{text:"\\(O(n^2)\\)"}),"."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Mergesort")," splits the array into halves, recursively sorts them, then merges. It consistently runs in ",r.createElement(s.A,{text:"\\(O(n \\log n)\\)"})," time, regardless of input distribution, at the cost of additional ",r.createElement(s.A,{text:"\\(O(n)\\)"})," space for the merging process."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Heapsort")," uses a ",r.createElement(t.strong,null,"max-heap")," to repeatedly extract the largest element. It guarantees ",r.createElement(s.A,{text:"\\(O(n \\log n)\\)"})," complexity without extra memory."),"\n",r.createElement(t.h3,{id:"searching-binary-search-and-beyond",style:{position:"relative"}},r.createElement(t.a,{href:"#searching-binary-search-and-beyond","aria-label":"searching binary search and beyond permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Searching: binary search and beyond"),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Linear search")," is ",r.createElement(s.A,{text:"\\(O(n)\\)"})," and straightforward, but if your dataset is sorted, ",r.createElement(t.strong,null,"binary search")," can cut the search space in half each time, achieving ",r.createElement(s.A,{text:"\\(O(\\log n)\\)"})," complexity."),"\n",r.createElement(t.p,null,"For unstructured or extremely large datasets, specialized approaches like ",r.createElement(t.strong,null,"tree-based")," or ",r.createElement(t.strong,null,"hash-based")," lookups can often outperform a naive linear search."),"\n",r.createElement(t.h3,{id:"efficient-data-retrieval-for-structuredunstructured-datasets",style:{position:"relative"}},r.createElement(t.a,{href:"#efficient-data-retrieval-for-structuredunstructured-datasets","aria-label":"efficient data retrieval for structuredunstructured datasets permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Efficient data retrieval for structured/unstructured datasets"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Database indexing"),": B-trees or B+ trees help with quick lookups in relational databases."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Inverted indices"),": Common in search engines for text-based retrieval."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Tries (prefix trees)"),": Optimize prefix-based lookups (common in NLP tasks or auto-completion systems)."),"\n"),"\n",r.createElement(t.hr),"\n",r.createElement(t.h2,{id:"graph-algorithms",style:{position:"relative"}},r.createElement(t.a,{href:"#graph-algorithms","aria-label":"graph algorithms permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Graph algorithms"),"\n",r.createElement(t.h3,{id:"breadth-first-search-bfs-and-depth-first-search-dfs",style:{position:"relative"}},r.createElement(t.a,{href:"#breadth-first-search-bfs-and-depth-first-search-dfs","aria-label":"breadth first search bfs and depth first search dfs permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Breadth-first search (BFS) and depth-first search (DFS)"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"BFS")," visits neighbors first, then moves outward, making it ideal for shortest-path in unweighted graphs or layering-based problems."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"DFS")," digs deep along one branch before backtracking, often used for cycle detection, topological sorting (in directed acyclic graphs), or connected component detection."),"\n"),"\n",r.createElement(t.p,null,"Both BFS and DFS run in ",r.createElement(s.A,{text:"\\(O(V + E)\\)"})," time, where ",r.createElement(s.A,{text:"\\(V\\)"})," is the number of vertices and ",r.createElement(s.A,{text:"\\(E\\)"})," is the number of edges."),"\n",r.createElement(t.h3,{id:"dijkstras-algorithm-for-shortest-paths",style:{position:"relative"}},r.createElement(t.a,{href:"#dijkstras-algorithm-for-shortest-paths","aria-label":"dijkstras algorithm for shortest paths permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Dijkstra's algorithm for shortest paths"),"\n",r.createElement(t.p,null,"For weighted graphs (with non-negative edge weights), ",r.createElement(t.strong,null,"Dijkstra's")," algorithm finds the shortest path from a source to all other vertices. Typically implemented with a ",r.createElement(t.strong,null,"min-heap")," or ",r.createElement(t.strong,null,"priority queue"),", it runs in ",r.createElement(s.A,{text:"\\(O(E + V \\log V)\\)"})," time if using a Fibonacci heap or ",r.createElement(s.A,{text:"\\(O(E \\log V)\\)"})," with a binary heap."),"\n",r.createElement(t.h3,{id:"other-advanced-graph-techniques",style:{position:"relative"}},r.createElement(t.a,{href:"#other-advanced-graph-techniques","aria-label":"other advanced graph techniques permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Other advanced graph techniques"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"A*")," search: Incorporates heuristics to speed up pathfinding (common in routing applications)."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Minimum Spanning Tree")," (e.g., Kruskal's, Prim's): Extract a subgraph connecting all nodes with minimal total edge cost."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Network flow algorithms")," (e.g., Edmond-Karp, Dinic's): Used in bipartite matching and max-flow/min-cut problems."),"\n"),"\n",r.createElement(t.hr),"\n",r.createElement(t.h2,{id:"functional-programming-concepts",style:{position:"relative"}},r.createElement(t.a,{href:"#functional-programming-concepts","aria-label":"functional programming concepts permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Functional programming concepts"),"\n",r.createElement(t.h3,{id:"lambdas-and-higher-order-functions",style:{position:"relative"}},r.createElement(t.a,{href:"#lambdas-and-higher-order-functions","aria-label":"lambdas and higher order functions permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Lambdas and higher-order functions"),"\n",r.createElement(t.p,null,"Python's ",r.createElement(t.strong,null,"lambda")," expressions are lightweight ways to create small anonymous functions. Higher-order functions accept other functions as arguments or return them (e.g., ",r.createElement(l.A,null,"map"),", ",r.createElement(l.A,null,"filter"),", ",r.createElement(l.A,null,"reduce"),")."),"\n",r.createElement(t.p,null,'In machine learning, especially for data wrangling or "mini transformations," lambdas and higher-order functions can drastically reduce boilerplate and make your code more composable.'),"\n",r.createElement(t.h3,{id:"immutability-and-side-effect-free-computations",style:{position:"relative"}},r.createElement(t.a,{href:"#immutability-and-side-effect-free-computations","aria-label":"immutability and side effect free computations permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Immutability and side-effect-free computations"),"\n",r.createElement(t.p,null,"Functional programming advocates for pure functions (no side effects) and immutable data structures. This can simplify ",r.createElement(t.strong,null,"reasoning about concurrency")," and ",r.createElement(t.strong,null,"parallel execution"),". Libraries like ",r.createElement(l.A,null,"pyspark")," adopt a functional style to scale transformations over distributed datasets seamlessly."),"\n",r.createElement(t.h3,{id:"real-world-use-cases-in-dsml",style:{position:"relative"}},r.createElement(t.a,{href:"#real-world-use-cases-in-dsml","aria-label":"real world use cases in dsml permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Real-world use cases in DS/ML"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Data pipeline transformations"),": Chaining transformations like filtering missing values, scaling features, or encoding categories."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Feature engineering"),": Rapidly combining column transformations, especially in frameworks that support parallel map operations."),"\n"),"\n",r.createElement(t.hr),"\n",r.createElement(t.h2,{id:"p-vs-np-problems",style:{position:"relative"}},r.createElement(t.a,{href:"#p-vs-np-problems","aria-label":"p vs np problems permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"P vs. NP problems"),"\n",r.createElement(t.p,null,"An understanding of ",r.createElement(t.strong,null,"P vs. NP")," is not mandatory for day-to-day data science but sheds light on ",r.createElement(t.strong,null,"computational intractability"),":"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"P"),": Class of problems solvable in polynomial time (relative to input size)."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"NP"),": Class of problems whose solutions can be verified in polynomial time."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"NP-complete"),": Problems that are at least as hard as any other problem in NP (if you solve one efficiently, you effectively solve all NP problems efficiently)."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"NP-hard"),": A superset of NP-complete problems — often, these problems don't even have to be in NP (verifiable in polynomial time)."),"\n"),"\n",r.createElement(t.p,null,"Some optimization problems encountered in ML or feature selection are ",r.createElement(t.strong,null,"NP-hard"),". For instance, the subset selection problem (selecting the best subset of features to minimize error) can be proven NP-hard. As a result, data scientists rely on heuristics, approximations, or specialized transformations instead of brute-force solutions for large instances."),"\n",r.createElement(t.p,null,"While P vs. NP remains an open question in theoretical computer science (Clay Mathematics Institute has a million-dollar prize for its resolution), practical data scientists and ML engineers use algorithmic heuristics, approximations, or problem-specific constraints to tackle these otherwise intractable problems."),"\n",r.createElement(t.hr),"\n",r.createElement(t.p,null,'By mastering data structures, algorithmic complexity, and the Python features covered here, you establish a solid foundation for building efficient, robust, and scalable data science and machine learning solutions. As you move forward, consider practicing common coding tasks that involve these data structures and algorithms (e.g., "Top Interview" problems on LeetCode) and keep exploring advanced techniques — like streaming algorithms, parallelization, and specialized data structures for high-dimensional ML — to stay on the cutting edge.'))}var c=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.RP)(),e.components);return t?r.createElement(t,e,r.createElement(o,e)):o(e)},m=n(54506),h=n(88864),d=n(58481),u=n.n(d),p=n(5984),g=n(43672),f=n(27042),v=n(72031),E=n(81817),b=n(27105),y=n(17265),S=n(2043),w=n(95751),x=n(94328),H=n(80791),k=n(78137);const M=e=>{let{toc:t}=e;if(!t||!t.items)return null;return r.createElement("nav",{className:H.R},r.createElement("ul",null,t.items.map(((e,t)=>r.createElement("li",{key:t},r.createElement("a",{href:e.url,onClick:t=>((e,t)=>{e.preventDefault();const n=t.replace("#",""),a=document.getElementById(n);a&&a.scrollIntoView({behavior:"smooth",block:"start"})})(t,e.url)},e.title),e.items&&r.createElement(M,{toc:{items:e.items}}))))))};function _(e){let{data:{mdx:t,allMdx:l,allPostImages:i},children:s}=e;const{frontmatter:o,body:c,tableOfContents:h}=t,d=o.index,v=o.slug.split("/")[1],H=l.nodes.filter((e=>e.frontmatter.slug.includes(`/${v}/`))).sort(((e,t)=>e.frontmatter.index-t.frontmatter.index)),_=H.findIndex((e=>e.frontmatter.index===d)),z=H[_+1],C=H[_-1],T=o.slug.replace(/\/$/,""),A=/[^/]*$/.exec(T)[0],L=`posts/${v}/content/${A}/`,{0:I,1:V}=(0,r.useState)(o.flagWideLayoutByDefault),{0:P,1:N}=(0,r.useState)(!1);var O;(0,r.useEffect)((()=>{N(!0);const e=setTimeout((()=>N(!1)),340);return()=>clearTimeout(e)}),[I]),"adventures"===v?O=y.cb:"research"===v?O=y.Qh:"thoughts"===v&&(O=y.T6);const B=u()(c).replace(/import .*? from .*?;/g,"").replace(/<.*?>/g,"").replace(/\{\/\*[\s\S]*?\*\/\}/g,"").trim().split(/\s+/).length,q=function(e){if(e<=10)return"~10 min";if(e<=20)return"~20 min";if(e<=30)return"~30 min";if(e<=40)return"~40 min";if(e<=50)return"~50 min";if(e<=60)return"~1 h";const t=Math.floor(e/60),n=e%60;return n<=30?`~${t}${n>0?".5":""} h`:`~${t+1} h`}(Math.ceil(B/O)+(o.extraReadTimeMin||0)),F=[{flag:o.flagDraft,component:()=>Promise.all([n.e(5850),n.e(9833)]).then(n.bind(n,49833))},{flag:o.flagMindfuckery,component:()=>Promise.all([n.e(5850),n.e(7805)]).then(n.bind(n,27805))},{flag:o.flagRewrite,component:()=>Promise.all([n.e(5850),n.e(8916)]).then(n.bind(n,78916))},{flag:o.flagOffensive,component:()=>Promise.all([n.e(5850),n.e(6731)]).then(n.bind(n,49112))},{flag:o.flagProfane,component:()=>Promise.all([n.e(5850),n.e(3336)]).then(n.bind(n,83336))},{flag:o.flagMultilingual,component:()=>Promise.all([n.e(5850),n.e(2343)]).then(n.bind(n,62343))},{flag:o.flagUnreliably,component:()=>Promise.all([n.e(5850),n.e(6865)]).then(n.bind(n,11627))},{flag:o.flagPolitical,component:()=>Promise.all([n.e(5850),n.e(4417)]).then(n.bind(n,24417))},{flag:o.flagCognitohazard,component:()=>Promise.all([n.e(5850),n.e(8669)]).then(n.bind(n,18669))},{flag:o.flagHidden,component:()=>Promise.all([n.e(5850),n.e(8124)]).then(n.bind(n,48124))}],{0:G,1:D}=(0,r.useState)([]);return(0,r.useEffect)((()=>{F.forEach((e=>{let{flag:t,component:n}=e;t&&n().then((e=>{D((t=>[].concat((0,m.A)(t),[e.default])))}))}))}),[]),r.createElement(f.P.div,{initial:{opacity:0},animate:{opacity:1},exit:{opacity:0},transition:{duration:.15}},r.createElement(E.A,{postNumber:o.index,date:o.date,updated:o.updated,readTime:q,difficulty:o.difficultyLevel,title:o.title,desc:o.desc,banner:o.banner,section:v,postKey:A,isMindfuckery:o.flagMindfuckery,mainTag:o.mainTag}),r.createElement("div",{style:{display:"flex",justifyContent:"flex-end",flexWrap:"wrap",maxWidth:"75%",marginLeft:"auto",paddingRight:"1vw",marginTop:"-6vh",marginBottom:"4vh"}},o.otherTags.map(((e,t)=>r.createElement("span",{key:t,className:`noselect ${k.MW}`,style:{margin:"0 5px 5px 0"}},e)))),r.createElement("div",{className:"postBody"},r.createElement(M,{toc:h})),r.createElement("br",null),r.createElement("div",{style:{margin:"0 10% -2vh 30%",textAlign:"right"}},r.createElement(f.P.button,{className:`noselect ${x.pb}`,id:x.xG,onClick:()=>{V(!I)},whileTap:{scale:.93}},r.createElement(f.P.div,{className:w.DJ,key:I,initial:{opacity:0},animate:{opacity:1},exit:{opacity:0},transition:{duration:.3,ease:"easeInOut"}},I?"Switch to default layout":"Switch to wide layout"))),r.createElement("br",null),r.createElement("div",{className:"postBody",style:{margin:I?"0 -14%":"",maxWidth:I?"200%":"",transition:"margin 1s ease, max-width 1s ease, padding 1s ease"}},r.createElement("div",{className:`${x.P_} ${P?x.Xn:x.qG}`},G.map(((e,t)=>r.createElement(e,{key:t}))),o.indexCourse?r.createElement(S.A,{index:o.indexCourse,category:o.courseCategoryName}):"",r.createElement(p.Z.Provider,{value:{images:i.nodes,basePath:L.replace(/\/$/,"")+"/"}},r.createElement(a.xA,{components:{Image:g.A}},s)))),r.createElement(b.A,{nextPost:z,lastPost:C,keyCurrent:A,section:v}))}function z(e){return r.createElement(_,e,r.createElement(c,e))}function C(e){var t,n,a,l,i;let{data:s}=e;const{frontmatter:o}=s.mdx,c=o.titleSEO||o.title,m=o.titleOG||c,d=o.titleTwitter||c,u=o.descSEO||o.desc,p=o.descOG||u,g=o.descTwitter||u,f=o.schemaType||"BlogPosting",E=o.keywordsSEO,b=o.date,y=o.updated||b,S=o.imageOG||(null===(t=o.banner)||void 0===t||null===(n=t.childImageSharp)||void 0===n||null===(a=n.gatsbyImageData)||void 0===a||null===(l=a.images)||void 0===l||null===(i=l.fallback)||void 0===i?void 0:i.src),w=o.imageAltOG||p,x=o.imageTwitter||S,H=o.imageAltTwitter||g,k=o.canonicalURL,M=o.flagHidden||!1,_=o.mainTag||"Posts",z=o.slug.split("/")[1]||"posts",{siteUrl:C}=(0,h.Q)(),T={"@context":"https://schema.org","@type":"BreadcrumbList",itemListElement:[{"@type":"ListItem",position:1,name:"Home",item:C},{"@type":"ListItem",position:2,name:_,item:`${C}/${o.slug.split("/")[1]}`},{"@type":"ListItem",position:3,name:c,item:`${C}${o.slug}`}]};return r.createElement(v.A,{title:c+" - avrtt.blog",titleOG:m,titleTwitter:d,description:u,descriptionOG:p,descriptionTwitter:g,schemaType:f,keywords:E,datePublished:b,dateModified:y,imageOG:S,imageAltOG:w,imageTwitter:x,imageAltTwitter:H,canonicalUrl:k,flagHidden:M,mainTag:_,section:z,type:"article"},r.createElement("script",{type:"application/ld+json"},JSON.stringify(T)))}},90548:function(e,t,n){var a=n(96540),r=n(7978);t.A=e=>{let{text:t}=e;return a.createElement(r.A,null,t)}}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-src-pages-posts-research-algorithms-and-data-structures-mdx-a2185200a791258b9280.js.map