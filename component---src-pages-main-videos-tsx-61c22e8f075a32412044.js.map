{"version":3,"file":"component---src-pages-main-videos-tsx-61c22e8f075a32412044.js","mappings":"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","sources":["webpack://avrtt.blog/./src/images/about/photoAbout.jpg","webpack://avrtt.blog/./src/images/icon.png","webpack://avrtt.blog/./src/components/seo.tsx","webpack://avrtt.blog/./src/hooks/useSiteMetadata.ts","webpack://avrtt.blog/./src/pages/main/videos.tsx"],"sourcesContent":["export default __webpack_public_path__ + \"static/photoAbout-59cd1848d1acc7ce5078c52886c751d1.jpg\";","export default __webpack_public_path__ + \"static/icon-6e7479889441613ea062cf3d71374ab6.png\";","/* \n\nCopyright Â© 2022  Vladislav Averett (avrtt)\nDistributed under the GNU AGPLv3 license. For details and source code, please refer to <https://github.com/avrtt/avrtt.github.io>.\n\n*/\n\nimport React from \"react\"\nimport { useSiteMetadata } from \"../hooks/useSiteMetadata\"\nimport icon from \"../images/icon.png\"\nimport photoAbout from \"../images/about/photoAbout.jpg\";\n\nfunction convertToISO(dateString: string): string {\n  const [day, month, year] = dateString.split('.').map(Number);\n  const date = new Date(year, month - 1, day);\n  return date.toISOString();\n}\n\ninterface SchemaProps {\n  schemaType: \"Article\" | \"BlogPosting\" | \"WebPage\" | \"ContactPage\" | \"Course\";\n  title: string;\n  description: string;\n  author: string;\n  photo: string;\n  datePublished?: string;\n  dateModified?: string;\n  url: string;\n  image?: string;\n  siteName: string;\n  siteUrl: string;\n  siteLogo: string;\n  keywords: string[] | string;\n  section: string;\n}\n\nconst generateSchema = ({\n  schemaType,\n  title,\n  description,\n  author,\n  photo,\n  datePublished,\n  dateModified,\n  url,\n  image,\n  siteName,\n  siteUrl,\n  siteLogo,\n  keywords,\n  section,\n}: SchemaProps): Record<string, any> => {\n\n  const baseSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": schemaType,\n    url,\n    description,\n  }\n\n  if (schemaType === \"Article\" || schemaType === \"BlogPosting\") {\n    return {\n      ...baseSchema,\n      headline: title,\n      image: image ? [image] : undefined,\n      datePublished: datePublished || undefined,\n      dateModified: dateModified || datePublished || undefined,\n      articleSection: section,\n      author: {\n        \"@type\": \"Person\",\n        name: author,\n        image: photo,\n        description: \"Traveler, content creator, data scientist, AI researcher, developer, musician.\",\n        url: `${siteUrl}/about`,\n        sameAs: [\n          \"https://youtube.com/@vladaverett\",\n          \"https://instagram.com/avrttv\",\n          \"https://twitter.com/vladaverett\",\n          \"https://tiktok.com/@vladaverett\",\n          \"https://github.com/avrtt\",\n          \"https://facebook.com/vladaverett\",\n          \"https://youtube.com/@avheuristics\",\n          \"https://t.me/venturingforth\",\n          \"https://t.me/avheuristics\",\n          \"https://kaggle.com/lenferdetroud\",\n          \"https://couchsurfing.com/people/averett\",\n          \"https://youtube.com/@noiserett\",\n          \"https://facebook.com/averett.freelance\",\n          \"https://facebook.com/avrttblog\",\n        ],\n      },\n      publisher: {\n        \"@type\": \"Organization\",\n        name: siteName,\n        logo: {\n          \"@type\": \"ImageObject\",\n          url: siteLogo,\n        },\n      },\n      mainEntityOfPage: url,\n      keywords: Array.isArray(keywords) ? keywords.join(\", \") : keywords\n    }\n  }\n\n  return {\n    ...baseSchema,\n    name: title,\n  }\n}\n\ninterface SEOProps {\n  title?: string;\n  titleOG?: string;\n  titleTwitter?: string;\n  description?: string;\n  descriptionOG?: string;\n  descriptionTwitter?: string;\n  schemaType?: \"Article\" | \"BlogPosting\" | \"WebPage\" | \"CollectionPage\" | \"Person\" | \"ContactPage\" | \"Course\";\n  keywords?: string[] | string;\n  datePublished?: string;\n  dateModified?: string;\n  image?: string;\n  siteUrl?: string;\n  siteName?: string;\n  author?: string;\n  twitterUsername?: string;\n  facebookUsername?: string;\n  imageOG?: string;\n  imageAltOG?: string;\n  imageTwitter?: string;\n  imageAltTwitter?: string;\n  imageWidth?: string;\n  imageHeight?: string;\n  canonicalUrl?: string;\n  flagHidden?: boolean;\n  section?: string;\n  mainTag?: string;\n  type?: string; // for og\n  children?: React.ReactNode;\n}\n\nconst SEO: React.FC<SEOProps> = ({\n  title,\n  titleOG,\n  titleTwitter,\n  description,\n  descriptionOG,\n  descriptionTwitter,\n  schemaType = \"WebPage\",\n  keywords,\n  datePublished,\n  dateModified,\n  image,\n  siteUrl,\n  siteName,\n  author,\n  twitterUsername,\n  facebookUsername,\n  imageOG,\n  imageAltOG,\n  imageTwitter,\n  imageAltTwitter,\n  imageWidth,\n  imageHeight,\n  canonicalUrl,\n  flagHidden = false,\n  section,\n  mainTag,\n  type = \"website\", // for og\n  children,\n}) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    image: defaultImage,\n    siteUrl: defaultSiteUrl,\n    siteName: defaultSiteName,\n    author: defaultAuthor,\n    twitterUsername: defaultTwitterUsername,\n    facebookUsername: defaultFacebookUsername,\n  } = useSiteMetadata()\n\n  // fallbacks\n  const seoTitle = title || defaultTitle\n  const ogTitle = titleOG || seoTitle\n  const twTitle = titleTwitter || seoTitle\n  const seoDescription = description || defaultDescription\n  const ogDescription = descriptionOG || seoDescription\n  const twDescription = descriptionTwitter || seoDescription\n  const seoImage = image\n    ? (image.startsWith(\"http\") ? image : `${defaultSiteUrl}${image}`)\n    : `${defaultSiteUrl}${defaultImage}`\n  const ogImage = imageOG || seoImage\n  const ogImageAlt = imageAltOG || ogDescription\n  const twImage = imageTwitter || seoImage\n  const twImageAlt = imageAltTwitter || twDescription\n  const seoSiteUrl = siteUrl || defaultSiteUrl\n  const seoSiteName = siteName || defaultSiteName\n  const seoCanonical = canonicalUrl || seoSiteUrl\n  const seoAuthor = author || defaultAuthor\n  const seoDatePublished = datePublished ? convertToISO(datePublished) : new Date().toISOString()\n  const seoDateModified = dateModified ? convertToISO(dateModified) : seoDatePublished\n  const seoTwitterUsername = twitterUsername || defaultTwitterUsername\n  const seoFacebookUsername = facebookUsername || defaultFacebookUsername\n  const seoKeywords = keywords || [\"\"]\n  const seoTag = mainTag || \"\"\n  const seoSection = section || \"\"\n  \n  let seoSectionClarified = \"\";\n  if (section === \"adventures\") { \n    seoSectionClarified = \"Travel\";\n  } else if (section === \"research\") { \n    seoSectionClarified = \"Technology\";\n  } else if (section === \"thoughts\") { \n    seoSectionClarified = \"Thoughts\";\n  }\n\n  const schemaJSON = generateSchema({\n    schemaType,\n    title: seoTitle,\n    description: seoDescription,\n    author: seoAuthor,\n    photo: photoAbout,\n    datePublished: seoDatePublished,\n    dateModified: seoDateModified,\n    url: seoCanonical,\n    image: seoImage,\n    siteName: seoSiteName,\n    siteUrl: seoSiteUrl,\n    siteLogo: icon,\n    keywords: seoKeywords,\n    section: seoSection,\n  })\n\n  return (\n    <>\n      <title>{seoTitle}</title>\n      <meta name=\"description\" content={seoDescription} />\n\n      {seoCanonical && <link rel=\"canonical\" href={seoCanonical} />}\n\n      {seoKeywords && (\n        <meta\n          name=\"keywords\"\n          content={Array.isArray(seoKeywords) ? seoKeywords.join(\", \") : seoKeywords}\n        />\n      )}\n\n      <meta property=\"og:title\" content={ogTitle} />\n      <meta property=\"og:description\" content={ogDescription} />\n      <meta property=\"og:updated_time\" content={seoDateModified} />\n      <meta property=\"og:type\" content={type} />\n      <meta property=\"og:url\" content={seoCanonical} />\n      <meta property=\"og:site_name\" content={seoSiteName} />\n      {ogImage && <meta property=\"og:image\" content={ogImage} />}\n      {imageWidth && <meta property=\"og:image:width\" content={imageWidth} />}\n      {imageHeight && <meta property=\"og:image:height\" content={imageHeight} />}\n      <meta property=\"og:image:alt\" content={ogImageAlt} />\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      {seoTwitterUsername && (<meta name=\"twitter:creator\" content={seoTwitterUsername} />)}\n      {seoTwitterUsername && (<meta name=\"twitter:site\" content={seoTwitterUsername} />)}\n      <meta name=\"twitter:title\" content={twTitle} />\n      <meta name=\"twitter:description\" content={twDescription} />\n      {twImage && <meta name=\"twitter:image\" content={twImage} />}\n      <meta name=\"twitter:image:alt\" content={twImageAlt} />\n\n      {type === \"article\" && (<meta property=\"article:published_time\" content={seoDatePublished} />)}\n      {type === \"article\" && (<meta property=\"article:modified_time\" content={seoDateModified} />)}\n      {type === \"article\" && seoSectionClarified && (<meta property=\"article:section\" content={seoSectionClarified} />)}\n      {type === \"article\" && seoAuthor && (<meta property=\"article:author\" content={seoAuthor} />)}\n      {type === \"article\" && seoFacebookUsername && (<meta property=\"article:publisher\" content={`https://www.facebook.com/${seoFacebookUsername}`} />)}\n      {type === \"article\" && seoTag && (<meta property=\"article:tag\" content={seoTag} />)}\n      {type === \"article\" && Array.isArray(seoKeywords) && \n        seoKeywords.map((keyword, i) => (\n          <meta key={i} property=\"article:tag\" content={keyword} />\n        ))\n      }\n\n      <meta name=\"robots\" content={flagHidden ? \"noindex, nofollow\" : \"index, follow\"} />\n\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaJSON)}\n      </script>\n\n      {children}\n    </>\n  )\n}\n\nexport default SEO\n","/* \n\nCopyright Â© 2022  Vladislav Averett (avrtt)\nDistributed under the GNU AGPLv3 license. For details and source code, please refer to <https://github.com/avrtt/avrtt.github.io>.\n\n*/\n\nimport { graphql, useStaticQuery } from \"gatsby\"\n\ninterface SiteMetadata {\n  title: string;\n  description: string;\n  image: string;\n  siteUrl: string;\n  siteName: string;\n  author: string;\n  twitterUsername: string;\n  facebookUsername: string;\n}\n\nexport const useSiteMetadata = (): SiteMetadata => {\n  const { site } = useStaticQuery<{ site: { siteMetadata: SiteMetadata } }>(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            image\n            siteUrl\n            siteName\n            author\n            twitterUsername\n            facebookUsername\n          }\n        }\n      }\n    `\n  )\n  return site.siteMetadata\n}","/* \n\nCopyright Â© 2022  Vladislav Averett (avrtt)\nDistributed under the GNU AGPLv3 license. For details and source code, please refer to <https://github.com/avrtt/avrtt.github.io>.\n\n*/\n\nimport React from 'react';\nimport SEO from '../../components/seo'\nimport { Link } from \"gatsby\";\nimport { motion } from 'framer-motion';\nimport { AnimationOnScroll } from 'react-animation-on-scroll';\nimport M from '../../components/Markdown';\nimport { videosLastUpdated } from '../../data/lastUpdated';\nimport 'animate.css/animate.min.css';\n\nconst Videos = () => {\n\treturn (\n\t\t<motion.div\n\t\t\tinitial={{ opacity: 0 }}\n\t\t\tanimate={{ opacity: 1 }}\n\t\t\texit={{ opacity: 0 }}\n\t\t\ttransition={{ duration: 0.15 }}>\n\n\t\t\t<div className=\"generalBody\">\n\t\t\t\t<p>I'm currently looking for a better way to forward saved notes from Telegram to here.</p>\n\t\t\t</div>\n\t\t\t<div className=\"lastUpdatedTalks\">UPDATED ON {videosLastUpdated}</div>\n\n\t  \t</motion.div>\n\t);\n};\n  \nexport default Videos;\n\nexport const Head = () => (\n  <SEO \n    title=\"Videos - avrtt.blog\"\n    description=\"\"\n    keywords={[\"\"]}\n    image={\"\"}\n    canonicalUrl=\"https://avrtt.github.io/videos\"\n    schemaType=\"WebPage\"\n    \n  />\n)\n"],"names":["convertToISO","dateString","day","month","year","split","map","Number","Date","toISOString","_ref2","title","titleOG","titleTwitter","description","descriptionOG","descriptionTwitter","schemaType","keywords","datePublished","dateModified","image","siteUrl","siteName","author","twitterUsername","facebookUsername","imageOG","imageAltOG","imageTwitter","imageAltTwitter","imageWidth","imageHeight","canonicalUrl","flagHidden","section","mainTag","type","children","defaultTitle","defaultDescription","defaultImage","defaultSiteUrl","defaultSiteName","defaultAuthor","defaultTwitterUsername","defaultFacebookUsername","useSiteMetadata","seoTitle","ogTitle","twTitle","seoDescription","ogDescription","twDescription","seoImage","startsWith","ogImage","ogImageAlt","twImage","twImageAlt","seoSiteUrl","seoSiteName","seoCanonical","seoAuthor","seoDatePublished","seoDateModified","seoTwitterUsername","seoFacebookUsername","seoKeywords","seoTag","seoSection","seoSectionClarified","schemaJSON","_ref","photo","url","siteLogo","baseSchema","headline","undefined","articleSection","name","sameAs","publisher","logo","mainEntityOfPage","Array","isArray","join","generateSchema","photoAbout","icon","React","content","rel","href","property","keyword","i","key","JSON","stringify","site","useStaticQuery","siteMetadata","Videos","motion","div","initial","opacity","animate","exit","transition","duration","className","videosLastUpdated","Head","SEO"],"sourceRoot":""}