{"version":3,"file":"component---src-templates-post-js-content-file-path-src-pages-posts-research-intro-to-llms-2-mdx-fd2da15cbc44b8b2f08c.js","mappings":"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","sources":["webpack://avrtt.blog/./src/pages/posts/research/intro_to_llms_2.mdx","webpack://avrtt.blog/./src/templates/post.js","webpack://avrtt.blog/./src/components/Latex/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\n/**(intro: a quote, catchphrase, joke, etc.)**/\n/*\n\n1. GPT Architectural Evolution\n- From GPT to GPT-2, GPT-3, and recent large-scale successors\n- Shifts in parameter counts, data size, and training objectives\n- Architectural design nuances (decoder-only stacks, parallel attention heads)\n2. Pre-training Models at Scale\n- The role of massive corpora in unsupervised learning\n- Curating and cleaning data (deduplication, filtering)\n- Challenges of trillion-token-scale corpora and data quality assurance\n3. Distributed Training and Infrastructure\n- Parallelization strategies (data parallel, model parallel, pipeline parallel)\n- Advanced GPU clusters and memory management\n- Monitoring distributed systems: logging, performance dashboards, bottleneck identification\n4. Training Optimization\n- Gradual warm-up, learning rate schedules, and gradient clipping\n- Mixed-precision (FP16, BF16) training for efficiency\n- Cutting-edge optimizers (AdamW, Lion) and how they impact convergence\n5. Fine-tuning and Domain Adaptation\n- Understanding transfer learning in the GPT family\n- Task-specific vs. domain-specific fine-tuning\n- Balancing catastrophic forgetting with knowledge retention\n6. Prompt Engineering & Inference Techniques\n- Crafting prompts to influence style and content\n- Zero-shot, one-shot, and few-shot prompting heuristics\n- Real-time inference considerations (caching, token streaming)\n7. Handling Long-Context Generation\n- Attention window limitations and memory complexity\n- Techniques like sparse attention and recurrent memory\n- Tradeoffs between memory consumption and context length\n8. Advanced Coherence and Control Methods\n- Prefix tuning and model gating for controlled generation\n- Reinforcement learning from human feedback (RLHF) fundamentals\n- Balancing creativity with factual accuracy in extended discourse\n9. Evaluation of Large Language Models\n- Automated benchmarks: strengths, pitfalls, and data leakage\n- Human evaluations at scale: annotated guidelines and crowd-sourced judgments\n- Model-based evaluation techniques (judge models, reward modeling)\n10. Quantization for Efficient Deployment\n- Base techniques for parameter quantization (FP16 to 4-bit)\n- Tools like GGUF & llama.cpp for CPU-based model inference\n- GPTQ, AWQ, and advanced calibration strategies to preserve performance\n11. Model Merging & Multi-Modality\n- Why researchers are exploring merging trained models (e.g., SLERP, DARE)\n- Creating multi-modal LLMs with textual, visual, and audio inputs\n- Cross-modal embeddings and how they expand LLM capabilities\n12. Interpretability and Mechanistic Understanding\n- Sparse autoencoders (SAEs) and abliteration techniques for analyzing hidden layers\n- Identifying “circuits” within attention heads to pinpoint how knowledge is stored\n- Challenges in bridging mechanistic transparency with massive parameter counts\n13. Test-Time Compute and Iterative Reasoning\n- Process Reward Models (PRMs) for multi-step inference\n- Budgeting computational resources in real-time scenarios\n- Iterative, chain-of-thought approaches for complex reasoning tasks\n14. Future Directions\n- Emerging trends in large-scale model developments (multilingual, bigger corpora)\n- Societal implications: misinformation, biases, and responsible AI deployment\n- Research outlook on specialized hardware and advanced architecture design\n\n*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Highlight from \"../../../components/Highlight\";\nimport Code from \"../../../components/Code\";\nimport Latex from \"../../../components/Latex\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    ul: \"ul\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components), {Image} = _components;\n  if (!Image) _missingMdxReference(\"Image\", true);\n  return React.createElement(React.Fragment, null, \"\\n\", React.createElement(\"br\"), \"\\n\", \"\\n\", React.createElement(_components.h2, {\n    id: \"gpt-architectural-evolution\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#gpt-architectural-evolution\",\n    \"aria-label\": \"gpt architectural evolution permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"gpt architectural evolution\"), \"\\n\", React.createElement(_components.p, null, \"The lineage of GPT (Generative Pre-trained Transformer) models has fundamentally reshaped how I approach large-scale language modeling and text generation. The original GPT (Radford and gang, 2018) introduced the central concept of a decoder-only Transformer architecture specialized for predicting the next token in a sequence. Although it had a comparatively modest number of parameters (in the range of hundreds of millions), GPT still signified a major departure from the previous wave of recurrent neural network language models, thanks to the self-attention mechanism powering Transformers (Vaswani and gang, 2017).\"), \"\\n\", React.createElement(_components.p, null, \"GPT-2 (Radford and gang, 2019) scaled up this approach considerably, reaching around 1.5 billion parameters in its largest configuration. The training data also expanded dramatically, spanning roughly 40 GB of Internet text. By significantly broadening the model size and focusing on next-token prediction over diverse domains of text, GPT-2 demonstrated unexpectedly coherent text generation, strong zero-shot capabilities for various language tasks, and a surprising capacity to encode rudimentary world knowledge.\"), \"\\n\", React.createElement(_components.p, null, \"GPT-3 (Brown and gang, 2020) escalated this scaling approach to unprecedented levels, with up to 175 billion parameters, showing that bigger indeed can be better in the realm of language models. GPT-3's training spanned hundreds of billions of tokens, unlocking notable capabilities like coherent story generation, code generation, and emergent few-shot in-context learning. This progression illustrated a scaling hypothesis: that further increases in parameter counts and data size can lead to improved performance across a wide array of natural language tasks, often in a zero-shot or few-shot setting.\"), \"\\n\", React.createElement(_components.p, null, \"Beyond GPT-3, more recent large-scale successors have emerged. GPT-3.5 and GPT-4 (OpenAI, 2023) introduced refined training procedures, alignment techniques such as RLHF (Ouyang and gang, 2022), and potential expansions to handle a broader range of tasks. At these scales, subtle design choices — including hyperparameter tuning, gating mechanisms, and specialized computational kernels — play an outsized role in performance. I have observed that the line between architectural novelty and mere scaling has begun to blur, as even small architectural tweaks can be amplified significantly at massive parameter counts.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"shifts-in-parameter-counts-data-size-and-training-objectives\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#shifts-in-parameter-counts-data-size-and-training-objectives\",\n    \"aria-label\": \"shifts in parameter counts data size and training objectives permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"shifts in parameter counts, data size, and training objectives\"), \"\\n\", React.createElement(_components.p, null, \"A defining feature in the GPT lineage is the interplay among parameter count, data size, and training objectives. Early on, the standard practice for GPT was next-token prediction, also known as auto-regressive language modeling. Formally, for a sequence of tokens \", React.createElement(Latex, {\n    text: \"\\\\(X = \\\\{x_1, x_2, \\\\ldots, x_n\\\\}\\\\)\"\n  }), \", I train a model to learn the distribution:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\nP(x_1, \\\\ldots, x_n) = \\\\prod_{t=1}^n P(x_t \\\\mid x_1, \\\\ldots, x_{t-1}).\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Here, \", React.createElement(Latex, {\n    text: \"\\\\(P(x_t \\\\mid x_1, \\\\ldots, x_{t-1})\\\\)\"\n  }), \" is modeled by a deep neural network — in this case, a decoder-only Transformer. When scaling from GPT to GPT-2 and GPT-3, the leaps in parameter counts have relied heavily on increasing the width (hidden dimension size), depth (number of layers), and the number of attention heads in each layer. Similarly, data sets ballooned from a few gigabytes to hundreds of gigabytes or even a trillion tokens in more recent endeavors, underscoring that a vital aspect of success in LLMs is the synergy between large-scale data and large-scale models.\"), \"\\n\", React.createElement(_components.p, null, \"Moreover, new training objectives have emerged to address some limitations of plain auto-regressive next-token prediction. GPT-3.5 and GPT-4, for instance, incorporate additional supervised fine-tuning data to align models with user preferences, ethical constraints, and domain specificity. Alternatively, some researchers are exploring masked or denoising objectives adapted to a decoder-only pipeline, though the standard GPT approach remains dominated by pure next-token prediction.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"architectural-design-nuances-decoder-only-stacks-parallel-attention-heads\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#architectural-design-nuances-decoder-only-stacks-parallel-attention-heads\",\n    \"aria-label\": \"architectural design nuances decoder only stacks parallel attention heads permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"architectural design nuances (decoder-only stacks, parallel attention heads)\"), \"\\n\", React.createElement(_components.p, null, \"Architecturally, GPT belongs to the general family of Transformer models. The canonical Transformer includes both an encoder and a decoder, but GPT is strictly a decoder-only stack. This design focuses the model on generating the next token conditioned on the entire left context, which proves extremely powerful in generative tasks.\"), \"\\n\", React.createElement(_components.p, null, \"Concretely, in each layer, the model uses a masked multi-head self-attention mechanism:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\mathrm{Attention}(Q, K, V) = \\\\mathrm{softmax}\\\\left(\\\\frac{QK^T}{\\\\sqrt{d_k}}\\\\right) V,\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\(Q\\\\)\"\n  }), \" (query), \", React.createElement(Latex, {\n    text: \"\\\\(K\\\\)\"\n  }), \" (key), and \", React.createElement(Latex, {\n    text: \"\\\\(V\\\\)\"\n  }), \" (value) matrices are linear transformations of the hidden states. The mask ensures that each position only attends to positions to its left in the sequence. GPT stacks many such layers (anywhere from 12 to 96 or more, depending on the variant), with a final linear projection to the vocabulary space.\"), \"\\n\", React.createElement(_components.p, null, \"Parallel attention heads, typically 8 to 128, split the hidden dimension into multiple subspaces for specialized attention patterns. This parallel structure allows the network to focus on different syntactic or semantic relationships. GPT implementations have also introduced novel scaling factors for layer normalization, alternative position embeddings like rotary position embeddings (Su and gang, 2021), and sometimes dynamic position embeddings, all of which aim to enhance training stability and performance at large scales.\"), \"\\n\", React.createElement(_components.p, null, \"I have found that even small changes in these architectural components can have a significant effect when scaled to billions or trillions of parameters. The GPT evolution demonstrates that architecture matters, but that the overall blueprint of decoder-only attention-based layers remains at the heart of large-scale text-generation models.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"pre-training-models-at-scale\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#pre-training-models-at-scale\",\n    \"aria-label\": \"pre training models at scale permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"pre-training models at scale\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"the-role-of-massive-corpora-in-unsupervised-learning\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#the-role-of-massive-corpora-in-unsupervised-learning\",\n    \"aria-label\": \"the role of massive corpora in unsupervised learning permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"the role of massive corpora in unsupervised learning\"), \"\\n\", React.createElement(_components.p, null, \"A central pillar of GPT's performance is the gargantuan size of its training corpus. Early models used a curated subset of the Internet (e.g., outbound Reddit links, Wikipedia, and news), whereas modern GPT derivatives are fed trillions of tokens drawn from sources like Common Crawl, large curated data sets from digital libraries, online text repositories, and user-generated content from diverse regions of the web.\"), \"\\n\", React.createElement(_components.p, null, \"Intuitively, scaling up the training corpus provides the model with exposure to a rich variety of styles, dialects, domains, specialized knowledge, and writing forms. This fosters GPT's versatile zero-shot and few-shot capabilities: it can respond in multiple languages, generate code in distinct programming languages, or adapt to unusual rhetorical styles simply by being prompted with relevant examples. Research from Brown and gang (2020) underscores that the interplay of larger data sets with deeper networks is a key driver of emergent behavior like in-context learning.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"curating-and-cleaning-data-deduplication-filtering\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#curating-and-cleaning-data-deduplication-filtering\",\n    \"aria-label\": \"curating and cleaning data deduplication filtering permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"curating and cleaning data (deduplication, filtering)\"), \"\\n\", React.createElement(_components.p, null, \"When building massive corpora, I cannot overstate the importance of data cleaning. Deduplication is crucial: large data sets often accumulate repeated passages, news stories, or entire books. Training repeatedly on identical or near-identical text can lead to overfitting or degrade generalization for certain tasks. Thus, many GPT pipelines incorporate advanced n-gram or fuzzy matching deduplication routines.\"), \"\\n\", React.createElement(_components.p, null, \"Filtering is also essential. Using domain filters or quality-based heuristics can eliminate low-value text such as boilerplate code, spam pages, or encoded data that does not represent human language. Additional considerations, such as removing private or personal data, can help address privacy concerns. For instance, some pipelines carefully filter personally identifiable information or explicit, harmful text to balance broad coverage with ethical constraints.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"challenges-of-trillion-token-scale-corpora-and-data-quality-assurance\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#challenges-of-trillion-token-scale-corpora-and-data-quality-assurance\",\n    \"aria-label\": \"challenges of trillion token scale corpora and data quality assurance permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"challenges of trillion-token-scale corpora and data quality assurance\"), \"\\n\", React.createElement(_components.p, null, \"At trillion-token scales, data engineering becomes a logistical and computational feat. Copying, processing, and shuffling the data requires distributed storage solutions like network file systems or object stores in the cloud. Ensuring that each sample is read efficiently and distributed among many workers for parallel training can be a bottleneck unless done with specialized data-loading libraries.\"), \"\\n\", React.createElement(_components.p, null, \"Moreover, controlling data quality at these scales can be difficult. Undesired biases, offensive content, or subtle factual inaccuracies can slip through. I have also seen the problem of domain shift: if certain domains are overrepresented, the model can develop skewed representations or knowledge gaps in underrepresented fields. Balancing these concerns is a continuous challenge in large language model development.\"), \"\\n\", React.createElement(_components.p, null, \"Researchers such as Hoffmann and gang (2022) have investigated the optimal ratio of model size to data size, revealing that overfitting can arise if the model is scaled without a proportionate increase in training data. This has guided new data collection efforts, ensuring that more massive models continue to benefit from an equally massive corpus.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"distributed-training-and-infrastructure\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#distributed-training-and-infrastructure\",\n    \"aria-label\": \"distributed training and infrastructure permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"distributed training and infrastructure\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"parallelization-strategies-data-parallel-model-parallel-pipeline-parallel\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#parallelization-strategies-data-parallel-model-parallel-pipeline-parallel\",\n    \"aria-label\": \"parallelization strategies data parallel model parallel pipeline parallel permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"parallelization strategies: data parallel, model parallel, pipeline parallel\"), \"\\n\", React.createElement(_components.p, null, \"Training GPT-scale models typically exceeds the memory capacity of a single GPU. Consequently, distributed training strategies have become a necessity. I see three primary strategies:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"data parallel\"), \": Each GPU (or worker) receives a different mini-batch of data, but the entire model is replicated across workers. Gradients are aggregated after each forward/backward pass. This strategy is straightforward for moderately sized models, but once you surpass tens of billions of parameters, simply replicating the entire model on every GPU is infeasible.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"model parallel\"), \": Large weight matrices or sets of parameters are split across different devices. Each device holds only part of the entire model. This is commonly implemented in layers that contain large fully connected modules or attention heads, distributing weights across multiple GPUs. The forward pass relies on collective communication to unify partial computations.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"pipeline parallel\"), \": The model is split by layers into different pipeline stages, each assigned to one or more devices. The data flows through the pipeline stage by stage. This allows you to hold only the layers you need on each device, at the cost of some idle time while micro-batches are pipelined.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Hybrid approaches often combine data parallel with model parallel or pipeline parallel to fully utilize GPU memory and computational throughput. DeepSpeed (Microsoft) and Megatron-LM (NVIDIA) are frameworks that provide these capabilities out of the box.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"advanced-gpu-clusters-and-memory-management\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#advanced-gpu-clusters-and-memory-management\",\n    \"aria-label\": \"advanced gpu clusters and memory management permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"advanced gpu clusters and memory management\"), \"\\n\", React.createElement(_components.p, null, \"High-performance GPU clusters used for GPT training can involve hundreds or thousands of GPUs interconnected with high-speed links such as InfiniBand. Communication overhead becomes significant, making the design of the cluster's topology (e.g., fully connected or hierarchical) a major factor in training efficiency. Keeping GPUs busy with minimal downtime is an optimization puzzle in its own right.\"), \"\\n\", React.createElement(_components.p, null, \"Memory management is equally challenging. Activations, gradients, optimizer states, and enormous embeddings must fit into GPU memory, which might be as little as 24 GB or as large as 80 GB per card. Techniques like gradient checkpointing reduce memory usage by trading off additional compute for re-computing intermediate activations during backpropagation. Sharded optimizers like ZeRO (Rajbhandari and gang, 2020) distribute the optimizer states across devices, preventing memory from exploding in scale. Mixed-precision training (FP16, BF16) also lightens memory footprints.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"monitoring-distributed-systems-logging-performance-dashboards-bottleneck-identification\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#monitoring-distributed-systems-logging-performance-dashboards-bottleneck-identification\",\n    \"aria-label\": \"monitoring distributed systems logging performance dashboards bottleneck identification permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"monitoring distributed systems: logging, performance dashboards, bottleneck identification\"), \"\\n\", React.createElement(_components.p, null, \"At large scale, meticulously tracking system metrics is crucial for debugging and performance tuning. Logging frameworks must record hardware usage (GPU memory, utilization, temperature), network throughput, and key metrics like training loss, gradient norm, or iteration time. Tools like TensorBoard, Weights & Biases, or custom monitoring solutions integrated with HPC job schedulers help me identify bottlenecks.\"), \"\\n\", React.createElement(_components.p, null, \"If the network is saturating or if one node is lagging behind in exchanging gradients, training can slow drastically. Real-time dashboards highlight these anomalies. Monitoring memory fragmentation is also important, as repeated allocation/deallocation can degrade performance. Overall, stable high-speed connectivity and balanced resource usage are essential to keep training on track over weeks or months.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"training-optimization\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#training-optimization\",\n    \"aria-label\": \"training optimization permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"training optimization\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"gradual-warm-up-learning-rate-schedules-and-gradient-clipping\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#gradual-warm-up-learning-rate-schedules-and-gradient-clipping\",\n    \"aria-label\": \"gradual warm up learning rate schedules and gradient clipping permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"gradual warm-up, learning rate schedules, and gradient clipping\"), \"\\n\", React.createElement(_components.p, null, \"One of the first lessons I learned in scaling GPT models is that naive training with a high initial learning rate can cause instability. Gradual warm-up is a technique where I start with a small learning rate and gradually ramp up over a predefined number of steps. This stabilizes early-stage training before ramping to a higher learning rate.\"), \"\\n\", React.createElement(_components.p, null, \"After warm-up, a scheduled decay (e.g., inverse square root, cosine decay, or step-based schedules) helps the model converge. GPT-3, for instance, used a carefully tuned cosine schedule. Gradient clipping — typically by global norm — prevents updates from exploding when large, possibly outlier gradients occur in deep layers.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"mixed-precision-fp16-bf16-training-for-efficiency\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#mixed-precision-fp16-bf16-training-for-efficiency\",\n    \"aria-label\": \"mixed precision fp16 bf16 training for efficiency permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"mixed-precision (fp16, bf16) training for efficiency\"), \"\\n\", React.createElement(_components.p, null, \"Mixed-precision training is by now a mainstay in GPT pipelines. The model's parameters and activations are stored in half-precision (16-bit float) or brain float 16, while certain accumulators (like in the optimizer) remain in 32-bit float. This reduces memory usage and can provide a substantial speedup on modern GPUs with Tensor Cores or specialized matrix multiplication units. However, it does come with a risk of numerical underflow or overflow if not carefully managed. Dynamic loss scaling is often used to mitigate these issues.\"), \"\\n\", React.createElement(_components.p, null, \"FP16 sometimes triggers numerical stability issues, especially for models with tens of billions of parameters. BF16 is more robust because it has a larger exponent range. Many training pipelines now default to BF16 in hardware that supports it (e.g., A100 or H100 GPUs).\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"cutting-edge-optimizers-adamw-lion-and-how-they-impact-convergence\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#cutting-edge-optimizers-adamw-lion-and-how-they-impact-convergence\",\n    \"aria-label\": \"cutting edge optimizers adamw lion and how they impact convergence permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"cutting-edge optimizers (adamw, lion) and how they impact convergence\"), \"\\n\", React.createElement(_components.p, null, \"While the original GPT used the Adam optimizer, subsequent versions often use AdamW, an improved variant that decouples weight decay from the gradient-based updates. This approach can help prevent overfitting and yield more stable training for large-scale models.\"), \"\\n\", React.createElement(_components.p, null, \"Recently, new optimizers like LION (Chen and gang, 2023) have shown promising results, potentially reducing the computational overhead of each update or converging in fewer steps. LION uses sign-based updates, saving on floating-point operations. However, the ultimate success of any optimizer is highly sensitive to hyperparameters, including the learning rate. I personally find that in the context of GPT-scale models, incremental improvements in optimizers can translate to large absolute gains due to the sheer amount of computation involved. Still, tried-and-true AdamW remains a powerful default.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"fine-tuning-and-domain-adaptation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#fine-tuning-and-domain-adaptation\",\n    \"aria-label\": \"fine tuning and domain adaptation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"fine-tuning and domain adaptation\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"understanding-transfer-learning-in-the-gpt-family\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#understanding-transfer-learning-in-the-gpt-family\",\n    \"aria-label\": \"understanding transfer learning in the gpt family permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"understanding transfer learning in the gpt family\"), \"\\n\", React.createElement(_components.p, null, \"One of the most powerful aspects of GPT is its ability to be fine-tuned on downstream tasks with relatively little data, a phenomenon made possible by the massive amounts of knowledge encoded during pre-training. This is transfer learning: the general-purpose language distribution is adapted to a specific domain or task.\"), \"\\n\", React.createElement(_components.p, null, \"During fine-tuning, the model is trained on supervised examples or domain-specific text, typically using the same next-token prediction objective or a specialized objective (like classification, QA, etc.). This can quickly improve performance on narrower tasks, but I have to be cautious about overshadowing the broad, general knowledge that GPT gained from pre-training.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"task-specific-vs-domain-specific-fine-tuning\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#task-specific-vs-domain-specific-fine-tuning\",\n    \"aria-label\": \"task specific vs domain specific fine tuning permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"task-specific vs. domain-specific fine-tuning\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"task-specific fine-tuning\"), \": If I'm training GPT for question-answering, I might feed labeled (question, answer) pairs. The model is optimized to predict the correct answer tokens after the question prompt. This approach can lead to strong improvements, especially if the domain is specialized (e.g., biomedical QA, legal text analysis).\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"domain-specific fine-tuning\"), \": If I want GPT to excel at generating text in a particular style — for example, scientific articles in physics — I would fine-tune on a corpus of domain-relevant scientific text. This improves coherence and specialized terminology usage but can risk catastrophic forgetting of general world knowledge if not done carefully.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Additionally, parameter-efficient fine-tuning techniques like LoRA (Hu and gang, 2021), prefix tuning (Li & Liang, 2021), or adapters can reduce the computational overhead. These methods typically freeze most of the pretrained weights and only update small additional modules or low-rank matrices.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"balancing-catastrophic-forgetting-with-knowledge-retention\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#balancing-catastrophic-forgetting-with-knowledge-retention\",\n    \"aria-label\": \"balancing catastrophic forgetting with knowledge retention permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"balancing catastrophic forgetting with knowledge retention\"), \"\\n\", React.createElement(_components.p, null, \"A crucial challenge is catastrophic forgetting: heavy fine-tuning might degrade the model's performance on general tasks not related to the new domain. Several techniques mitigate this:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"lightweight fine-tuning\"), \": Freezing lower layers and only updating top layers or specialized \\\"heads\\\" helps preserve general language knowledge.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"adapter modules\"), \": Inserting small adapter layers between Transformer blocks and training only those can help isolate domain-specific changes.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"multi-domain training\"), \": Combining domain data with a subset of the original corpora or a broad data mixture can maintain general capabilities.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"I recommend careful validation on multiple tasks or sets of prompts to check that the model has not lost performance in unintended ways. This helps maintain a balanced approach to domain adaptation.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"prompt-engineering--inference-techniques\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#prompt-engineering--inference-techniques\",\n    \"aria-label\": \"prompt engineering  inference techniques permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"prompt engineering & inference techniques\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"crafting-prompts-to-influence-style-and-content\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#crafting-prompts-to-influence-style-and-content\",\n    \"aria-label\": \"crafting prompts to influence style and content permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"crafting prompts to influence style and content\"), \"\\n\", React.createElement(_components.p, null, \"For GPT-like models, the text prompt is not just an input — it is a primary driver of the model's generated outputs. Prompt engineering is the art of designing these prompts to steer the model's style, coherence, and content. Simple strategies might involve providing explicit instructions: \\\"Write an email to my client explaining our new product...\\\", or \\\"List the key points from the following article...\\\". More advanced strategies can incorporate role-play instructions, few-shot examples, or system messages that set the context and persona.\"), \"\\n\", React.createElement(_components.p, null, \"At scale, GPT demonstrates emergent in-context learning. By providing a few labeled examples in the prompt, I can coax the model to solve tasks without modifying any actual model parameters. This approach, popularized by GPT-3, effectively repurposes the giant pre-trained model as a meta-learner that can interpret and adapt to new instructions on the fly.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"zero-shot-one-shot-and-few-shot-prompting-heuristics\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#zero-shot-one-shot-and-few-shot-prompting-heuristics\",\n    \"aria-label\": \"zero shot one shot and few shot prompting heuristics permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"zero-shot, one-shot, and few-shot prompting heuristics\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"zero-shot prompting\"), \": Present only an instruction or question with no examples: \\\"Translate the following sentence to French: \\\"I like chocolate.\\\"\\\".\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"one-shot prompting\"), \": Provide exactly one worked example before the actual query:\", \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">English: \\\"I love coffee.\\\"\\nFrench: \\\"J'aime le café.\\\"\\n\\nTranslate the following sentence to French: \\\"I like chocolate.\\\"</code></pre></div>\"\n    }\n  }), \"\\n\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"few-shot prompting\"), \": Offer multiple demonstration examples to set a pattern. This can drastically improve performance if the domain or style is non-trivial, because the model recognizes the implicit structure from the examples.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Additionally, subtle changes in wording, punctuation, or ordering of examples in the prompt can shift the output drastically. Thus, I might rely on iterative experimentation or systematic prompt search to find the best phrasing.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"real-time-inference-considerations-caching-token-streaming\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#real-time-inference-considerations-caching-token-streaming\",\n    \"aria-label\": \"real time inference considerations caching token streaming permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"real-time inference considerations (caching, token streaming)\"), \"\\n\", React.createElement(_components.p, null, \"Inference with GPT requires generating tokens one by one in an auto-regressive fashion, incurring a certain latency. To alleviate overhead, caching the internal key-value states from previous tokens is critical. Instead of recomputing the entire sequence at every step, the model reuses stored states for the next forward pass. This speeds up real-time generation considerably, especially for long outputs.\"), \"\\n\", React.createElement(_components.p, null, \"Token streaming, where the model outputs tokens gradually, can also be an effective user interface technique. The user sees partial output as it is generated, reminiscent of how a person types. This requires an infrastructure that processes partial outputs and sends them in near real time. Combined with caching, streaming can deliver an interactive experience, even for large models on powerful hardware.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"handling-long-context-generation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#handling-long-context-generation\",\n    \"aria-label\": \"handling long context generation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"handling long-context generation\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"attention-window-limitations-and-memory-complexity\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#attention-window-limitations-and-memory-complexity\",\n    \"aria-label\": \"attention window limitations and memory complexity permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"attention window limitations and memory complexity\"), \"\\n\", React.createElement(_components.p, null, \"A standard GPT model typically has a fixed attention window (e.g., 2048 tokens for GPT-2 or GPT-3). This is a function of how the positional embeddings are implemented and how the memory usage scales with sequence length. The computational cost of multi-head attention grows quadratically with the sequence length. For very long documents (like entire books), this can be prohibitively expensive, both computationally and in terms of GPU memory.\"), \"\\n\", React.createElement(_components.p, null, \"If I want the model to handle extremely long contexts, say 8,192 tokens or 32,768 tokens, I need to address both the training memory overhead and the potentially slower inference. Architectures that employ efficient or sparse attention mechanisms (Child and gang, 2019; Zaheer and gang, 2020) can help reduce the quadratic cost to linear or near-linear in some cases.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"techniques-like-sparse-attention-and-recurrent-memory\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#techniques-like-sparse-attention-and-recurrent-memory\",\n    \"aria-label\": \"techniques like sparse attention and recurrent memory permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"techniques like sparse attention and recurrent memory\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"sparse attention\"), \" selectively restricts which tokens attend to which other tokens, removing the need for a full \", React.createElement(Latex, {\n    text: \"\\\\(O(n^2)\\\\)\"\n  }), \" operation. Sparse Transformers by Child and gang (2019) introduced factorized attention patterns for sequences like audio or images. For text, I can apply a local or strided pattern that only attends to nearby tokens or tokens at regular intervals, letting the context grow to thousands of tokens with more tractable memory usage.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"recurrent memory\"), \" approaches store a summary of the sequence processed so far in a fixed-size hidden state. Some advanced GPT-like models incorporate a memory mechanism that can be updated with new tokens and recalled later. This can turn the model from a pure feed-forward architecture into one that can handle indefinite contexts by chunking sequences into segments. However, performance might degrade if the memory summarization loses too much detail.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"tradeoffs-between-memory-consumption-and-context-length\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#tradeoffs-between-memory-consumption-and-context-length\",\n    \"aria-label\": \"tradeoffs between memory consumption and context length permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"tradeoffs between memory consumption and context length\"), \"\\n\", React.createElement(_components.p, null, \"Every new approach to expanding the context window involves tradeoffs. Sparse attention might reduce the fidelity of how tokens interact if they are far apart. Recurrent memory can miss subtle dependencies if the summarization is lossy. Extending the standard dense attention window to tens of thousands of tokens results in huge memory consumption. In practice, many industrial deployments strike a balance by using multi-stage approaches, such as summarization or chunk-based retrieval, especially if the entire text does not need to be considered at once.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"advanced-coherence-and-control-methods\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#advanced-coherence-and-control-methods\",\n    \"aria-label\": \"advanced coherence and control methods permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"advanced coherence and control methods\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"prefix-tuning-and-model-gating-for-controlled-generation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#prefix-tuning-and-model-gating-for-controlled-generation\",\n    \"aria-label\": \"prefix tuning and model gating for controlled generation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"prefix tuning and model gating for controlled generation\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"prefix tuning\"), \" (Li & Liang, 2021) is a technique to steer generation without fine-tuning the model fully. It prepends trainable prefixes of hidden states or key-value pairs to the input, effectively conditioning the entire GPT on a certain context or style. This method can guide the model's distribution toward specialized tasks or styles while leaving the main parameters untouched. It's an elegant way to impose constraints or adapt the model for a specific domain with minimal overhead.\"), \"\\n\", React.createElement(_components.p, null, \"Another strategy is controlling the generation process through gating mechanisms or specialized modules that modulate attention layers. By injecting a gating vector that influences how strongly certain heads respond, I can direct the model to produce text that adheres to specified guidelines or style constraints. The gating coefficients might be learned from a curated corpus or set by an external policy.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"reinforcement-learning-from-human-feedback-rlhf-fundamentals\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#reinforcement-learning-from-human-feedback-rlhf-fundamentals\",\n    \"aria-label\": \"reinforcement learning from human feedback rlhf fundamentals permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"reinforcement learning from human feedback (rlhf) fundamentals\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"RLHF\"), \" merges large language models with reinforcement learning to align them with human preferences or values. In typical setups (Christiano and gang, 2017; Ouyang and gang, 2022), a reward model is trained on data where human annotators label the better of two candidate model outputs. Then, the language model is fine-tuned using an RL objective that maximizes the reward given by this preference model.\"), \"\\n\", React.createElement(_components.p, null, \"This approach has proven effective in reducing problematic behaviors like toxicity or factual errors, but it is not a silver bullet. The model might still exhibit unpredicted behaviors or fail in corner cases. Nonetheless, RLHF has become a crucial method for improving LLM reliability and user experience. GPT-4, for instance, integrates such alignment steps extensively.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"balancing-creativity-with-factual-accuracy-in-extended-discourse\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#balancing-creativity-with-factual-accuracy-in-extended-discourse\",\n    \"aria-label\": \"balancing creativity with factual accuracy in extended discourse permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"balancing creativity with factual accuracy in extended discourse\"), \"\\n\", React.createElement(_components.p, null, \"Long-form generation is a domain where GPT can produce mesmerizing stories, dialogues, and expository essays. However, the model can also \\\"hallucinate\\\" facts or drift off topic. Achieving the right balance between creativity and factual correctness is an ongoing research challenge. Techniques like controlled decoding (e.g., top-k or nucleus sampling with constraints), or the insertion of external knowledge retrieval modules, can reduce factual inaccuracies. At the same time, the model must preserve enough freedom to generate text that is both coherent and imaginative.\"), \"\\n\", React.createElement(_components.p, null, \"Some researchers embed knowledge graphs or fact-checking modules that cross-verify the generated statements with stored knowledge. Others use chain-of-thought prompting (Wei and gang, 2022) to encourage the model to reason step by step. While these methods are promising, they often increase computational requirements and complexity. I see this tradeoff as emblematic of the frontier in GPT-based text generation research.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"evaluation-of-large-language-models\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#evaluation-of-large-language-models\",\n    \"aria-label\": \"evaluation of large language models permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"evaluation of large language models\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"automated-benchmarks-strengths-pitfalls-and-data-leakage\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#automated-benchmarks-strengths-pitfalls-and-data-leakage\",\n    \"aria-label\": \"automated benchmarks strengths pitfalls and data leakage permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"automated benchmarks: strengths, pitfalls, and data leakage\"), \"\\n\", React.createElement(_components.p, null, \"Evaluating GPT-like models is tricky because of their vast knowledge coverage and emergent abilities. Automated benchmarks such as GLUE, SuperGLUE, or BIG-Bench provide standardized tasks. However, a model trained on large-scale Internet text might inadvertently see parts of test data during pre-training (known as data leakage). If the model has memorized or partially memorized test examples, the benchmark scores might inflate.\"), \"\\n\", React.createElement(_components.p, null, \"Another pitfall is the changing nature of benchmarks. As LLMs advance, older benchmarks no longer effectively discriminate between models. Researchers are pushing new challenge sets that measure reasoning, factual consistency, interpretability, or adversarial robustness. However, these new sets also risk being seen by future models. This cat-and-mouse game is an ongoing issue in model evaluation.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"human-evaluations-at-scale-annotated-guidelines-and-crowd-sourced-judgments\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#human-evaluations-at-scale-annotated-guidelines-and-crowd-sourced-judgments\",\n    \"aria-label\": \"human evaluations at scale annotated guidelines and crowd sourced judgments permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"human evaluations at scale: annotated guidelines and crowd-sourced judgments\"), \"\\n\", React.createElement(_components.p, null, \"Despite the utility of automated metrics (perplexity, BLEU, ROUGE, etc.), large-scale human evaluation is still the gold standard for capturing intangible qualities like coherence, factual correctness, or stylistic appropriateness. Guidelines for crowd-sourced labeling typically define criteria for a good response: correctness, fluency, helpfulness, and so on.\"), \"\\n\", React.createElement(_components.p, null, \"I have observed that consistent human evaluation requires well-designed annotation workflows with clear rubrics and training for annotators. Inter-annotator agreement is critical. For tasks that involve subjective judgment (e.g., creative writing, humor, or ethical guidelines), the subjectivity intensifies. Some labs rely on hundreds or thousands of crowd-sourced workers rating model outputs over carefully curated test prompts.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"model-based-evaluation-techniques-judge-models-reward-modeling\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#model-based-evaluation-techniques-judge-models-reward-modeling\",\n    \"aria-label\": \"model based evaluation techniques judge models reward modeling permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"model-based evaluation techniques (judge models, reward modeling)\"), \"\\n\", React.createElement(_components.p, null, \"An emerging trend is to train a separate \\\"judge model\\\" or \\\"reward model\\\" to predict human preference or evaluate the correctness of an answer. RLHF is one application of this. Another approach is to use specialized large language models to assess the output of other models. This leads to efficiency gains in evaluation, though it also raises concerns about whether the judge models share the same biases or knowledge gaps as the original LLMs.\"), \"\\n\", React.createElement(_components.p, null, \"For multi-turn dialogues or extended text generation, a judge model can look at entire transcripts and produce a numeric score or textual critique. This speeds up iteration on new model variants, but I must be aware that an imperfect judge may systematically over- or under-estimate the performance of certain styles of output.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"quantization-for-efficient-deployment\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#quantization-for-efficient-deployment\",\n    \"aria-label\": \"quantization for efficient deployment permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"quantization for efficient deployment\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"base-techniques-for-parameter-quantization-fp16-to-4-bit\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#base-techniques-for-parameter-quantization-fp16-to-4-bit\",\n    \"aria-label\": \"base techniques for parameter quantization fp16 to 4 bit permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"base techniques for parameter quantization (fp16 to 4-bit)\"), \"\\n\", React.createElement(_components.p, null, \"Parameter quantization is a key strategy to reduce model size and increase inference efficiency. At its simplest, I can store weights and activations in 8-bit or 4-bit integers instead of the default 16- or 32-bit floats. This not only cuts down memory but also increases throughput on specialized hardware that supports integer matrix multiplication.\"), \"\\n\", React.createElement(_components.p, null, \"However, naive quantization can degrade performance if not done carefully. Some weights or channels might be more sensitive to rounding errors. Post-training quantization might work for smaller networks or simpler tasks but can be detrimental for GPT-scale models. Many advanced workflows now do quantization-aware training, calibrating the ranges of weights and activations to maintain precision where it matters most.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"tools-like-gguf--llamacpp-for-cpu-based-model-inference\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#tools-like-gguf--llamacpp-for-cpu-based-model-inference\",\n    \"aria-label\": \"tools like gguf  llamacpp for cpu based model inference permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"tools like gguf & llama.cpp for cpu-based model inference\"), \"\\n\", React.createElement(_components.p, null, \"A surge of open-source efforts has emerged that make LLMs feasible for CPU-based inference on commodity hardware. Tools like llama.cpp introduced quantization schemes (e.g., Q4_0, Q4_1, GPTQ-based quantizations) to run models like LLaMA on desktop CPUs. Some improvements, such as GGUF, refine these integer quantization approaches further, providing a sweet spot between compression ratio and minimal accuracy loss.\"), \"\\n\", React.createElement(_components.p, null, \"By pushing models down to 4-bit quantization, it's possible to load multi-billion-parameter GPT models on a single consumer GPU or even within tens of gigabytes of CPU RAM. Of course, the generation might still be slower compared to data center accelerators, but it opens new frontiers for local deployment and private usage.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"gptq-awq-and-advanced-calibration-strategies-to-preserve-performance\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#gptq-awq-and-advanced-calibration-strategies-to-preserve-performance\",\n    \"aria-label\": \"gptq awq and advanced calibration strategies to preserve performance permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"gptq, awq, and advanced calibration strategies to preserve performance\"), \"\\n\", React.createElement(_components.p, null, \"GPTQ (Frantar and gang, 2022) is an algorithm for post-training quantization specifically targeting GPT-like architectures. It leverages a layer-by-layer optimization that aims to preserve the model's output distribution as much as possible under low-bit representations. AWQ is a related approach that adaptively identifies the most critical weights for high-precision representation.\"), \"\\n\", React.createElement(_components.p, null, \"Such quantizers rely on calibration sets (small subsets of data that approximate the model's intended usage). They compute activation ranges or re-scale weights to minimize the difference in output distribution before and after quantization. I have seen that these advanced calibration strategies can retain most of the model's performance even at 4-bit or 3-bit precision levels, provided the calibration data is representative of real inference tasks.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"model-merging--multi-modality\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#model-merging--multi-modality\",\n    \"aria-label\": \"model merging  multi modality permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"model merging & multi-modality\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"why-researchers-are-exploring-merging-trained-models-eg-slerp-dare\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#why-researchers-are-exploring-merging-trained-models-eg-slerp-dare\",\n    \"aria-label\": \"why researchers are exploring merging trained models eg slerp dare permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"why researchers are exploring merging trained models (e.g. slerp, dare)\"), \"\\n\", React.createElement(_components.p, null, \"Model merging (or model fusion) attempts to combine two or more separately trained models into a single set of parameters without retraining from scratch. Techniques like SLERP (Spherical Linear Interpolation) or DARE revolve around interpolating or merging weights from different checkpoints in a way that preserves knowledge from each. This is particularly interesting for domain adaptation: if I have a GPT fine-tuned on biomedical text and another fine-tuned on legal text, merging them might yield a single model with combined competencies.\"), \"\\n\", React.createElement(_components.p, null, \"However, naive merging of model weights can cause catastrophic interference. Approaches that systematically align internal representations or average them in a geometry-aware fashion (on a manifold) can improve synergy. I see ongoing research into whether these merges can produce emergent generalization beyond either individual fine-tuned model.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"creating-multi-modal-llms-with-textual-visual-and-audio-inputs\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#creating-multi-modal-llms-with-textual-visual-and-audio-inputs\",\n    \"aria-label\": \"creating multi modal llms with textual visual and audio inputs permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"creating multi-modal llms with textual, visual, and audio inputs\"), \"\\n\", React.createElement(_components.p, null, \"Another frontier is multi-modality. GPT-4, for instance, is rumored to handle image inputs in addition to text, although details are not fully disclosed. Researchers in other labs (such as Flamingo from DeepMind, and BLIP-2 from Salesforce) have integrated vision encoders with large language decoders, effectively converting image features into token-like embeddings that GPT can process.\"), \"\\n\", React.createElement(_components.p, null, \"Expanding into audio is similarly feasible. Some systems provide a pre-processing pipeline that transcribes audio into text or extracts acoustic embeddings, which GPT can then interpret. The end goal is to unify textual, visual, and auditory modalities, enabling the model to describe images, answer questions about them, or reason about audio signals. The synergy among modalities can lead to more robust and context-aware generation, but also demands specialized architectural bridging.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"cross-modal-embeddings-and-how-they-expand-llm-capabilities\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#cross-modal-embeddings-and-how-they-expand-llm-capabilities\",\n    \"aria-label\": \"cross modal embeddings and how they expand llm capabilities permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"cross-modal embeddings and how they expand llm capabilities\"), \"\\n\", React.createElement(_components.p, null, \"Cross-modal embeddings unify representations from different data domains into a shared latent space. For instance, an image might be mapped to an embedding vector that is close to the embedding of a textual description of that image. This allows GPT to ground its textual generation in visual clues or to generate textual descriptions of audio features. The training pipeline typically involves contrastive learning or multi-modal alignment losses. Large multi-modal GPT-like architectures might do a forward pass where part of the sequence is text embeddings, and another part is visual or audio embeddings.\"), \"\\n\", React.createElement(_components.p, null, \"For tasks like image captioning, visual question answering, or language-guided image editing, these cross-modal embeddings help the model preserve contextual relationships across different input streams. I find that the key challenge is still the computational cost: multi-modal models can be even more expensive to train than purely textual ones, because you must handle data from multiple domains and possibly update specialized encoders or bridging layers.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"interpretability-and-mechanistic-understanding\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#interpretability-and-mechanistic-understanding\",\n    \"aria-label\": \"interpretability and mechanistic understanding permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"interpretability and mechanistic understanding\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"sparse-autoencoders-saes-and-abliteration-techniques-for-analyzing-hidden-layers\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#sparse-autoencoders-saes-and-abliteration-techniques-for-analyzing-hidden-layers\",\n    \"aria-label\": \"sparse autoencoders saes and abliteration techniques for analyzing hidden layers permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"sparse autoencoders (saes) and abliteration techniques for analyzing hidden layers\"), \"\\n\", React.createElement(_components.p, null, \"Interpretability becomes more urgent as GPT grows. One method involves training sparse autoencoders on hidden states or attention patterns to discover low-dimensional subspaces that encode particular linguistic functions (Voita and gang, 2019). By forcing these autoencoders to find minimal yet sufficient representations, I can glean how GPT organizes knowledge internally.\"), \"\\n\", React.createElement(_components.p, null, \"Abliteration techniques systematically zero out or remove certain neurons or attention heads to observe changes in the model's output or attention. If the removal of a particular head drastically increases perplexity on certain syntactic structures, that head might be specialized for parsing those structures. Doing this at scale is challenging, but it can yield glimpses of how GPT's billions of parameters might be partitioned among semantic, syntactic, or domain-specific tasks.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"identifying-circuits-within-attention-heads-to-pinpoint-how-knowledge-is-stored\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#identifying-circuits-within-attention-heads-to-pinpoint-how-knowledge-is-stored\",\n    \"aria-label\": \"identifying circuits within attention heads to pinpoint how knowledge is stored permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"identifying 'circuits' within attention heads to pinpoint how knowledge is stored\"), \"\\n\", React.createElement(_components.p, null, \"One line of interpretability research popularized by anthologies like the Circuits thread (Olah and gang, 2020) focuses on discovering circuits — local subgraphs of neurons or attention heads that implement a recognizable algorithm, such as tracking subject-verb number agreement or referencing factual knowledge about specific entities. By analyzing attention patterns, residual stream modifications, or MLP layer activations, researchers attempt to identify these circuits and label their function.\"), \"\\n\", React.createElement(_components.p, null, \"This approach is reminiscent of classical feature visualization or attribution, but scaled to the complexity of GPT. Some circuits might be widely distributed, so it's a non-trivial challenge to cleanly isolate them. Nonetheless, identifying even a handful of well-understood circuits is a stepping stone toward mechanistic transparency.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"challenges-in-bridging-mechanistic-transparency-with-massive-parameter-counts\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#challenges-in-bridging-mechanistic-transparency-with-massive-parameter-counts\",\n    \"aria-label\": \"challenges in bridging mechanistic transparency with massive parameter counts permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"challenges in bridging mechanistic transparency with massive parameter counts\"), \"\\n\", React.createElement(_components.p, null, \"GPT-3 and GPT-4 contain hundreds of layers and billions of parameters. Even if I manage to interpret a few attention heads or MLP sub-components, it might be akin to shining a flashlight into a vast, dark cave. The combination of distributed representations, emergent synergy among layers, and the continuous scale-up of these models means that a comprehensive mechanistic understanding remains elusive.\"), \"\\n\", React.createElement(_components.p, null, \"Efforts to impose interpretability constraints during training (e.g., forcing certain layers to be more transparent or modular) might hamper the raw performance that emerges from unconstrained optimization. The tension between interpretability and performance is an ongoing philosophical and practical debate in the field. I believe that partial interpretability remains valuable for debugging or diagnosing harmful behaviors, even if we never fully unravel how the entire model functions internally.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"test-time-compute-and-iterative-reasoning\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#test-time-compute-and-iterative-reasoning\",\n    \"aria-label\": \"test time compute and iterative reasoning permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"test-time compute and iterative reasoning\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"process-reward-models-prms-for-multi-step-inference\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#process-reward-models-prms-for-multi-step-inference\",\n    \"aria-label\": \"process reward models prms for multi step inference permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"process reward models (prms) for multi-step inference\"), \"\\n\", React.createElement(_components.p, null, \"When GPT is used iteratively (e.g., generating a chain of thoughts, verifying partial outputs, or retrieving external knowledge), we often orchestrate multiple forward passes in a pipeline. This can be slow and expensive, especially for large models. Process Reward Models (PRMs) are proposed to evaluate intermediate reasoning steps and guide the generation process. They assign rewards or confidence scores to partial sequences, effectively shaping how the chain of thought evolves.\"), \"\\n\", React.createElement(_components.p, null, \"This iterative approach to generation can be seen as a loose form of step-by-step search. GPT might propose partial solutions, PRMs or heuristics evaluate them, and if they are unsatisfactory, the model revises or refines the solution. It's akin to the model using a hidden scratchpad or re-entrant calls to reach more accurate or consistent outputs.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"budgeting-computational-resources-in-real-time-scenarios\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#budgeting-computational-resources-in-real-time-scenarios\",\n    \"aria-label\": \"budgeting computational resources in real time scenarios permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"budgeting computational resources in real-time scenarios\"), \"\\n\", React.createElement(_components.p, null, \"Real-time or interactive usage of GPT-like models (e.g., chatbots, live question answering) requires careful budget management of GPU or CPU cycles. If the conversation is multi-turn and the context grows, naive approaches that re-run the entire conversation through the model at each turn become inefficient. Techniques for caching, incremental computation, or chunk-based processing can mitigate these costs.\"), \"\\n\", React.createElement(_components.p, null, \"One often overlooked factor is the cost of advanced decoding strategies like beam search or nucleus sampling. More extensive searching of possible next tokens can slow throughput. In practical deployments, I tune the decoding hyperparameters to balance generation quality, speed, and resource constraints.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"iterative-chain-of-thought-approaches-for-complex-reasoning-tasks\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#iterative-chain-of-thought-approaches-for-complex-reasoning-tasks\",\n    \"aria-label\": \"iterative chain of thought approaches for complex reasoning tasks permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"iterative, chain-of-thought approaches for complex reasoning tasks\"), \"\\n\", React.createElement(_components.p, null, \"A highlight of GPT-3.5 and GPT-4 is their capacity for chain-of-thought reasoning, especially if prompted to reveal or simulate a step-by-step solution. If the user wants the final answer only, I can hide the chain-of-thought and generate it internally. In tasks like complicated math problems or multi-step logic puzzles, chain-of-thought prompts can significantly improve accuracy by forcing the model to break down the reasoning process.\"), \"\\n\", React.createElement(_components.p, null, \"However, generating chain-of-thought text might also inadvertently reveal private or proprietary reasoning patterns if not handled carefully. There's research on using an internal chain-of-thought while only exposing the final answer to the user. This can require specialized system prompts or architectural modifications to separate the hidden chain-of-thought from the user-facing output.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"future-directions\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#future-directions\",\n    \"aria-label\": \"future directions permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"future directions\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"emerging-trends-in-large-scale-model-developments\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#emerging-trends-in-large-scale-model-developments\",\n    \"aria-label\": \"emerging trends in large scale model developments permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"emerging trends in large-scale model developments\"), \"\\n\", React.createElement(_components.p, null, \"The ever-evolving landscape of LLMs suggests several key trends. First, there is a push toward more data-efficient training: not every improvement must come from scaling alone. Second, multi-modality continues to gain momentum, as GPT-4 and research prototypes unify text, vision, audio, and potentially other modalities under one generative umbrella. Third, specialized hardware (like new GPU generations, TPUs, or custom AI accelerators) is accelerating training at trillion-parameter scales.\"), \"\\n\", React.createElement(_components.p, null, \"Furthermore, advanced retrieval-augmented techniques are likely to flourish. Instead of forcing GPT to memorize every fact in its parameters, retrieval systems can provide relevant data points on the fly, reducing the memory load on the model. This approach also helps with dynamic or domain-specific knowledge updates.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"societal-implications-misinformation-biases-and-responsible-ai-deployment\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#societal-implications-misinformation-biases-and-responsible-ai-deployment\",\n    \"aria-label\": \"societal implications misinformation biases and responsible ai deployment permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"societal implications: misinformation, biases, and responsible ai deployment\"), \"\\n\", React.createElement(_components.p, null, \"As GPT technology matures, so do concerns about misuse, misinformation, and biased or harmful outputs. Researchers and companies have introduced content moderation frameworks, user policies, or alignment layers to mitigate these risks. But fundamental issues remain: large language models might inadvertently produce subtle biases or falsehoods, especially if the training data is skewed or if the RLHF process is incomplete.\"), \"\\n\", React.createElement(_components.p, null, \"Promoting responsible AI deployment requires robust guardrails, transparency about known limitations, and ongoing community-wide efforts to track and mitigate misuse. Collaborative frameworks that allow external auditing or adversarial stress-testing can help ensure that GPT-based systems are robust and beneficial.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"research-outlook-on-specialized-hardware-and-advanced-architecture-design\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#research-outlook-on-specialized-hardware-and-advanced-architecture-design\",\n    \"aria-label\": \"research outlook on specialized hardware and advanced architecture design permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"research outlook on specialized hardware and advanced architecture design\"), \"\\n\", React.createElement(_components.p, null, \"I see an ongoing arms race in specialized hardware design. Next-generation accelerators are focusing on maximizing matrix multiplication throughput, high-bandwidth memory, and fast interconnect to handle enormous models. On the architecture side, more exotic designs like mixture-of-experts, sparse gating, or parallel branches might be used to effectively harness these hardware gains without ballooning parameter counts in a purely dense manner.\"), \"\\n\", React.createElement(_components.p, null, \"Hybrid models that combine the best of auto-regressive generation, retrieval modules, compositional reasoning circuits, and cross-modal expansions could represent the next leap. Ultimately, the direction of GPT and large language models is trending toward an integrated AI assistant that navigates text, images, video, code, and more in a single fluid interface.\"), \"\\n\", React.createElement(_components.p, null, \"If the recent history of GPT is any clue, the future will likely be shaped by a combination of scale, architectural refinements, and innovative training paradigms that we have yet to fully conceive. By keeping an eye on these emerging directions, I can help ensure that I use GPT and its successors responsibly, effectively, and in ways that push the boundaries of what is possible in machine learning today.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(Image, {\n    alt: \"diagram_of_GPT_architecture\",\n    path: \"\",\n    caption: \"A schematic illustrating a decoder-only Transformer stack typical of the GPT lineage. Each layer contains masked multi-head attention, followed by feed-forward sub-layers and residual connections.\",\n    zoom: \"false\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Below is a simplified code snippet in Python that shows how one might load and use a GPT-like model from Hugging Face Transformers for inference. This snippet highlights the core steps without focusing on distributed training or advanced inference optimizations:\"), \"\\n\", React.createElement(Code, {\n    text: `\nimport torch\nfrom transformers import GPT2LMHeadModel, GPT2Tokenizer\n\n# Load a pre-trained GPT-2 model and tokenizer\n# For demonstration; real LLM usage could involve bigger architectures\nmodel_name = \"gpt2\"\ntokenizer = GPT2Tokenizer.from_pretrained(model_name)\nmodel = GPT2LMHeadModel.from_pretrained(model_name)\nmodel.eval()\n\ndef generate_text(prompt, max_length=100, temperature=0.7, top_p=0.9):\n    # Encode prompt\n    input_ids = tokenizer.encode(prompt, return_tensors=\"pt\")\n    # Generate\n    with torch.no_grad():\n        output_ids = model.generate(\n            input_ids,\n            max_length=max_length,\n            temperature=temperature,\n            top_p=top_p,\n            do_sample=True,\n            pad_token_id=tokenizer.eos_token_id\n        )\n    # Decode to text\n    return tokenizer.decode(output_ids[0], skip_special_tokens=True)\n\nprompt_text = \"In a distant future, humanity has colonized Mars. The story begins when\"\ngenerated_output = generate_text(prompt_text)\nprint(\"Generated text:\", generated_output)\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"I encourage you to experiment with various prompts, decoding strategies, and hyperparameters (like temperature, top-p, or repetition penalty) to see how they can significantly alter the style and content of the generated text. This is a microcosm of the broader challenge and fascination of working with GPT-like LLMs, whose power — and complexity — grows in tandem with their scale.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/avrtt/Repos/avrtt.github.io/src/pages/posts/research/intro_to_llms_2.mdx\";\nimport React, {useState, useEffect} from 'react';\nimport {useSiteMetadata} from \"../hooks/useSiteMetadata\";\nimport RemoveMarkdown from 'remove-markdown';\nimport {ImageContext} from '../context/ImageContext';\nimport {MDXProvider} from '@mdx-js/react';\nimport Image from '../components/PostImage';\nimport {motion} from 'framer-motion';\nimport SEO from \"../components/seo\";\nimport PostBanner from '../components/PostBanner';\nimport PostBottom from '../components/PostBottom';\nimport {wordsPerMinuteAdventures, wordsPerMinuteResearch, wordsPerMinuteThoughts} from '../data/commonVariables';\nimport {graphql} from 'gatsby';\nimport PartOfCourseNotice from \"../components/PartOfCourseNotice\";\nimport * as stylesButtonsCommon from \"../styles/buttons_common.module.scss\";\nimport * as stylesCustomPostLayouts from \"../styles/custom_post_layouts.module.scss\";\nimport * as stylesTableOfContents from \"../styles/table_of_contents.module.scss\";\nimport * as stylesTagBadges from \"../styles/tag_badges.module.scss\";\nfunction formatReadTime(minutes) {\n  if (minutes <= 10) return '~10 min';\n  if (minutes <= 20) return '~20 min';\n  if (minutes <= 30) return '~30 min';\n  if (minutes <= 40) return '~40 min';\n  if (minutes <= 50) return '~50 min';\n  if (minutes <= 60) return '~1 h';\n  const hours = Math.floor(minutes / 60);\n  const remainder = minutes % 60;\n  if (remainder <= 30) {\n    return `~${hours}${remainder > 0 ? '.5' : ''} h`;\n  }\n  return `~${hours + 1} h`;\n}\nconst TableOfContents = ({toc}) => {\n  if (!toc || !toc.items) return null;\n  const handleClick = (e, url) => {\n    e.preventDefault();\n    const targetId = url.replace('#', '');\n    const targetElement = document.getElementById(targetId);\n    if (targetElement) {\n      targetElement.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }\n  };\n  return React.createElement(\"nav\", {\n    className: stylesTableOfContents.toc\n  }, React.createElement(\"ul\", null, toc.items.map((item, index) => React.createElement(\"li\", {\n    key: index\n  }, React.createElement(\"a\", {\n    href: item.url,\n    onClick: e => handleClick(e, item.url)\n  }, item.title), item.items && React.createElement(TableOfContents, {\n    toc: {\n      items: item.items\n    }\n  })))));\n};\nexport function PostTemplate({data: {mdx, allMdx, allPostImages}, children}) {\n  const {frontmatter, body, tableOfContents} = mdx;\n  const index = frontmatter.index;\n  const slug = frontmatter.slug;\n  const section = slug.split('/')[1];\n  const posts = allMdx.nodes.filter(post => post.frontmatter.slug.includes(`/${section}/`));\n  const sortedPosts = posts.sort((a, b) => a.frontmatter.index - b.frontmatter.index);\n  const currentIndex = sortedPosts.findIndex(post => post.frontmatter.index === index);\n  const nextPost = sortedPosts[currentIndex + 1];\n  const lastPost = sortedPosts[currentIndex - 1];\n  const trimmedSlug = frontmatter.slug.replace(/\\/$/, '');\n  const keyCurrent = (/[^/]*$/).exec(trimmedSlug)[0];\n  const basePath = `posts/${section}/content/${keyCurrent}/`;\n  const [isWideLayout, setIsWideLayout] = useState(frontmatter.flagWideLayoutByDefault);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const toggleLayout = () => {\n    setIsWideLayout(!isWideLayout);\n  };\n  useEffect(() => {\n    setIsAnimating(true);\n    const timer = setTimeout(() => setIsAnimating(false), 340);\n    return () => clearTimeout(timer);\n  }, [isWideLayout]);\n  var wordsPerMinute;\n  if (section === \"adventures\") {\n    wordsPerMinute = wordsPerMinuteAdventures;\n  } else if (section === \"research\") {\n    wordsPerMinute = wordsPerMinuteResearch;\n  } else if (section === \"thoughts\") {\n    wordsPerMinute = wordsPerMinuteThoughts;\n  }\n  const plainTextBody = RemoveMarkdown(body).replace(/import .*? from .*?;/g, '').replace(/<.*?>/g, '').replace(/\\{\\/\\*[\\s\\S]*?\\*\\/\\}/g, '').trim();\n  const wordCount = plainTextBody.split(/\\s+/).length;\n  const baseReadTimeMinutes = Math.ceil(wordCount / wordsPerMinute);\n  const extraTime = frontmatter.extraReadTimeMin || 0;\n  const totalReadTime = baseReadTimeMinutes + extraTime;\n  const readTime = formatReadTime(totalReadTime);\n  const notices = [{\n    flag: frontmatter.flagDraft,\n    component: () => import(\"../components/NotFinishedNotice\")\n  }, {\n    flag: frontmatter.flagMindfuckery,\n    component: () => import(\"../components/MindfuckeryNotice\")\n  }, {\n    flag: frontmatter.flagRewrite,\n    component: () => import(\"../components/RewriteNotice\")\n  }, {\n    flag: frontmatter.flagOffensive,\n    component: () => import(\"../components/OffensiveNotice\")\n  }, {\n    flag: frontmatter.flagProfane,\n    component: () => import(\"../components/ProfanityNotice\")\n  }, {\n    flag: frontmatter.flagMultilingual,\n    component: () => import(\"../components/MultilingualNotice\")\n  }, {\n    flag: frontmatter.flagUnreliably,\n    component: () => import(\"../components/UnreliablyNotice\")\n  }, {\n    flag: frontmatter.flagPolitical,\n    component: () => import(\"../components/PoliticsNotice\")\n  }, {\n    flag: frontmatter.flagCognitohazard,\n    component: () => import(\"../components/CognitohazardNotice\")\n  }, {\n    flag: frontmatter.flagHidden,\n    component: () => import(\"../components/HiddenNotice\")\n  }];\n  const [loadedNotices, setLoadedNotices] = useState([]);\n  useEffect(() => {\n    notices.forEach(({flag, component}) => {\n      if (flag) {\n        component().then(module => {\n          setLoadedNotices(prev => [...prev, module.default]);\n        });\n      }\n    });\n  }, []);\n  return React.createElement(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.15\n    }\n  }, React.createElement(PostBanner, {\n    postNumber: frontmatter.index,\n    date: frontmatter.date,\n    updated: frontmatter.updated,\n    readTime: readTime,\n    difficulty: frontmatter.difficultyLevel,\n    title: frontmatter.title,\n    desc: frontmatter.desc,\n    banner: frontmatter.banner,\n    section: section,\n    postKey: keyCurrent,\n    isMindfuckery: frontmatter.flagMindfuckery,\n    mainTag: frontmatter.mainTag\n  }), React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      flexWrap: \"wrap\",\n      maxWidth: \"75%\",\n      marginLeft: \"auto\",\n      paddingRight: \"1vw\",\n      marginTop: \"-6vh\",\n      marginBottom: \"4vh\"\n    }\n  }, frontmatter.otherTags.map((tag, index) => React.createElement(\"span\", {\n    key: index,\n    className: `noselect ${stylesTagBadges.tagPosts}`,\n    style: {\n      margin: \"0 5px 5px 0\"\n    }\n  }, tag))), React.createElement(\"div\", {\n    class: \"postBody\"\n  }, React.createElement(TableOfContents, {\n    toc: tableOfContents\n  })), React.createElement(\"br\"), React.createElement(\"div\", {\n    style: {\n      margin: \"0 10% -2vh 30%\",\n      textAlign: \"right\"\n    }\n  }, React.createElement(motion.button, {\n    class: \"noselect\",\n    className: stylesCustomPostLayouts.postButton,\n    id: stylesCustomPostLayouts.postLayoutSwitchButton,\n    onClick: toggleLayout,\n    whileTap: {\n      scale: 0.93\n    }\n  }, React.createElement(motion.div, {\n    className: stylesButtonsCommon.buttonTextWrapper,\n    key: isWideLayout,\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.3,\n      ease: \"easeInOut\"\n    }\n  }, isWideLayout ? \"Switch to default layout\" : \"Switch to wide layout\"))), React.createElement(\"br\"), React.createElement(\"div\", {\n    class: \"postBody\",\n    style: {\n      margin: isWideLayout ? \"0 -14%\" : \"\",\n      maxWidth: isWideLayout ? \"200%\" : \"\",\n      transition: \"margin 1s ease, max-width 1s ease, padding 1s ease\"\n    }\n  }, React.createElement(\"div\", {\n    className: `${stylesCustomPostLayouts.textContent} ${isAnimating ? stylesCustomPostLayouts.fadeOut : stylesCustomPostLayouts.fadeIn}`\n  }, loadedNotices.map((NoticeComponent, index) => React.createElement(NoticeComponent, {\n    key: index\n  })), frontmatter.indexCourse ? React.createElement(PartOfCourseNotice, {\n    index: frontmatter.indexCourse,\n    category: frontmatter.courseCategoryName\n  }) : \"\", React.createElement(ImageContext.Provider, {\n    value: {\n      images: allPostImages.nodes,\n      basePath: basePath.replace(/\\/$/, '') + '/'\n    }\n  }, React.createElement(MDXProvider, {\n    components: {\n      Image\n    }\n  }, children)))), React.createElement(PostBottom, {\n    nextPost: nextPost,\n    lastPost: lastPost,\n    keyCurrent: keyCurrent,\n    section: section\n  }));\n}\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport function Head({data}) {\n  const {frontmatter} = data.mdx;\n  const title = frontmatter.titleSEO || frontmatter.title;\n  const titleOG = frontmatter.titleOG || title;\n  const titleTwitter = frontmatter.titleTwitter || title;\n  const description = frontmatter.descSEO || frontmatter.desc;\n  const descriptionOG = frontmatter.descOG || description;\n  const descriptionTwitter = frontmatter.descTwitter || description;\n  const schemaType = frontmatter.schemaType || \"BlogPosting\";\n  const keywords = frontmatter.keywordsSEO;\n  const datePublished = frontmatter.date;\n  const dateModified = frontmatter.updated || datePublished;\n  const imageOG = frontmatter.imageOG || frontmatter.banner?.childImageSharp?.gatsbyImageData?.images?.fallback?.src;\n  const imageAltOG = frontmatter.imageAltOG || descriptionOG;\n  const imageTwitter = frontmatter.imageTwitter || imageOG;\n  const imageAltTwitter = frontmatter.imageAltTwitter || descriptionTwitter;\n  const canonicalUrl = frontmatter.canonicalURL;\n  const flagHidden = frontmatter.flagHidden || false;\n  const mainTag = frontmatter.mainTag || \"Posts\";\n  const section = frontmatter.slug.split('/')[1] || \"posts\";\n  const type = \"article\";\n  const {siteUrl} = useSiteMetadata();\n  const breadcrumbJSON = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    \"itemListElement\": [{\n      \"@type\": \"ListItem\",\n      \"position\": 1,\n      \"name\": \"Home\",\n      \"item\": siteUrl\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 2,\n      \"name\": mainTag,\n      \"item\": `${siteUrl}/${frontmatter.slug.split('/')[1]}`\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 3,\n      \"name\": title,\n      \"item\": `${siteUrl}${frontmatter.slug}`\n    }]\n  };\n  return React.createElement(SEO, {\n    title: title + \" - avrtt.blog\",\n    titleOG: titleOG,\n    titleTwitter: titleTwitter,\n    description: description,\n    descriptionOG: descriptionOG,\n    descriptionTwitter: descriptionTwitter,\n    schemaType: schemaType,\n    keywords: keywords,\n    datePublished: datePublished,\n    dateModified: dateModified,\n    imageOG: imageOG,\n    imageAltOG: imageAltOG,\n    imageTwitter: imageTwitter,\n    imageAltTwitter: imageAltTwitter,\n    canonicalUrl: canonicalUrl,\n    flagHidden: flagHidden,\n    mainTag: mainTag,\n    section: section,\n    type: type\n  }, React.createElement(\"script\", {\n    type: \"application/ld+json\"\n  }, JSON.stringify(breadcrumbJSON)));\n}\nexport const query = graphql`\n  query($id: String!, $postsFilterRegex: String!, $imagePathRegex: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        index\n        indexCourse\n        title\n        titleSEO\n        titleOG\n        titleTwitter\n        courseCategoryName\n        desc\n        descSEO\n        descOG\n        descTwitter\n        date\n        updated\n        extraReadTimeMin\n        difficultyLevel\n        flagDraft\n        flagMindfuckery\n        flagRewrite\n        flagOffensive\n        flagProfane\n        flagMultilingual\n        flagUnreliably\n        flagPolitical\n        flagCognitohazard\n        flagHidden\n        flagWideLayoutByDefault\n        schemaType\n        mainTag\n        otherTags\n        keywordsSEO\n        banner {\n          childImageSharp {\n            gatsbyImageData(\n\t\t\t\t\t\t\tformats: [JPG, WEBP], \n\t\t\t\t\t\t\tplaceholder: BLURRED, \n\t\t\t\t\t\t\tquality: 100\n\t\t\t\t\t\t)\n          }\n        }\n        imageOG\n        imageAltOG\n        imageTwitter\n        imageAltTwitter\n        canonicalURL\n        slug\n      }\n      body\n      tableOfContents(maxDepth: 3)\n    }\n    allMdx(filter: {frontmatter: {slug: {regex: $postsFilterRegex}}}) {\n      nodes {\n        frontmatter {\n          index\n          slug\n          banner {\n            childImageSharp {\n              gatsbyImageData(\n                formats: [JPG, WEBP],\n                placeholder: BLURRED,\n                quality: 100\n              )\n            }\n          }\n        }\n      }\n    }\n    allPostImages: allFile(\n      filter: { \n        sourceInstanceName: { eq: \"images\" },\n        relativePath: { regex: $imagePathRegex }\n      }\n    ) {\n      nodes {\n        relativePath\n        childImageSharp {\n          gatsbyImageData(\n            layout: CONSTRAINED\n            placeholder: DOMINANT_COLOR\n            quality: 100\n          )\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport Latex from 'react-latex-next';\nimport 'katex/dist/katex.min.css'; \n  \nconst L = ({ text }) => {\n  return (\n    <Latex>{text}</Latex>\n  );\n};\nexport default L;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","a","span","p","h3","ol","li","strong","ul","hr","_provideComponents","components","Image","id","component","Error","_missingMdxReference","React","style","position","href","className","dangerouslySetInnerHTML","__html","Latex","text","alt","path","caption","zoom","Code","wrapper","MDXLayout","TableOfContents","_ref","toc","items","stylesTableOfContents","map","item","index","key","url","onClick","e","handleClick","preventDefault","targetId","replace","targetElement","document","getElementById","scrollIntoView","behavior","block","title","PostTemplate","_ref2","data","mdx","allMdx","allPostImages","children","frontmatter","body","tableOfContents","section","slug","split","sortedPosts","nodes","filter","post","includes","sort","b","currentIndex","findIndex","nextPost","lastPost","trimmedSlug","keyCurrent","exec","basePath","isWideLayout","setIsWideLayout","useState","flagWideLayoutByDefault","isAnimating","setIsAnimating","wordsPerMinute","useEffect","timer","setTimeout","clearTimeout","wordsPerMinuteAdventures","wordsPerMinuteResearch","wordsPerMinuteThoughts","wordCount","RemoveMarkdown","trim","length","readTime","minutes","hours","Math","floor","remainder","formatReadTime","ceil","extraReadTimeMin","notices","flag","flagDraft","flagMindfuckery","flagRewrite","flagOffensive","flagProfane","flagMultilingual","flagUnreliably","flagPolitical","flagCognitohazard","flagHidden","loadedNotices","setLoadedNotices","forEach","_ref3","then","module","prev","concat","_toConsumableArray","default","motion","div","initial","opacity","animate","exit","transition","duration","PostBanner","postNumber","date","updated","difficulty","difficultyLevel","desc","banner","postKey","isMindfuckery","mainTag","display","justifyContent","flexWrap","maxWidth","marginLeft","paddingRight","marginTop","marginBottom","otherTags","tag","stylesTagBadges","margin","class","textAlign","button","stylesCustomPostLayouts","toggleLayout","whileTap","scale","stylesButtonsCommon","ease","NoticeComponent","indexCourse","PartOfCourseNotice","category","courseCategoryName","ImageContext","Provider","value","images","MDXProvider","PostBottom","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref4","_frontmatter$banner","_frontmatter$banner$c","_frontmatter$banner$c2","_frontmatter$banner$c3","_frontmatter$banner$c4","titleSEO","titleOG","titleTwitter","description","descSEO","descriptionOG","descOG","descriptionTwitter","descTwitter","schemaType","keywords","keywordsSEO","datePublished","dateModified","imageOG","childImageSharp","gatsbyImageData","fallback","src","imageAltOG","imageTwitter","imageAltTwitter","canonicalUrl","canonicalURL","siteUrl","useSiteMetadata","breadcrumbJSON","SEO","type","JSON","stringify"],"sourceRoot":""}