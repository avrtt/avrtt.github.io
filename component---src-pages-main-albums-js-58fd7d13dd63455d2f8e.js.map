{"version":3,"file":"component---src-pages-main-albums-js-58fd7d13dd63455d2f8e.js","mappings":"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","sources":["webpack://avrtt.blog/./src/images/about/photoAbout.jpg","webpack://avrtt.blog/./src/pages/main/albums.js","webpack://avrtt.blog/./src/hooks/useSiteMetadata.js","webpack://avrtt.blog/./src/images/icon.png","webpack://avrtt.blog/./src/components/seo.jsx"],"sourcesContent":["export default __webpack_public_path__ + \"static/photoAbout-59cd1848d1acc7ce5078c52886c751d1.jpg\";","import React from 'react';\nimport SEO from '../../components/seo'\nimport { Link } from \"gatsby\";\nimport { motion } from 'framer-motion';\nimport { AnimationOnScroll } from 'react-animation-on-scroll';\nimport M from '../../components/Markdown';\nimport { albumsLastUpdated } from '../../data/lastUpdated';\nimport 'animate.css/animate.min.css';\n\nconst Albums = () => {\n\treturn (\n\t\t<motion.div\n\t\t\tinitial={{ opacity: 0 }}\n\t\t\tanimate={{ opacity: 1 }}\n\t\t\texit={{ opacity: 0 }}\n\t\t\ttransition={{ duration: 0.15 }}>\n\n\t\t\t<div className=\"generalBody\">\n\t\t\t\t<p>Work in progress...</p>\n\t\t\t</div>\n\t\t\t<div className=\"lastUpdatedTalks\">UPDATED ON {albumsLastUpdated}</div>\n\n\t  \t</motion.div>\n\t);\n};\n  \nexport default Albums;\n\nexport const Head = () => (\n  <SEO \n    title=\"Albums - avrtt.blog\"\n    description=\"\"\n    keywords={[\"\"]}\n    image={\"\"}\n    canonicalUrl=\"https://avrtt.github.io/albums\"\n    schemaType=\"\"\n    children\n  />\n)\n","import { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            image\n            siteUrl\n            siteName\n            author\n            twitterUsername\n            facebookUsername\n          }\n        }\n      }\n    `\n  )\n  return site.siteMetadata\n}","export default __webpack_public_path__ + \"static/icon-6e7479889441613ea062cf3d71374ab6.png\";","import React from \"react\"\nimport { useSiteMetadata } from \"../hooks/useSiteMetadata\"\nimport icon from \"../images/icon.png\"\nimport photoAbout from \"../images/about/photoAbout.jpg\";\n\nfunction convertToISO(dateString) {\n  const [day, month, year] = dateString.split('.').map(Number);\n  const date = new Date(year, month - 1, day);\n  return date.toISOString();\n}\n\nconst generateSchema = ({\n  schemaType, // \"Article\" for Research, \"BlogPosting\" for Adventures & Thoughts, \"WebPage\" for anything else\n  title,\n  description,\n  author,\n  photo,\n  datePublished,\n  dateModified,\n  url,\n  image,\n  siteName,\n  siteUrl,\n  siteLogo,\n  keywords,\n  section,\n}) => {\n\n  const baseSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": schemaType,\n    url,\n    description,\n  }\n\n  if (schemaType === \"Article\" || schemaType === \"BlogPosting\") {\n    return {\n      ...baseSchema,\n      headline: title,\n      image: image ? [image] : undefined,\n      datePublished: datePublished || undefined,\n      dateModified: dateModified || datePublished || undefined,\n      articleSection: section,\n      author: {\n        \"@type\": \"Person\",\n        name: author,\n        image: photo,\n        description: \"Traveler, content creator, data scientist, AI researcher, developer, musician.\",\n        url: `${siteUrl}/about`,\n        sameAs: [\n          \"https://youtube.com/@vladaverett\",\n          \"https://instagram.com/avrttv\",\n          \"https://twitter.com/vladaverett\",\n          \"https://tiktok.com/@vladaverett\",\n          \"https://github.com/avrtt\",\n          \"https://facebook.com/vladaverett\",\n          \"https://youtube.com/@avheuristics\",\n          \"https://t.me/venturingforth\",\n          \"https://t.me/avheuristics\",\n          \"https://kaggle.com/lenferdetroud\",\n          \"https://couchsurfing.com/people/averett\",\n          \"https://youtube.com/@noiserett\",\n          \"https://facebook.com/averett.freelance\",\n          \"https://facebook.com/avrttblog\",\n        ],\n      },\n      publisher: {\n        \"@type\": \"Organization\",\n        name: siteName,\n        logo: {\n          \"@type\": \"ImageObject\",\n          url: siteLogo,\n        },\n      },\n      mainEntityOfPage: url,\n      keywords: Array.isArray(keywords) ? keywords.join(\", \") : keywords\n    }\n  }\n\n  return {\n    ...baseSchema,\n    name: title,\n  }\n}\n\nconst SEO = ({\n  title,\n  titleOG,\n  titleTwitter,\n  description,\n  descriptionOG,\n  descriptionTwitter,\n  schemaType = \"WebPage\",\n  keywords,\n  datePublished,\n  dateModified,\n  image,\n  siteUrl,\n  siteName,\n  author,\n  twitterUsername,\n  facebookUsername,\n  imageOG,\n  imageAltOG,\n  imageTwitter,\n  imageAltTwitter,\n  imageWidth,\n  imageHeight,\n  canonicalUrl,\n  flagHidden = false,\n  section,\n  mainTag,\n  type = \"website\", // for og\n  children,\n}) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    image: defaultImage,\n    siteUrl: defaultSiteUrl,\n    siteName: defaultSiteName,\n    author: defaultAuthor,\n    twitterUsername: defaultTwitterUsername,\n    facebookUsername: defaultFacebookUsername,\n  } = useSiteMetadata()\n\n  // fallbacks\n  const seoTitle = title || defaultTitle\n  const ogTitle = titleOG || seoTitle\n  const twTitle = titleTwitter || seoTitle\n  const seoDescription = description || defaultDescription\n  const ogDescription = descriptionOG || seoDescription\n  const twDescription = descriptionTwitter || seoDescription\n  const seoImage = image\n    ? (image.startsWith(\"http\") ? image : `${defaultSiteUrl}${image}`)\n    : `${defaultSiteUrl}${defaultImage}`\n  const ogImage = imageOG || seoImage\n  const ogImageAlt = imageAltOG || ogDescription\n  const twImage = imageTwitter || seoImage\n  const twImageAlt = imageAltTwitter || twDescription\n  const seoSiteUrl = siteUrl || defaultSiteUrl\n  const seoSiteName = siteName || defaultSiteName\n  const seoCanonical = canonicalUrl || seoSiteUrl\n  const seoAuthor = author || defaultAuthor\n  const seoDatePublished = datePublished ? convertToISO(datePublished) : new Date().toISOString()\n  const seoDateModified = dateModified ? convertToISO(dateModified) : seoDatePublished\n  const seoTwitterUsername = twitterUsername || defaultTwitterUsername\n  const seoFacebookUsername = facebookUsername || defaultFacebookUsername\n  const seoKeywords = keywords || [\"\"]\n  const seoTag = mainTag || \"\"\n  const seoSection = section || \"\"\n  \n  var seoSectionClarified\n  if (section === \"adventures\" ) { seoSectionClarified = \"Travel\" } \n  else if (section === \"research\" ) { seoSectionClarified = \"Technology\" } \n  else if (section === \"thoughts\" ) { seoSectionClarified = \"Thoughts\" } \n  else { seoSectionClarified = \"\" }\n\n  const schemaJSON = generateSchema({\n    schemaType,\n    title: seoTitle,\n    description: seoDescription,\n    author: seoAuthor,\n    photo: photoAbout,\n    datePublished: seoDatePublished,\n    dateModified: seoDateModified,\n    url: seoCanonical,\n    image: seoImage,\n    siteName: seoSiteName,\n    siteUrl: seoSiteUrl,\n    siteLogo: icon,\n    keywords: seoKeywords,\n    section: seoSection,\n  })\n\n  return (\n    <>\n      <title>{seoTitle}</title>\n      <meta name=\"description\" content={seoDescription} />\n\n      {seoCanonical && <link rel=\"canonical\" href={seoCanonical} />}\n\n      {seoKeywords && (\n        <meta\n          name=\"keywords\"\n          content={Array.isArray(seoKeywords) ? seoKeywords.join(\", \") : seoKeywords}\n        />\n      )}\n\n      <meta property=\"og:title\" content={ogTitle} />\n      <meta property=\"og:description\" content={ogDescription} />\n      <meta property=\"og:updated_time\" content={seoDateModified} />\n      <meta property=\"og:type\" content={type} />\n      <meta property=\"og:url\" content={seoCanonical} />\n      <meta property=\"og:site_name\" content={seoSiteName} />\n      {ogImage && <meta property=\"og:image\" content={ogImage} />}\n      {imageWidth && <meta property=\"og:image:width\" content={imageWidth} />}\n      {imageHeight && <meta property=\"og:image:height\" content={imageHeight} />}\n      <meta property=\"og:image:alt\" content={ogImageAlt} />\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      {seoTwitterUsername && (<meta name=\"twitter:creator\" content={seoTwitterUsername} />)}\n      {seoTwitterUsername && (<meta name=\"twitter:site\" content={seoTwitterUsername} />)}\n      <meta name=\"twitter:title\" content={twTitle} />\n      <meta name=\"twitter:description\" content={twDescription} />\n      {twImage && <meta name=\"twitter:image\" content={twImage} />}\n      <meta name=\"twitter:image:alt\" content={twImageAlt} />\n\n      {type === \"article\" && (<meta property=\"article:published_time\" content={seoDatePublished} />)}\n      {type === \"article\" && (<meta property=\"article:modified_time\" content={seoDateModified} />)}\n      {type === \"article\" && seoSectionClarified && (<meta property=\"article:section\" content={seoSectionClarified} />)}\n      {type === \"article\" && seoAuthor && (<meta property=\"article:author\" content={seoAuthor} />)}\n      {type === \"article\" && seoFacebookUsername && (<meta property=\"article:publisher\" content={\"https://www.facebook.com/\" + seoFacebookUsername} />)}\n      {type === \"article\" && seoTag && (<meta property=\"article:tag\" content={seoTag} />)}\n      {type === \"article\" && Array.isArray(seoKeywords) && \n        seoKeywords.map((keyword, i) => (\n          <meta key={i} property=\"article:tag\" content={keyword} />\n        ))\n      }\n\n      <meta name=\"robots\" content={flagHidden ? \"noindex, nofollow\" : \"index, follow\"} />\n\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaJSON)}\n      </script>\n\n      {children}\n    </>\n  )\n}\n\nexport default SEO\n"],"names":["Albums","React","motion","div","initial","opacity","animate","exit","transition","duration","className","albumsLastUpdated","Head","SEO","title","description","keywords","image","canonicalUrl","schemaType","children","useSiteMetadata","site","useStaticQuery","siteMetadata","convertToISO","dateString","day","month","year","split","map","Number","Date","toISOString","_ref2","titleOG","titleTwitter","descriptionOG","descriptionTwitter","datePublished","dateModified","siteUrl","siteName","author","twitterUsername","facebookUsername","imageOG","imageAltOG","imageTwitter","imageAltTwitter","imageWidth","imageHeight","flagHidden","section","mainTag","type","defaultTitle","defaultDescription","defaultImage","defaultSiteUrl","defaultSiteName","defaultAuthor","defaultTwitterUsername","defaultFacebookUsername","seoTitle","ogTitle","twTitle","seoDescription","ogDescription","twDescription","seoImage","startsWith","ogImage","ogImageAlt","twImage","twImageAlt","seoSiteUrl","seoSiteName","seoCanonical","seoAuthor","seoDatePublished","seoDateModified","seoTwitterUsername","seoFacebookUsername","seoKeywords","seoTag","seoSection","seoSectionClarified","schemaJSON","_ref","photo","url","siteLogo","baseSchema","headline","undefined","articleSection","name","sameAs","publisher","logo","mainEntityOfPage","Array","isArray","join","generateSchema","photoAbout","icon","content","rel","href","property","keyword","i","key","JSON","stringify"],"sourceRoot":""}