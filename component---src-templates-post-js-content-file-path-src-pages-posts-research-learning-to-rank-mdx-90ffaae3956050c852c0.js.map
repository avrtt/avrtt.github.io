{"version":3,"file":"component---src-templates-post-js-content-file-path-src-pages-posts-research-learning-to-rank-mdx-90ffaae3956050c852c0.js","mappings":"8RAwDA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,OAAQ,SACRC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBf,EAAMgB,aAAa,MAACC,GAAShB,EAEtD,OADKgB,GAysBP,SAA8BC,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CA3sBcG,CAAqB,SAAS,GACnCC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAM,KAAMA,EAAAA,cAAoB,MAAO,KAAM,KAAM,KAAMA,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,40BAA+0B,KAAMkB,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,+jBAAgkB,KAAMkB,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,uRAAwRkB,EAAAA,cAAoBC,EAAAA,EAAO,CAC36DC,KAAM,0DACJ,WAAYF,EAAAA,cAAoBC,EAAAA,EAAO,CACzCC,KAAM,2CACJ,iTAAkT,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,uZAAwZ,KAAMkB,EAAAA,cAAoBrB,EAAYI,IAAK,KAAMiB,EAAAA,cAAoBrB,EAAYK,GAAI,CACh1BY,GAAI,uBACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,wBACN,aAAc,iCACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,wBAAyB,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,mjBAAojB,KAAMkB,EAAAA,cAAoBrB,EAAYQ,GAAI,CACzqBS,GAAI,4BACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,6BACN,aAAc,sCACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,6BAA8B,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,qNAAsN,KAAMkB,EAAAA,cAAoBrB,EAAYS,GAAI,KAAM,KAAMY,EAAAA,cAAoBrB,EAAYU,GAAI,KAAM,KAAMW,EAAAA,cAAoBrB,EAAYG,EAAG,KAAMkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,qBAAsB,oHAAqHU,EAAAA,cAAoBC,EAAAA,EAAO,CACzoBC,KAAM,iBACJ,cAAeF,EAAAA,cAAoBC,EAAAA,EAAO,CAC5CC,KAAM,cACJ,qFAAsF,MAAO,KAAMF,EAAAA,cAAoBrB,EAAYU,GAAI,KAAM,KAAMW,EAAAA,cAAoBrB,EAAYG,EAAG,KAAMkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,oBAAqB,uEAAwEU,EAAAA,cAAoBC,EAAAA,EAAO,CACpWC,KAAM,gBACJ,+BAAgCF,EAAAA,cAAoBC,EAAAA,EAAO,CAC7DC,KAAM,gBACJ,6FAAgG,MAAO,KAAMF,EAAAA,cAAoBrB,EAAYU,GAAI,KAAM,KAAMW,EAAAA,cAAoBrB,EAAYG,EAAG,KAAMkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,oBAAqB,mRAAoR,MAAO,MAAO,KAAMU,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,kaAAma,KAAMkB,EAAAA,cAAoBrB,EAAYQ,GAAI,CACziCS,GAAI,oBACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,qBACN,aAAc,8BACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,qBAAsB,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,8MAA+MkB,EAAAA,cAAoBC,EAAAA,EAAO,CAClTC,KAAM,iBACJ,gFAAiFF,EAAAA,cAAoBC,EAAAA,EAAO,CAC9GC,KAAM,cACJ,yEAA0EF,EAAAA,cAAoBC,EAAAA,EAAO,CACvGC,KAAM,iBACJ,KAAM,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,0CAA2C,KAAMkB,EAAAA,cAAoBC,EAAAA,EAAO,CACnIC,KAAM,2FACJ,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,SAAUkB,EAAAA,cAAoBC,EAAAA,EAAO,CACtFC,KAAM,wBACJ,2EAA4EF,EAAAA,cAAoBC,EAAAA,EAAO,CACzGC,KAAM,gBACJ,gBAAiBF,EAAAA,cAAoBC,EAAAA,EAAO,CAC9CC,KAAM,gBACJ,SAAUF,EAAAA,cAAoBC,EAAAA,EAAO,CACvCC,KAAM,qDACJ,+CAAgDF,EAAAA,cAAoBC,EAAAA,EAAO,CAC7EC,KAAM,gBACJ,uRAAwR,KAAMF,EAAAA,cAAoBrB,EAAYQ,GAAI,CACpUS,GAAI,mBACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,oBACN,aAAc,6BACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,oBAAqB,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,gGAAiGkB,EAAAA,cAAoBC,EAAAA,EAAO,CACnMC,KAAM,uBACJ,SAAUF,EAAAA,cAAoBC,EAAAA,EAAO,CACvCC,KAAM,2BACJ,sBAAuBF,EAAAA,cAAoBC,EAAAA,EAAO,CACpDC,KAAM,gBACJ,gCAAiCF,EAAAA,cAAoBC,EAAAA,EAAO,CAC9DC,KAAM,gBACJ,sBAAuBF,EAAAA,cAAoBC,EAAAA,EAAO,CACpDC,KAAM,gBACJ,mDAAoDF,EAAAA,cAAoBC,EAAAA,EAAO,CACjFC,KAAM,sBACJ,cAAeF,EAAAA,cAAoBC,EAAAA,EAAO,CAC5CC,KAAM,4BACJ,4CAA6C,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,qGAAsGkB,EAAAA,cAAoBC,EAAAA,EAAO,CAC/NC,KAAM,4BACJ,mBAAoBF,EAAAA,cAAoBC,EAAAA,EAAO,CACjDC,KAAM,gBACJ,gBAAiBF,EAAAA,cAAoBC,EAAAA,EAAO,CAC9CC,KAAM,gBACJ,oDAAqD,KAAMF,EAAAA,cAAoBC,EAAAA,EAAO,CACxFC,KAAM,4HACJ,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,kCAAmCkB,EAAAA,cAAoBC,EAAAA,EAAO,CAC/GC,KAAM,mBACJ,cAAeF,EAAAA,cAAoBC,EAAAA,EAAO,CAC5CC,KAAM,mBACJ,gFAAiFF,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,WAAY,uDAAwDU,EAAAA,cAAoBC,EAAAA,EAAO,CAChOC,KAAM,sBACJ,KAAM,KAAMF,EAAAA,cAAoBrB,EAAYQ,GAAI,CAClDS,GAAI,mBACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,oBACN,aAAc,6BACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,oBAAqB,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,4MAA6MkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,WAAY,2OAA4OU,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,cAAe,qHAAsH,KAAMU,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,6RAA8R,KAAMkB,EAAAA,cAAoBrB,EAAYQ,GAAI,CACpmCS,GAAI,wCACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,yCACN,aAAc,kDACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,yCAA0C,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,wTAAyT,KAAMkB,EAAAA,cAAoBrB,EAAYY,GAAI,KAAM,KAAMS,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,OAAQ,KAAMU,EAAAA,cAAoBC,EAAAA,EAAO,CAC5kBC,KAAM,2CACJ,KAAM,KAAMF,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,QAAS,KAAMU,EAAAA,cAAoBC,EAAAA,EAAO,CAChJC,KAAM,0DACJ,KAAM,KAAMF,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,6BAA8B,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,OAAQ,KAAMU,EAAAA,cAAoBC,EAAAA,EAAO,CAC3QC,KAAM,yCACJ,KAAM,KAAMF,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,UAAW,wCAAyC,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,OAAQ,KAAMU,EAAAA,cAAoBC,EAAAA,EAAO,CACjSC,KAAM,6CACJ,KAAM,MAAO,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,yEAA0E,KAAMkB,EAAAA,cAAoBrB,EAAYQ,GAAI,CAClLS,GAAI,6BACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,8BACN,aAAc,uCACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,gCAAiC,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,uGAAwGkB,EAAAA,cAAoBC,EAAAA,EAAO,CACtNC,KAAM,oCACJ,qCAAsCF,EAAAA,cAAoBC,EAAAA,EAAO,CACnEC,KAAM,cACJ,YAAaF,EAAAA,cAAoBC,EAAAA,EAAO,CAC1CC,KAAM,sBACJ,4BAA6BF,EAAAA,cAAoBC,EAAAA,EAAO,CAC1DC,KAAM,cACJ,eAAgBF,EAAAA,cAAoBC,EAAAA,EAAO,CAC7CC,KAAM,cACJ,yDAA0DF,EAAAA,cAAoBC,EAAAA,EAAO,CACvFC,KAAM,cACJ,eAAgB,KAAMF,EAAAA,cAAoBC,EAAAA,EAAO,CACnDC,KAAM,iGACJ,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,kCAAmCkB,EAAAA,cAAoBC,EAAAA,EAAO,CAC/GC,KAAM,cACJ,QAAS,KAAMF,EAAAA,cAAoBC,EAAAA,EAAO,CAC5CC,KAAM,6JACJ,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,4DAA6DkB,EAAAA,cAAoBC,EAAAA,EAAO,CACzIC,KAAM,cACJ,kCAAmC,KAAMF,EAAAA,cAAoBC,EAAAA,EAAO,CACtEC,KAAM,8EACJ,KAAMF,EAAAA,cAAoBrB,EAAYQ,GAAI,CAC5CS,GAAI,6CACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,8CACN,aAAc,uDACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,gDAAiD,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,qDAAsDkB,EAAAA,cAAoBC,EAAAA,EAAO,CACpLC,KAAM,0BACJ,0CAA2CF,EAAAA,cAAoBC,EAAAA,EAAO,CACxEC,KAAM,cACJ,WAAYF,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,8BAA+B,QAAS,KAAMU,EAAAA,cAAoBC,EAAAA,EAAO,CACrIC,KAAM,2HACJ,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,SAAUkB,EAAAA,cAAoBC,EAAAA,EAAO,CACtFC,KAAM,oBACJ,wCAAyCF,EAAAA,cAAoBC,EAAAA,EAAO,CACtEC,KAAM,cACJ,mJAAsJ,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,oEAAqE,KAAMkB,EAAAA,cAAoBC,EAAAA,EAAO,CAC7SC,KAAM,iFACJ,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,MAAOkB,EAAAA,cAAoBC,EAAAA,EAAO,CACnFC,KAAM,yCACJ,gEAAiEF,EAAAA,cAAoBC,EAAAA,EAAO,CAC9FC,KAAM,cACJ,KAAM,KAAMF,EAAAA,cAAoBrB,EAAYQ,GAAI,CAClDS,GAAI,yBACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,0BACN,aAAc,mCACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,4BAA6B,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,8EAA+EkB,EAAAA,cAAoBC,EAAAA,EAAO,CACzLC,KAAM,cACJ,+FAAgGF,EAAAA,cAAoBC,EAAAA,EAAO,CAC7HC,KAAM,cACJ,4LAA6LF,EAAAA,cAAoBC,EAAAA,EAAO,CAC1NC,KAAM,cACJ,kFAAmF,KAAMF,EAAAA,cAAoBrB,EAAYI,IAAK,KAAMiB,EAAAA,cAAoBrB,EAAYK,GAAI,CAC1KY,GAAI,wBACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,yBACN,aAAc,kCACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,yBAA0B,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,qWAAsW,KAAMkB,EAAAA,cAAoBrB,EAAYQ,GAAI,CAC5dS,GAAI,0CACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,2CACN,aAAc,oDACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,2CAA4C,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,yZAA0Z,KAAMkB,EAAAA,cAAoBrB,EAAYa,GAAI,CACliBI,GAAI,4BACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,6BACN,aAAc,sCACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,6BAA8B,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,iCAAkC,KAAMkB,EAAAA,cAAoBC,EAAAA,EAAO,CACnJC,KAAM,gDACJ,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,SAAUkB,EAAAA,cAAoBC,EAAAA,EAAO,CACtFC,KAAM,iCACJ,6DAA8D,KAAMF,EAAAA,cAAoBC,EAAAA,EAAO,CACjGC,KAAM,+GACJ,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,oCAAqC,KAAMkB,EAAAA,cAAoBC,EAAAA,EAAO,CACvHC,KAAM,wFACJ,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,iIAAkI,KAAMkB,EAAAA,cAAoBrB,EAAYa,GAAI,CAC7NI,GAAI,8CACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,+CACN,aAAc,wDACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,iDAAkD,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,mZAAoZkB,EAAAA,cAAoBC,EAAAA,EAAO,CACnhBC,KAAM,sBACJ,aAAcF,EAAAA,cAAoBC,EAAAA,EAAO,CAC3CC,KAAM,gBACJ,QAASF,EAAAA,cAAoBC,EAAAA,EAAO,CACtCC,KAAM,gBACJ,2EAA4E,KAAMF,EAAAA,cAAoBrB,EAAYa,GAAI,CACxHI,GAAI,2CACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,4CACN,aAAc,qDACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,8CAA+C,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,uMAAwMkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,cAAe,wDAAyDU,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,cAAe,uZAAwZ,KAAMU,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,sPAAuP,KAAMkB,EAAAA,cAAoBrB,EAAYQ,GAAI,CACpsCS,GAAI,4BACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,6BACN,aAAc,sCACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,6BAA8B,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,sUAAuU,KAAMkB,EAAAA,cAAoBrB,EAAYa,GAAI,CACjcI,GAAI,+BACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,gCACN,aAAc,yCACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,gCAAiC,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,yDAA0DkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,WAAY,4BAA6BU,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,eAAgB,sBAAuBU,EAAAA,cAAoBC,EAAAA,EAAO,CACpVC,KAAM,uBACJ,wNAAyN,KAAMF,EAAAA,cAAoBC,EAAAA,EAAO,CAC5PC,KAAM,wGACJ,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,6QAA8Q,KAAMkB,EAAAA,cAAoBrB,EAAYa,GAAI,CACzWI,GAAI,0BACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,2BACN,aAAc,oCACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,2BAA4B,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,0SAA2SkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,WAAY,KAAMU,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,WAAY,KAAMU,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,WAAY,kHAAmHU,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,YAAa,2KAA4K,KAAMU,EAAAA,cAAoBrB,EAAYa,GAAI,CACv7BI,GAAI,0CACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,2CACN,aAAc,oDACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,2CAA4C,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,oTAAqTkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,4CAA6C,yHAA0H,KAAMU,EAAAA,cAAoBrB,EAAYS,GAAI,KAAM,KAAMY,EAAAA,cAAoBrB,EAAYU,GAAI,KAAM,uEAAwE,KAAMW,EAAAA,cAAoBrB,EAAYU,GAAI,KAAM,iHAAkH,KAAMW,EAAAA,cAAoBrB,EAAYU,GAAI,KAAM,kDAAmD,MAAO,KAAMW,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,4BAA6BkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,YAAa,2HAA4HU,EAAAA,cAAoBC,EAAAA,EAAO,CAC1zCC,KAAM,cACJ,4IAA6I,KAAMF,EAAAA,cAAoBrB,EAAYI,IAAK,KAAMiB,EAAAA,cAAoBrB,EAAYK,GAAI,CACpOY,GAAI,4BACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,6BACN,aAAc,sCACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,6BAA8B,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,sOAAuO,KAAMkB,EAAAA,cAAoBrB,EAAYQ,GAAI,CACjWS,GAAI,8CACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,+CACN,aAAc,wDACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,iDAAkD,KAAMR,EAAAA,cAAoBrB,EAAYY,GAAI,KAAM,KAAMS,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,YAAa,2RAA4R,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,YAAa,sPAAuP,MAAO,KAAMU,EAAAA,cAAoBrB,EAAYQ,GAAI,CAC/3BS,GAAI,+CACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,gDACN,aAAc,yDACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,iDAAkD,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,gNAAiN,KAAMkB,EAAAA,cAAoBrB,EAAYY,GAAI,KAAM,KAAMS,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,kBAAmB,qCAAsC,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,WAAY,6DAA8D,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,kBAAmB,4DAA6D,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,oBAAqB,+CAAgD,MAAO,KAAMU,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,mQAAoQ,KAAMkB,EAAAA,cAAoBrB,EAAYQ,GAAI,CACz1CS,GAAI,+CACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,gDACN,aAAc,yDACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,iDAAkD,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,6hBAA8hB,KAAMkB,EAAAA,cAAoBrB,EAAYQ,GAAI,CAC5qBS,GAAI,8CACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,+CACN,aAAc,wDACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,gDAAiD,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,yYAA0Y,KAAMkB,EAAAA,cAAoBrB,EAAYI,IAAK,KAAMiB,EAAAA,cAAoBrB,EAAYK,GAAI,CAClkBY,GAAI,4BACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,6BACN,aAAc,sCACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,6BAA8B,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,qLAAsL,KAAMkB,EAAAA,cAAoBrB,EAAYQ,GAAI,CAChTS,GAAI,kCACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,mCACN,aAAc,4CACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,qCAAsC,KAAMR,EAAAA,cAAoBrB,EAAYY,GAAI,KAAM,KAAMS,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,sBAAuB,oNAAqN,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,qBAAsB,+LAAgMU,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,eAAgB,2IAA4I,MAAO,KAAMU,EAAAA,cAAoBrB,EAAYQ,GAAI,CACl9BS,GAAI,yCACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,0CACN,aAAc,mDACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,2CAA4C,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,wBAAyBkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,iBAAkB,gKAAiKU,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,qBAAsB,6QAA8Q,KAAMU,EAAAA,cAAoBrB,EAAYQ,GAAI,CACptBS,GAAI,qDACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,sDACN,aAAc,+DACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,uDAAwD,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,6VAA8V,KAAMkB,EAAAA,cAAoBrB,EAAYQ,GAAI,CAClfS,GAAI,oCACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,qCACN,aAAc,8CACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,uCAAwC,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,igBAAkgB,KAAMkB,EAAAA,cAAoBrB,EAAYI,IAAK,KAAMiB,EAAAA,cAAoBrB,EAAYK,GAAI,CACjrBY,GAAI,iCACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,kCACN,aAAc,2CACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,kCAAmC,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,0OAA2O,KAAMkB,EAAAA,cAAoBrB,EAAYQ,GAAI,CAC1WS,GAAI,gDACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,iDACN,aAAc,0DACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,iDAAkD,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,yEAA0E,KAAMkB,EAAAA,cAAoBrB,EAAYY,GAAI,KAAM,KAAMS,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,WAAY,uFAAwF,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,WAAY,KAAMU,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,YAAa,SAAUU,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,YAAa,qEAAsE,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,sBAAuB,wFAAyF,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,WAAY,2HAA4H,MAAO,KAAMU,EAAAA,cAAoBrB,EAAYQ,GAAI,CAC3rCS,GAAI,yCACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,0CACN,aAAc,mDACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,0CAA2C,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,6FAA8F,KAAMkB,EAAAA,cAAoBrB,EAAYS,GAAI,KAAM,KAAMY,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,wBAAyB,sJAAuJ,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,sBAAuB,4HAA6H,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,aAAc,2DAA4D,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAMW,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,mBAAoB,0FAA2F,MAAO,KAAMU,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,yOAA0O,KAAMkB,EAAAA,cAAoBrB,EAAYQ,GAAI,CAC16CS,GAAI,0CACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,2CACN,aAAc,oDACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,2CAA4C,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,kbAAmb,KAAMkB,EAAAA,cAAoBrB,EAAYQ,GAAI,CAC3jBS,GAAI,uCACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,wCACN,aAAc,iDACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,wCAAyC,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,sKAAuK,KAAMkB,EAAAA,cAAoBS,EAAAA,EAAM,CAClSP,KAAM,wqDAyDJ,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,kHAAmH,KAAMkB,EAAAA,cAAoBS,EAAAA,EAAM,CACpMP,KAAM,2uBAyBJ,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,kMAAmM,KAAMkB,EAAAA,cAAoBrB,EAAYI,IAAK,KAAMiB,EAAAA,cAAoBL,EAAO,CAChUe,IAAK,gDACLC,KAAM,GACNC,QAAS,qGACTC,KAAM,UACJ,KAAMb,EAAAA,cAAoBrB,EAAYI,IAAK,KAAMiB,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,kXAAmX,KAAMkB,EAAAA,cAAoBS,EAAAA,EAAM,CAC/eP,KAAM,+0BA0BJ,KAAMF,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,4BAA6BkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,cAAe,0HAA2HU,EAAAA,cAAoBC,EAAAA,EAAO,CACjSC,KAAM,cACJ,QAASF,EAAAA,cAAoBC,EAAAA,EAAO,CACtCC,KAAM,cACJ,oGAAqGF,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,cAAe,gCAAiC,KAAMU,EAAAA,cAAoBrB,EAAYI,IAAK,KAAMiB,EAAAA,cAAoBrB,EAAYK,GAAI,CAC1RY,GAAI,sCACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,uCACN,aAAc,gDACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,yCAA0C,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,2OAA4O,KAAMkB,EAAAA,cAAoBrB,EAAYS,GAAI,KAAM,KAAMY,EAAAA,cAAoBrB,EAAYU,GAAI,KAAM,KAAMW,EAAAA,cAAoBrB,EAAYG,EAAG,KAAMkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,oBAAqB,sNAAuN,MAAO,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAM,KAAMW,EAAAA,cAAoBrB,EAAYG,EAAG,KAAMkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,8CAA+C,wMAAyM,MAAO,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAM,KAAMW,EAAAA,cAAoBrB,EAAYG,EAAG,KAAMkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,2BAA4B,qOAAsO,MAAO,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAM,KAAMW,EAAAA,cAAoBrB,EAAYG,EAAG,KAAMkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,mCAAoC,0JAA2J,MAAO,KAAMU,EAAAA,cAAoBrB,EAAYU,GAAI,KAAM,KAAMW,EAAAA,cAAoBrB,EAAYG,EAAG,KAAMkB,EAAAA,cAAoBrB,EAAYW,OAAQ,KAAM,6CAA8C,+RAAgS,MAAO,MAAO,KAAMU,EAAAA,cAAoBrB,EAAYI,IAAK,KAAMiB,EAAAA,cAAoBrB,EAAYK,GAAI,CAC36EY,GAAI,WACJO,MAAO,CACLC,SAAU,aAEXJ,EAAAA,cAAoBrB,EAAYM,EAAG,CACpCoB,KAAM,YACN,aAAc,qBACdC,UAAW,iBACVN,EAAAA,cAAoBrB,EAAYO,KAAM,CACvCqB,wBAAyB,CACvBC,OAAQ,meAEP,YAAa,KAAMR,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,woBAAyoB,KAAMkB,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,whBAAyhB,KAAMkB,EAAAA,cAAoBrB,EAAYG,EAAG,KAAM,2jBACn0C,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOoC,QAASC,GAAanC,OAAOC,OAAO,CAAC,GAAGY,EAAAA,EAAAA,MAAsBf,EAAMgB,YAC3E,OAAOqB,EAAYf,EAAAA,cAAoBe,EAAWrC,EAAOsB,EAAAA,cAAoBvB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,qKC7uBA,MAAMsC,EAAkBC,IAAW,IAAV,IAACC,GAAID,EAC5B,IAAKC,IAAQA,EAAIC,MAAO,OAAO,KAY/B,OAAOnB,EAAAA,cAAoB,MAAO,CAChCM,UAAWc,EAAAA,GACVpB,EAAAA,cAAoB,KAAM,KAAMkB,EAAIC,MAAME,KAAI,CAACC,EAAMC,IAAUvB,EAAAA,cAAoB,KAAM,CAC1FwB,IAAKD,GACJvB,EAAAA,cAAoB,IAAK,CAC1BK,KAAMiB,EAAKG,IACXC,QAASC,GAjBSC,EAACD,EAAGF,KACtBE,EAAEE,iBACF,MAAMC,EAAWL,EAAIM,QAAQ,IAAK,IAC5BC,EAAgBC,SAASC,eAAeJ,GAC1CE,GACFA,EAAcG,eAAe,CAC3BC,SAAU,SACVC,MAAO,SAEX,EAQcT,CAAYD,EAAGL,EAAKG,MACjCH,EAAKgB,OAAQhB,EAAKH,OAASnB,EAAAA,cAAoBgB,EAAiB,CACjEE,IAAK,CACHC,MAAOG,EAAKH,aAEV,EAED,SAASoB,EAAYC,GAAiD,IAA/CC,MAAM,IAACC,EAAG,OAAEC,EAAM,cAAEC,GAAc,SAAEC,GAASL,EACzE,MAAM,YAACM,EAAW,KAAEC,EAAI,gBAAEC,GAAmBN,EACvCnB,EAAQuB,EAAYvB,MAEpB0B,EADOH,EAAYI,KACJC,MAAM,KAAK,GAE1BC,EADQT,EAAOU,MAAMC,QAAOC,GAAQA,EAAKT,YAAYI,KAAKM,SAAS,IAAIP,QACnDQ,MAAK,CAACxE,EAAGyE,IAAMzE,EAAE6D,YAAYvB,MAAQmC,EAAEZ,YAAYvB,QACvEoC,EAAeP,EAAYQ,WAAUL,GAAQA,EAAKT,YAAYvB,QAAUA,IACxEsC,EAAWT,EAAYO,EAAe,GACtCG,EAAWV,EAAYO,EAAe,GACtCI,EAAcjB,EAAYI,KAAKnB,QAAQ,MAAO,IAC9CiC,EAAc,SAAUC,KAAKF,GAAa,GAC1CG,EAAW,SAASjB,aAAmBe,MACvC,EAACG,EAAY,EAAEC,IAAmBC,EAAAA,EAAAA,UAASvB,EAAYwB,0BACvD,EAACC,EAAW,EAAEC,IAAkBH,EAAAA,EAAAA,WAAS,GAS/C,IAAII,GALJC,EAAAA,EAAAA,YAAU,KACRF,GAAe,GACf,MAAMG,EAAQC,YAAW,IAAMJ,GAAe,IAAQ,KACtD,MAAO,IAAMK,aAAaF,EAAM,GAC/B,CAACR,IAEY,eAAZlB,EACFwB,EAAiBK,EAAAA,GACI,aAAZ7B,EACTwB,EAAiBM,EAAAA,GACI,aAAZ9B,IACTwB,EAAiBO,EAAAA,IAEnB,MACMC,EADgBC,IAAenC,GAAMhB,QAAQ,wBAAyB,IAAIA,QAAQ,SAAU,IAAIA,QAAQ,wBAAyB,IAAIoD,OAC3GhC,MAAM,OAAOiC,OAIvCC,EA5ER,SAAwBC,GACtB,GAAIA,GAAW,GAAI,MAAO,UAC1B,GAAIA,GAAW,GAAI,MAAO,UAC1B,GAAIA,GAAW,GAAI,MAAO,UAC1B,GAAIA,GAAW,GAAI,MAAO,UAC1B,GAAIA,GAAW,GAAI,MAAO,UAC1B,GAAIA,GAAW,GAAI,MAAO,OAC1B,MAAMC,EAAQC,KAAKC,MAAMH,EAAU,IAC7BI,EAAYJ,EAAU,GAC5B,OAAII,GAAa,GACR,IAAIH,IAAQG,EAAY,EAAI,KAAO,OAErC,IAAIH,EAAQ,KACrB,CA+DmBI,CAHWH,KAAKI,KAAKX,EAAYR,IAChC3B,EAAY+C,kBAAoB,IAG5CC,EAAU,CAAC,CACfC,KAAMjD,EAAYkD,UAClBnG,UAAWA,IAAM,0DAChB,CACDkG,KAAMjD,EAAYmD,gBAClBpG,UAAWA,IAAM,0DAChB,CACDkG,KAAMjD,EAAYoD,YAClBrG,UAAWA,IAAM,0DAChB,CACDkG,KAAMjD,EAAYqD,cAClBtG,UAAWA,IAAM,0DAChB,CACDkG,KAAMjD,EAAYsD,YAClBvG,UAAWA,IAAM,0DAChB,CACDkG,KAAMjD,EAAYuD,iBAClBxG,UAAWA,IAAM,0DAChB,CACDkG,KAAMjD,EAAYwD,eAClBzG,UAAWA,IAAM,yDAChB,CACDkG,KAAMjD,EAAYyD,cAClB1G,UAAWA,IAAM,0DAChB,CACDkG,KAAMjD,EAAY0D,kBAClB3G,UAAWA,IAAM,yDAChB,CACDkG,KAAMjD,EAAY2D,WAClB5G,UAAWA,IAAM,4DAEb,EAAC6G,EAAa,EAAEC,IAAoBtC,EAAAA,EAAAA,UAAS,IAUnD,OATAK,EAAAA,EAAAA,YAAU,KACRoB,EAAQc,SAAQC,IAAuB,IAAtB,KAACd,EAAI,UAAElG,GAAUgH,EAC5Bd,GACFlG,IAAYiH,MAAKC,IACfJ,GAAiBK,GAAQ,GAAJC,QAAAC,EAAAA,EAAAA,GAAQF,GAAI,CAAED,EAAOI,WAAS,GAEvD,GACA,GACD,IACInH,EAAAA,cAAoBoH,EAAAA,EAAOC,IAAK,CACrCC,QAAS,CACPC,QAAS,GAEXC,QAAS,CACPD,QAAS,GAEXE,KAAM,CACJF,QAAS,GAEXG,WAAY,CACVC,SAAU,MAEX3H,EAAAA,cAAoB4H,EAAAA,EAAY,CACjCC,WAAY/E,EAAYvB,MACxBuG,KAAMhF,EAAYgF,KAClBC,QAASjF,EAAYiF,QACrB1C,SAAUA,EACV2C,WAAYlF,EAAYmF,gBACxB3F,MAAOQ,EAAYR,MACnB4F,KAAMpF,EAAYoF,KAClBC,OAAQrF,EAAYqF,OACpBlF,QAASA,EACTmF,QAASpE,EACTqE,cAAevF,EAAYmD,gBAC3BqC,QAASxF,EAAYwF,UACnBtI,EAAAA,cAAoB,MAAO,CAC7BG,MAAO,CACLoI,QAAS,OACTC,eAAgB,WAChBC,SAAU,OACVC,SAAU,MACVC,WAAY,OACZC,aAAc,MACdC,UAAW,OACXC,aAAc,QAEfhG,EAAYiG,UAAU1H,KAAI,CAAC2H,EAAKzH,IAAUvB,EAAAA,cAAoB,OAAQ,CACvEwB,IAAKD,EACLjB,UAAW,YAAY2I,EAAAA,KACvB9I,MAAO,CACL+I,OAAQ,gBAETF,MAAQhJ,EAAAA,cAAoB,MAAO,CACpCmJ,MAAO,YACNnJ,EAAAA,cAAoBgB,EAAiB,CACtCE,IAAK8B,KACFhD,EAAAA,cAAoB,MAAOA,EAAAA,cAAoB,MAAO,CACzDG,MAAO,CACL+I,OAAQ,iBACRE,UAAW,UAEZpJ,EAAAA,cAAoBoH,EAAAA,EAAOiC,OAAQ,CACpCF,MAAO,WACP7I,UAAWgJ,EAAAA,GACX1J,GAAI0J,EAAAA,GACJ5H,QAvHmB6H,KACnBnF,GAAiBD,EAAa,EAuH9BqF,SAAU,CACRC,MAAO,MAERzJ,EAAAA,cAAoBoH,EAAAA,EAAOC,IAAK,CACjC/G,UAAWoJ,EAAAA,GACXlI,IAAK2C,EACLmD,QAAS,CACPC,QAAS,GAEXC,QAAS,CACPD,QAAS,GAEXE,KAAM,CACJF,QAAS,GAEXG,WAAY,CACVC,SAAU,GACVgC,KAAM,cAEPxF,EAAe,2BAA6B,2BAA4BnE,EAAAA,cAAoB,MAAOA,EAAAA,cAAoB,MAAO,CAC/HmJ,MAAO,WACPhJ,MAAO,CACL+I,OAAQ/E,EAAe,SAAW,GAClCuE,SAAUvE,EAAe,OAAS,GAClCuD,WAAY,uDAEb1H,EAAAA,cAAoB,MAAO,CAC5BM,UAAW,GAAGgJ,EAAAA,MAAuC/E,EAAc+E,EAAAA,GAAkCA,EAAAA,MACpG5C,EAAcrF,KAAI,CAACuI,EAAiBrI,IAAUvB,EAAAA,cAAoB4J,EAAiB,CACpFpI,IAAKD,MACFuB,EAAY+G,YAAc7J,EAAAA,cAAoB8J,EAAAA,EAAoB,CACrEvI,MAAOuB,EAAY+G,YACnBE,SAAUjH,EAAYkH,qBACnB,GAAIhK,EAAAA,cAAoBiK,EAAAA,EAAaC,SAAU,CAClDC,MAAO,CACLC,OAAQxH,EAAcS,MACtBa,SAAUA,EAASnC,QAAQ,MAAO,IAAM,MAEzC/B,EAAAA,cAAoBqK,EAAAA,GAAa,CAClC3K,WAAY,CACVC,MAAKA,EAAAA,IAENkD,MAAc7C,EAAAA,cAAoBsK,EAAAA,EAAY,CAC/CzG,SAAUA,EACVC,SAAUA,EACVE,WAAYA,EACZf,QAASA,IAEb,CAEe,SAASsH,EAAiB7L,GACvC,OAAOsB,EAAAA,cAAoBuC,EAAc7D,EAAOsB,EAAAA,cAAoBwK,EAAqB9L,GAC3F,CACO,SAAS+L,EAAIC,GAAS,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAAR,KAACtI,GAAKiI,EACzB,MAAM,YAAC5H,GAAeL,EAAKC,IACrBJ,EAAQQ,EAAYkI,UAAYlI,EAAYR,MAC5C2I,EAAUnI,EAAYmI,SAAW3I,EACjC4I,EAAepI,EAAYoI,cAAgB5I,EAC3C6I,EAAcrI,EAAYsI,SAAWtI,EAAYoF,KACjDmD,EAAgBvI,EAAYwI,QAAUH,EACtCI,EAAqBzI,EAAY0I,aAAeL,EAChDM,EAAa3I,EAAY2I,YAAc,cACvCC,EAAW5I,EAAY6I,YACvBC,EAAgB9I,EAAYgF,KAC5B+D,EAAe/I,EAAYiF,SAAW6D,EACtCE,EAAUhJ,EAAYgJ,UAA6B,QAAtBnB,EAAI7H,EAAYqF,cAAM,IAAAwC,GAAiB,QAAjBC,EAAlBD,EAAoBoB,uBAAe,IAAAnB,GAAiB,QAAjBC,EAAnCD,EAAqCoB,uBAAe,IAAAnB,GAAQ,QAARC,EAApDD,EAAsDT,cAAM,IAAAU,GAAU,QAAVC,EAA5DD,EAA8DmB,gBAAQ,IAAAlB,OAApD,EAAlBA,EAAwEmB,KACzGC,EAAarJ,EAAYqJ,YAAcd,EACvCe,EAAetJ,EAAYsJ,cAAgBN,EAC3CO,EAAkBvJ,EAAYuJ,iBAAmBd,EACjDe,EAAexJ,EAAYyJ,aAC3B9F,EAAa3D,EAAY2D,aAAc,EACvC6B,EAAUxF,EAAYwF,SAAW,QACjCrF,EAAUH,EAAYI,KAAKC,MAAM,KAAK,IAAM,SAE5C,QAACqJ,IAAWC,EAAAA,EAAAA,KACZC,EAAiB,CACrB,WAAY,qBACZ,QAAS,iBACT,gBAAmB,CAAC,CAClB,QAAS,WACT,SAAY,EACZ,KAAQ,OACR,KAAQF,GACP,CACD,QAAS,WACT,SAAY,EACZ,KAAQlE,EACR,KAAQ,GAAGkE,KAAW1J,EAAYI,KAAKC,MAAM,KAAK,MACjD,CACD,QAAS,WACT,SAAY,EACZ,KAAQb,EACR,KAAQ,GAAGkK,IAAU1J,EAAYI,UAGrC,OAAOlD,EAAAA,cAAoB2M,EAAAA,EAAK,CAC9BrK,MAAOA,EAAQ,gBACf2I,QAASA,EACTC,aAAcA,EACdC,YAAaA,EACbE,cAAeA,EACfE,mBAAoBA,EACpBE,WAAYA,EACZC,SAAUA,EACVE,cAAeA,EACfC,aAAcA,EACdC,QAASA,EACTK,WAAYA,EACZC,aAAcA,EACdC,gBAAiBA,EACjBC,aAAcA,EACd7F,WAAYA,EACZ6B,QAASA,EACTrF,QAASA,EACT2J,KAzCW,WA0CV5M,EAAAA,cAAoB,SAAU,CAC/B4M,KAAM,uBACLC,KAAKC,UAAUJ,IACpB,C,iDC9SA,IALUzL,IAAe,IAAd,KAAEf,GAAMe,EACjB,OACEjB,EAAAA,cAACC,EAAAA,EAAK,KAAEC,EAAa,C","sources":["webpack://avrtt.blog/./src/pages/posts/research/learning_to_rank.mdx","webpack://avrtt.blog/./src/templates/post.js","webpack://avrtt.blog/./src/components/Latex/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\n/**(intro: a quote, catchphrase, joke, etc.)**/\n/*\n\nРанжирование\nhttps://neerc.ifmo.ru/wiki/index.php?title=%D0%A0%D0%B0%D0%BD%D0%B6%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5\n\nДополнение к ранжированию\nhttps://neerc.ifmo.ru/wiki/index.php?title=%D0%94%D0%BE%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BA_%D1%80%D0%B0%D0%BD%D0%B6%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8E\n\n*/\n/*\n\n1. Motivation\n2. Fundamental concepts\nTypes of ranking problems\nPointwise ranking\nPairwise ranking\nListwise ranking\nLoss functions and evaluation metrics\nMean average precision (MAP)\nNormalized discounted cumulative gain (NDCG)\nPrecision@k and recall@k\netc.\n3. Algorithms and models\nTraditional machine learning approaches\nLinear models for ranking\nTree-based methods (e.g., random forest)\nGradient boosting for ranking (e.g., LambdaMART)\nNeural network approaches\nDeep pairwise ranking models\nListwise neural rankers\nModern transformer-based ranking models\netc.\n4. Training and optimization\n4.1. Pairwise vs. listwise training objectives\n4.2. Addressing overfitting and generalization\n4.3. Hyperparameter tuning and model selection\n4.4. Parallelization and distributed training\n5. Evaluation and validation\n5.1. Offline vs. online evaluation\n5.2. Common pitfalls in model evaluation\n5.3. Statistical significance in ranking comparisons\n5.4. A/B testing and experimentation\n6. Implementations and deployment\nFrameworks and libraries for learning to rank\nSystems design for large-scale ranking\nContinuous model monitoring and updates\nCode snippets for various approaches\n\n*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Highlight from \"../../../components/Highlight\";\nimport Code from \"../../../components/Code\";\nimport Latex from \"../../../components/Latex\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    hr: \"hr\",\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    ul: \"ul\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Image} = _components;\n  if (!Image) _missingMdxReference(\"Image\", true);\n  return React.createElement(React.Fragment, null, \"\\n\", React.createElement(\"br\"), \"\\n\", \"\\n\", \"\\n\", React.createElement(_components.p, null, \"I want to begin this deep dive into learning to rank by highlighting the profound importance of ranking systems in modern data-intensive environments. Every time you open a search engine, scroll through a recommendation feed, or browse for products in an online store, you are engaging with an algorithm that decides — often behind the scenes — how to order information so that the most \\\"useful\\\" or \\\"relevant\\\" items appear first. These tasks may involve ranking web documents, personalizing song recommendations, reordering a user's social media feed, or prioritizing product listings. The underlying principle is that not all content is equally relevant to a user's query, intent, or preference; learning to rank is the discipline that provides mathematical and computational frameworks to produce, evaluate, and optimize such orderings.\"), \"\\n\", React.createElement(_components.p, null, \"The prominence of ranking in commercial and research applications — from search engine result pages (SERPs) to advanced recommender systems — has led to the emergence of specialized algorithms and models. Early ranking techniques simply used heuristic-based scores or domain-specific rules; modern learning-to-rank methods leverage large datasets, sophisticated loss functions, advanced neural networks (including transformer-based architectures), and large-scale distributed training strategies to provide the best possible ordering under complex and dynamic conditions.\"), \"\\n\", React.createElement(_components.p, null, \"Beyond these immediate applications, learning to rank intersects with many other sub-fields of machine learning. Concepts from classification, regression, and clustering appear in pointwise, pairwise, and listwise approaches to ranking. Specialized ranking metrics like NDCG (\", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{normalized discounted cumulative gain} \\\\)\"\n  }), \"), MAP (\", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{mean average precision} \\\\)\"\n  }), \"), and various others shape the way we design objective functions and measure success. The interplay between partial orders, real-valued scoring functions, and the discrete nature of permutations makes ranking an especially fascinating topic where theory and practice often collide in intriguing ways.\"), \"\\n\", React.createElement(_components.p, null, \"This article, intended for a specialized audience of data scientists, researchers, and advanced practitioners, aims to bridge the gap between theory and real-world applications. By the end, I hope to leave you with a thorough, rigorous, and conceptual understanding of learning to rank — from fundamental definitions and classical algorithms to cutting-edge neural approaches and large-scale deployment.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"fundamental-concepts\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#fundamental-concepts\",\n    \"aria-label\": \"fundamental concepts permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Fundamental concepts\"), \"\\n\", React.createElement(_components.p, null, \"Learning to rank is at its core an approach to supervised machine learning. Instead of predicting a label (as in classification) or a numeric value (as in regression), the objective is to predict the relative ordering among items. Often, these items are grouped by some higher-level context (e.g., items that appear in the same search query, or items recommended to a single user). The training data typically consists of ordered lists (or pairwise preferences) for these groupings, and the goal is to learn a ranking function that generalizes to future data.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"types-of-ranking-problems\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#types-of-ranking-problems\",\n    \"aria-label\": \"types of ranking problems permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Types of ranking problems\"), \"\\n\", React.createElement(_components.p, null, \"When discussing learning to rank, it is helpful to distinguish between multiple formulations. While the ultimate output is an ordering or sorted list, the approaches used to arrive at that ordering can differ:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Pointwise ranking\"), \": Treats each item's relevance score as an independent regression or classification target. The predicted score, \", React.createElement(Latex, {\n    text: \"\\\\( a(x) \\\\)\"\n  }), \", for item \", React.createElement(Latex, {\n    text: \"\\\\( x \\\\)\"\n  }), \" is then used to produce a final rank ordering by sorting these predicted values.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Pairwise ranking\"), \": Focuses on learning from pairwise preferences: you know that item \", React.createElement(Latex, {\n    text: \"\\\\( x_i \\\\)\"\n  }), \" is ranked higher than item \", React.createElement(Latex, {\n    text: \"\\\\( x_j \\\\)\"\n  }), \". The objective is to reduce the number of \\\"inversions,\\\" i.e., incorrectly ordered pairs.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Listwise ranking\"), \": Attempts to model the entire ranked list at once. Typically, the loss function measures how close the predicted order is to the ground truth order, using metrics that reward correct placement at the top of the list or penalize larger mistakes for highly relevant items.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Each formulation has its pros and cons. Pointwise methods are conceptually simpler but may not capture the relative ordering constraints explicitly. Pairwise methods often strike a good balance between practicality and direct modeling of preference relationships. Listwise methods, while theoretically aligning most strongly with ranking metrics, can be more complex to implement and optimize effectively at scale.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"pointwise-ranking\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#pointwise-ranking\",\n    \"aria-label\": \"pointwise ranking permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Pointwise ranking\"), \"\\n\", React.createElement(_components.p, null, \"Pointwise ranking can be viewed as a regression or classification problem where the target is the relevance label (e.g., a binary indicator of relevance or a multi-level rating). You estimate a function \", React.createElement(Latex, {\n    text: \"\\\\( a(x) \\\\)\"\n  }), \" that assigns a real-valued score (or probability of relevance) to each item \", React.createElement(Latex, {\n    text: \"\\\\( x \\\\)\"\n  }), \". Once trained, you rank items by sorting them in descending order of \", React.createElement(Latex, {\n    text: \"\\\\( a(x) \\\\)\"\n  }), \".\"), \"\\n\", React.createElement(_components.p, null, \"An example is using linear regression:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\min_{w} \\\\sum_{i=1}^l \\\\left(a(q_i, d_i; w) \\\\;-\\\\; y(q_i, d_i)\\\\right)^2,\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\( y(q_i, d_i) \\\\)\"\n  }), \" is an expert-provided (or user-generated) relevance score for document \", React.createElement(Latex, {\n    text: \"\\\\( d_i \\\\)\"\n  }), \" under query \", React.createElement(Latex, {\n    text: \"\\\\( q_i \\\\)\"\n  }), \", and \", React.createElement(Latex, {\n    text: \"\\\\( a(q_i, d_i; w) = \\\\langle w, x_i\\\\rangle \\\\)\"\n  }), \" is a linear function of the feature vector \", React.createElement(Latex, {\n    text: \"\\\\( x_i \\\\)\"\n  }), \" representing that (query, document) pair. Although pointwise ranking is easy to implement, one limitation is that the model does not directly optimize for typical ranking metrics (like NDCG or MAP) which emphasize correct ordering over numeric accuracy of a predicted score.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"pairwise-ranking\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#pairwise-ranking\",\n    \"aria-label\": \"pairwise ranking permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Pairwise ranking\"), \"\\n\", React.createElement(_components.p, null, \"In pairwise ranking, the focus is on comparing pairs of items. Given a training set of pairs \", React.createElement(Latex, {\n    text: \"\\\\( (x_i, x_j) \\\\)\"\n  }), \" with \", React.createElement(Latex, {\n    text: \"\\\\( x_i \\\\prec x_j \\\\)\"\n  }), \" meaning that item \", React.createElement(Latex, {\n    text: \"\\\\( x_i \\\\)\"\n  }), \" should be ranked lower than \", React.createElement(Latex, {\n    text: \"\\\\( x_j \\\\)\"\n  }), \" (or equivalently, \", React.createElement(Latex, {\n    text: \"\\\\( x_j \\\\)\"\n  }), \" is the more relevant one), the goal is to find \", React.createElement(Latex, {\n    text: \"\\\\( a(\\\\cdot) \\\\)\"\n  }), \" such that \", React.createElement(Latex, {\n    text: \"\\\\( a(x_j) > a(x_i) \\\\)\"\n  }), \" for as many training pairs as possible.\"), \"\\n\", React.createElement(_components.p, null, \"A popular approach is to transform these pairs into a classification-like problem: the difference \", React.createElement(Latex, {\n    text: \"\\\\( a(x_j) - a(x_i) \\\\)\"\n  }), \" is positive if \", React.createElement(Latex, {\n    text: \"\\\\( x_j \\\\)\"\n  }), \" ranks above \", React.createElement(Latex, {\n    text: \"\\\\( x_i \\\\)\"\n  }), \". For instance, a logistic loss might look like:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\sum_{(i,j) \\\\in \\\\text{Pairs}} \\\\log\\\\left(1 + \\\\exp\\\\left(-\\\\left(a(x_j) - a(x_i)\\\\right)\\\\right)\\\\right).\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Minimizing this sum encourages \", React.createElement(Latex, {\n    text: \"\\\\( a(x_j) \\\\)\"\n  }), \" to exceed \", React.createElement(Latex, {\n    text: \"\\\\( a(x_i) \\\\)\"\n  }), \" and penalizes incorrect orderings. This technique underlies methods such as \", React.createElement(_components.strong, null, \"RankNet\"), \", which uses a neural network to learn the function \", React.createElement(Latex, {\n    text: \"\\\\( a(\\\\cdot) \\\\)\"\n  }), \".\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"listwise-ranking\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#listwise-ranking\",\n    \"aria-label\": \"listwise ranking permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Listwise ranking\"), \"\\n\", React.createElement(_components.p, null, \"Unlike pairwise methods that process pairs, listwise methods look at the entire list. The training objective might be designed to directly optimize for a ranking metric like NDCG or MAP. An example is \", React.createElement(_components.strong, null, \"ListNet\"), \", which uses a probability model over permutations and attempts to minimize a Kullback–Leibler divergence between the predicted permutation probabilities and the ground truth distribution of permutations. Another notable example is \", React.createElement(_components.strong, null, \"LambdaRank\"), \", where the gradient is scaled by how much a particular swap of two items would affect a target metric like NDCG.\"), \"\\n\", React.createElement(_components.p, null, \"Listwise approaches can, in principle, align perfectly with how we evaluate ranking systems, since ranking metrics are often list-based. However, building a smooth, differentiable objective that matches these metrics remains a challenge, leading to approximate or surrogate losses.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"loss-functions-and-evaluation-metrics\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#loss-functions-and-evaluation-metrics\",\n    \"aria-label\": \"loss functions and evaluation metrics permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Loss functions and evaluation metrics\"), \"\\n\", React.createElement(_components.p, null, \"An essential part of learning to rank is choosing an appropriate objective function that correlates well with final performance as measured by real-world ranking metrics. These metrics typically place emphasis on the top of the list, because that is where user attention focuses most. Common metrics include:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"MAP\"), \" (\", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{mean average precision} \\\\)\"\n  }), \")\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"NDCG\"), \" (\", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{normalized discounted cumulative gain} \\\\)\"\n  }), \")\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Precision@k and Recall@k\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"MRR\"), \" (\", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{mean reciprocal rank} \\\\)\"\n  }), \")\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"pFound\"), \" (used by some large search engines)\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"ERR\"), \" (\", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{expected reciprocal rank} \\\\)\"\n  }), \")\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Below, I will focus on MAP and NDCG as they are particularly popular.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"mean-average-precision-map\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#mean-average-precision-map\",\n    \"aria-label\": \"mean average precision map permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Mean average precision (MAP)\"), \"\\n\", React.createElement(_components.p, null, \"Mean average precision (MAP) is a metric that measures ranking quality when binary relevance labels \", React.createElement(Latex, {\n    text: \"\\\\( y(q, d) \\\\in \\\\{0, 1\\\\} \\\\)\"\n  }), \" are available. For a given query \", React.createElement(Latex, {\n    text: \"\\\\( q \\\\)\"\n  }), \", define \", React.createElement(Latex, {\n    text: \"\\\\( d_q^{(i)} \\\\)\"\n  }), \" as the document at rank \", React.createElement(Latex, {\n    text: \"\\\\( i \\\\)\"\n  }), \". Precision@\", React.createElement(Latex, {\n    text: \"\\\\( i \\\\)\"\n  }), \" is then the fraction of relevant items among the top \", React.createElement(Latex, {\n    text: \"\\\\( i \\\\)\"\n  }), \" positions:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\text{Precision@}i(q) = \\\\frac{1}{i} \\\\sum_{r=1}^{i} y\\\\bigl(q, d_q^{(r)}\\\\bigr).\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Average precision (AP) at rank \", React.createElement(Latex, {\n    text: \"\\\\( k \\\\)\"\n  }), \" is:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\text{AP@}k(q) = \\\\frac{\\\\sum_{i=1}^{k} y\\\\bigl(q, d_q^{(i)}\\\\bigr) \\\\; \\\\text{Precision@}i(q)}{\\\\sum_{i=1}^{k} y\\\\bigl(q, d_q^{(i)}\\\\bigr)}.\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"It increases when relevant documents appear earlier. MAP@\", React.createElement(Latex, {\n    text: \"\\\\( k \\\\)\"\n  }), \" is the mean over all queries:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\text{MAP@}k = \\\\frac{1}{|Q|}\\\\sum_{q \\\\in Q} \\\\text{AP@}k(q).\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"normalized-discounted-cumulative-gain-ndcg\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#normalized-discounted-cumulative-gain-ndcg\",\n    \"aria-label\": \"normalized discounted cumulative gain ndcg permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Normalized discounted cumulative gain (NDCG)\"), \"\\n\", React.createElement(_components.p, null, \"NDCG handles multi-level (graded) relevance, e.g. \", React.createElement(Latex, {\n    text: \"\\\\( \\\\{0,1,2,3\\\\} \\\\)\"\n  }), \" or real numbers. For a ranked list of \", React.createElement(Latex, {\n    text: \"\\\\( k \\\\)\"\n  }), \" items, \", React.createElement(_components.strong, null, \"discounted cumulative gain\"), \" is:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\text{DCG@}k(q) = \\\\sum_{i=1}^{k} \\\\frac{2^{\\\\,y\\\\bigl(q, d_q^{(i)}\\\\bigr)} - 1}{\\\\log_2\\\\bigl(i+1\\\\bigr)},\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\( y(q, d) \\\\)\"\n  }), \" is the relevance rating of document \", React.createElement(Latex, {\n    text: \"\\\\( d \\\\)\"\n  }), \". DCG places a heavier penalty on items that are relevant but placed near the bottom of the list, because of the logarithmic \\\"discount\\\" factor.\"), \"\\n\", React.createElement(_components.p, null, \"NDCG normalizes DCG by the best possible (ideal) ordering's DCG:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\text{nDCG@}k(q) = \\\\frac{\\\\text{DCG@}k(q)}{\\\\text{maxDCG@}k(q)},\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"so \", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{nDCG@}k(q) \\\\in [0,1] \\\\)\"\n  }), \". A ranking that exactly matches the ideal ordering achieves \", React.createElement(Latex, {\n    text: \"\\\\( 1 \\\\)\"\n  }), \".\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"precisionk-and-recallk\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#precisionk-and-recallk\",\n    \"aria-label\": \"precisionk and recallk permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Precision@k and recall@k\"), \"\\n\", React.createElement(_components.p, null, \"Precision@k simply checks the fraction of relevant documents among the top \", React.createElement(Latex, {\n    text: \"\\\\( k \\\\)\"\n  }), \" positions. Recall@k checks the fraction of all relevant documents retrieved within the top \", React.createElement(Latex, {\n    text: \"\\\\( k \\\\)\"\n  }), \" ranks. While both are easy to interpret, they do not explicitly penalize placing a relevant item at position 10 vs. position 1; they only check whether the relevant item is in the top \", React.createElement(Latex, {\n    text: \"\\\\( k \\\\)\"\n  }), \". More refined metrics (like nDCG) care about the exact position of each item.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"algorithms-and-models\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#algorithms-and-models\",\n    \"aria-label\": \"algorithms and models permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Algorithms and models\"), \"\\n\", React.createElement(_components.p, null, \"Learning-to-rank algorithms span classic machine learning, ensemble methods, large-scale gradient boosting, and advanced neural network models that can incorporate deep architectures or even transformers. Historically, academic conferences like SIGIR, WWW, KDD, and NeurIPS have played host to numerous new ranking algorithms that push state of the art.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"traditional-machine-learning-approaches\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#traditional-machine-learning-approaches\",\n    \"aria-label\": \"traditional machine learning approaches permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Traditional machine learning approaches\"), \"\\n\", React.createElement(_components.p, null, \"Traditional methods began by applying known supervised learning paradigms (regression, classification) to ranking. For instance, you could simply train a linear regressor (or logistic regressor in the binary relevance setting) to predict a relevance score for each item. Then you sort items by that predicted score. Alternatively, you might adapt a classification approach to minimize pairwise inversions.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"linear-models-for-ranking\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#linear-models-for-ranking\",\n    \"aria-label\": \"linear models for ranking permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Linear models for ranking\"), \"\\n\", React.createElement(_components.p, null, \"A linear ranker has the form:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\na(x; w) = \\\\langle w, x \\\\rangle,\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\( x \\\\in \\\\mathbb{R}^n \\\\)\"\n  }), \" is a feature vector. The training might involve solving:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\min_{w}\\\\quad \\\\sum_{(i, j)} L\\\\bigl(\\\\langle w, x_j\\\\rangle - \\\\langle w, x_i\\\\rangle\\\\bigr),\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"if using a pairwise approach, or\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\min_{w}\\\\quad \\\\sum_{i} \\\\left(\\\\langle w, x_i\\\\rangle - y_i\\\\right)^2,\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"in the pointwise scenario. Linear models are fast, interpretable, and remain relevant in many large-scale industrial systems.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"tree-based-methods-including-random-forests\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#tree-based-methods-including-random-forests\",\n    \"aria-label\": \"tree based methods including random forests permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Tree-based methods (including random forests)\"), \"\\n\", React.createElement(_components.p, null, \"Decision trees and random forests have also been adapted for ranking tasks. A random forest can produce a real-valued relevance prediction for each item. Typically, each tree outputs a score (e.g., the mean label of training samples in the corresponding leaf), and the final prediction is an average over all trees. In pairwise setups, each data point corresponds to a difference of feature vectors (\", React.createElement(Latex, {\n    text: \"\\\\( x_j - x_i \\\\)\"\n  }), \") or both \", React.createElement(Latex, {\n    text: \"\\\\( x_i \\\\)\"\n  }), \" and \", React.createElement(Latex, {\n    text: \"\\\\( x_j \\\\)\"\n  }), \" are fed to the model (though that can get more complicated for trees).\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"gradient-boosting-for-ranking-lambdamart\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#gradient-boosting-for-ranking-lambdamart\",\n    \"aria-label\": \"gradient boosting for ranking lambdamart permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Gradient boosting for ranking (LambdaMART)\"), \"\\n\", React.createElement(_components.p, null, \"One of the most widely used classes of ranking algorithms in industry — from web search to e-commerce — involves gradient boosting over regression trees, combined with specialized ranking losses. \", React.createElement(_components.strong, null, \"LambdaMART\"), \" is a prime example: it starts from the principle of \", React.createElement(_components.strong, null, \"LambdaRank\"), \" (a listwise approach that modifies the gradient by the potential gain in NDCG from pairwise swaps) and applies it in a gradient boosting framework. Each iteration fits a new regression tree to the current pseudo-residuals, which incorporate both the standard pairwise logistic gradient and a factor that captures how a small change in the item scores would affect the final ranking metric (e.g., NDCG).\"), \"\\n\", React.createElement(_components.p, null, \"LambdaMART has been championed by several large-scale search engines (notably Microsoft's Bing in the original research) and remains a go-to method for tabular ranking tasks where features are mostly numeric or categorical in structured form.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"neural-network-approaches\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#neural-network-approaches\",\n    \"aria-label\": \"neural network approaches permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Neural network approaches\"), \"\\n\", React.createElement(_components.p, null, \"As deep learning rose to prominence, researchers explored neural architectures for ranking. Neural networks can handle raw or high-dimensional input data (like text embeddings, images, or user-event logs) without extensive feature engineering, and they can, in principle, learn sophisticated context-aware representations.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"deep-pairwise-ranking-models\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#deep-pairwise-ranking-models\",\n    \"aria-label\": \"deep pairwise ranking models permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Deep pairwise ranking models\"), \"\\n\", React.createElement(_components.p, null, \"A neural approach to pairwise ranking, exemplified by \", React.createElement(_components.strong, null, \"RankNet\"), \" or neural adaptation of \", React.createElement(_components.strong, null, \"Ranking SVM\"), \", processes a pair \", React.createElement(Latex, {\n    text: \"\\\\( (x_i, x_j) \\\\)\"\n  }), \" as two separate forward passes (or a combined architecture with shared parameters). It then produces a difference in predicted scores. The objective might be a logistic or hinge loss. For instance, RankNet uses:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\nL = \\\\sum_{i,j} \\\\log\\\\Bigl(1 + \\\\exp\\\\bigl(-\\\\bigl(a(x_j) - a(x_i)\\\\bigr)\\\\bigr)\\\\Bigr).\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Because neural networks can approximate complex nonlinear mappings, they can capture richer interactions among features than a simple linear approach. This is particularly helpful if items come with textual or image embeddings as part of the feature representation.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"listwise-neural-rankers\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#listwise-neural-rankers\",\n    \"aria-label\": \"listwise neural rankers permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Listwise neural rankers\"), \"\\n\", React.createElement(_components.p, null, \"Building on pairwise neural methods, listwise neural rankers incorporate an entire list (or a mini-batch that approximates a list) and define a training objective that tries to match the final ordering to ground truth labels in a manner consistent with typical ranking metrics. Examples include \", React.createElement(_components.strong, null, \"ListNet\"), \", \", React.createElement(_components.strong, null, \"ListMLE\"), \", \", React.createElement(_components.strong, null, \"AdaRank\"), \", and neural variations that optimize a smoothed approximation of NDCG. Some approaches draw on the concept of \", React.createElement(_components.strong, null, \"SoftRank\"), \", which attempts to make the listwise metric differentiable by modeling the probability of each document's position in the ranked list through a continuous relaxation.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"modern-transformer-based-ranking-models\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#modern-transformer-based-ranking-models\",\n    \"aria-label\": \"modern transformer based ranking models permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Modern transformer-based ranking models\"), \"\\n\", React.createElement(_components.p, null, \"Transformer architectures have proven immensely powerful for language tasks, and ranking is no exception, especially in the context of search and recommendation. Large pretrained language models, like BERT, can be finetuned to produce high-quality relevance estimates. There is a growing sub-field called \", React.createElement(_components.strong, null, \"Neural Information Retrieval (Neural IR)\"), \" that focuses on using transformers to re-rank candidate sets of documents or product items. Typically, these models:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Encode the query and each candidate item (document, passage, etc.).\"), \"\\n\", React.createElement(_components.li, null, \"Combine or compare these representations, often with cross-attention mechanisms, to predict relevance scores.\"), \"\\n\", React.createElement(_components.li, null, \"Sort the candidates according to these scores.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Recent methods may adopt \", React.createElement(_components.strong, null, \"listwise\"), \" approaches by feeding multiple items in a single pass and computing specialized losses that account for the entire top-\", React.createElement(Latex, {\n    text: \"\\\\( k \\\\)\"\n  }), \" list. However, compute constraints often necessitate pairwise or pointwise re-ranking, especially if the number of candidates is large.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"training-and-optimization\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#training-and-optimization\",\n    \"aria-label\": \"training and optimization permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Training and optimization\"), \"\\n\", React.createElement(_components.p, null, \"Designing and training a learning-to-rank model involves carefully balancing computational tractability, the complexity of the ranking objective, and the need to generalize to new data. Below are some recurring considerations:\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"41-pairwise-vs-listwise-training-objectives\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#41-pairwise-vs-listwise-training-objectives\",\n    \"aria-label\": \"41 pairwise vs listwise training objectives permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"4.1 Pairwise vs. listwise training objectives\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Pairwise\"), \" objectives can be easier to handle at large scale because the loss function becomes a sum over pairs, and standard stochastic gradient descent or mini-batch approaches can be used. However, pairwise methods may not perfectly align with the ultimate list-based metrics like NDCG.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Listwise\"), \" methods incorporate the entire ranking at once and can directly optimize metrics such as NDCG. But their computational complexity and potential difficulty in building a smooth or differentiable approximation of the metric can be substantial.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"42-addressing-overfitting-and-generalization\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#42-addressing-overfitting-and-generalization\",\n    \"aria-label\": \"42 addressing overfitting and generalization permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"4.2 Addressing overfitting and generalization\"), \"\\n\", React.createElement(_components.p, null, \"Like any supervised method, a learning-to-rank model can overfit — for instance, memorizing training queries without effectively generalizing to unseen queries. Strategies to mitigate overfitting include:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Regularization\"), \" (L1, L2, or more advanced forms)\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Dropout\"), \" and data augmentation (especially for neural approaches)\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Early stopping\"), \" based on validation metrics like validation NDCG or MAP\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Cross-validation\"), \" or repeated sampling for robust evaluation\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"A frequent problem is that the training set might have incomplete or noisy judgments (e.g., not all relevant items are labeled), which complicates generalization. Methods like negative sampling or incomplete-label strategies can help address these issues.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"43-hyperparameter-tuning-and-model-selection\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#43-hyperparameter-tuning-and-model-selection\",\n    \"aria-label\": \"43 hyperparameter tuning and model selection permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"4.3 Hyperparameter tuning and model selection\"), \"\\n\", React.createElement(_components.p, null, \"Hyperparameters (such as learning rate, tree depth in gradient boosting, or network architecture in neural ranking) can be tuned using any standard approach: grid search, random search, or Bayesian optimization. The key difference is that the validation metric for ranking is typically NDCG or MAP. For instance, you might pick the hyperparameters that maximize validation NDCG@10. Tuning can be performed offline if you have a curated dataset with relevance judgments, or in certain contexts, online metrics can be used in live systems.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"44-parallelization-and-distributed-training\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#44-parallelization-and-distributed-training\",\n    \"aria-label\": \"44 parallelization and distributed training permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"4.4 Parallelization and distributed training\"), \"\\n\", React.createElement(_components.p, null, \"Web-scale ranking tasks can involve billions of training examples. Distributing the workload becomes critical. For tree-based rankers like LambdaMART, frameworks such as XGBoost, LightGBM, or CatBoost offer built-in support for distributed training. For neural rankers, frameworks like TensorFlow or PyTorch can parallelize mini-batch computations across multiple GPUs or across a cluster.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"evaluation-and-validation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#evaluation-and-validation\",\n    \"aria-label\": \"evaluation and validation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Evaluation and validation\"), \"\\n\", React.createElement(_components.p, null, \"Once a model is trained, the next question is: how do I assess its quality and how do I confirm that improvements in offline experiments carry over into actual user experiences?\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"51-offline-vs-online-evaluation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#51-offline-vs-online-evaluation\",\n    \"aria-label\": \"51 offline vs online evaluation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"5.1 Offline vs. online evaluation\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Offline evaluation\"), \" uses a labeled test set (with known relevance scores, clicks, or pairwise preferences). You compute metrics like nDCG, MAP, or Precision@k. Offline evaluation is relatively cheap and can be repeated at will.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Online evaluation\"), \" measures user-facing impact by deploying the model in a production environment and analyzing metrics such as click-through rate, session length, or direct user feedback. Commonly used is \", React.createElement(_components.strong, null, \"A/B testing\"), \" (sometimes multi-armed bandits or interleaving methods) to confirm that a new ranker truly outperforms the existing production system.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"52-common-pitfalls-in-model-evaluation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#52-common-pitfalls-in-model-evaluation\",\n    \"aria-label\": \"52 common pitfalls in model evaluation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"5.2 Common pitfalls in model evaluation\"), \"\\n\", React.createElement(_components.p, null, \"A classic pitfall is \", React.createElement(_components.strong, null, \"position bias\"), \" in user feedback: users rarely venture beyond the first few items of a list, so top positions get more clicks simply by virtue of being visible. Another is \", React.createElement(_components.strong, null, \"presentation bias\"), \", where the visual arrangement can distort which items get attention. Offline datasets might also have incomplete relevance judgments (missing some relevant items), leading to an underestimation of performance if the model ranks unknown relevant items near the top.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"53-statistical-significance-in-ranking-comparisons\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#53-statistical-significance-in-ranking-comparisons\",\n    \"aria-label\": \"53 statistical significance in ranking comparisons permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"5.3 Statistical significance in ranking comparisons\"), \"\\n\", React.createElement(_components.p, null, \"When comparing two rankers with slightly different metrics, it is often necessary to conduct significance tests, such as a paired t-test or Wilcoxon signed-rank test, to confirm that performance differences are not due to chance. Observed differences in MAP or nDCG can sometimes be small but still translate to meaningful improvements at scale.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"54-ab-testing-and-experimentation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#54-ab-testing-and-experimentation\",\n    \"aria-label\": \"54 ab testing and experimentation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"5.4 A/B testing and experimentation\"), \"\\n\", React.createElement(_components.p, null, \"A/B testing is the gold standard for measuring how a new ranker performs with real users. Typically, a fraction of users sees the new ranking system while the rest see the control system. By comparing user engagement, click-through rate, or other domain-specific metrics, one can quantitatively determine whether the new system yields a statistically significant improvement. Given the strong potential for confounding factors, controlled experiments are vital for robust conclusions about system performance.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"implementations-and-deployment\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#implementations-and-deployment\",\n    \"aria-label\": \"implementations and deployment permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Implementations and deployment\"), \"\\n\", React.createElement(_components.p, null, \"Developing a ranker in a research environment is one challenge; deploying it at scale with low latency, continuous data updates, and real-time monitoring is another. Below are some notes on practical implementation and deployment.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"frameworks-and-libraries-for-learning-to-rank\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#frameworks-and-libraries-for-learning-to-rank\",\n    \"aria-label\": \"frameworks and libraries for learning to rank permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Frameworks and libraries for learning to rank\"), \"\\n\", React.createElement(_components.p, null, \"Many open-source libraries and platforms facilitate learning to rank:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"RankLib\"), \" (part of Lemur/Indri) provides implementations for RankNet, ListNet, AdaRank, etc.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"XGBoost\"), \", \", React.createElement(_components.strong, null, \"LightGBM\"), \", and \", React.createElement(_components.strong, null, \"CatBoost\"), \" implement specialized ranking objectives (pairwise, NDCG-based).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TensorFlow Ranking\"), \" has advanced neural-based ranking tools, including listwise objectives and metrics.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"PyTorch\"), \" is used widely for custom neural rankers, with research code for LambdaRank, SoftRank, transformer-based rankers, etc.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"systems-design-for-large-scale-ranking\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#systems-design-for-large-scale-ranking\",\n    \"aria-label\": \"systems design for large scale ranking permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Systems design for large-scale ranking\"), \"\\n\", React.createElement(_components.p, null, \"Real-world ranking systems (e.g., a search engine) might have the following architecture:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Candidate generation\"), \": from a massive corpus, quickly retrieve a candidate set (using approximate nearest neighbor search, inverted indices, or specialized retrieval).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Feature extraction\"), \": each candidate item is associated with a feature vector (like textual features, user behavior, or contextual signals).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Reranking\"), \": a learning-to-rank model reorders the top candidates.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Post-processing\"), \": might add constraints or blending, ensuring certain items appear in the top results.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Often, the ranking model is served in a high-throughput, low-latency environment. This requires specialized infrastructure with fast inference (e.g., GPU inference for deep rankers, optimized CPU inference for tree-based models).\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"continuous-model-monitoring-and-updates\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#continuous-model-monitoring-and-updates\",\n    \"aria-label\": \"continuous model monitoring and updates permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Continuous model monitoring and updates\"), \"\\n\", React.createElement(_components.p, null, \"Ranking systems typically see non-stationary data distributions: user tastes evolve, new documents appear, old documents become irrelevant. A well-designed system may retrain or fine-tune the ranking model on fresh data every few hours or days. Monitoring pipelines ensure that key metrics (like NDCG@10 on new queries) remain stable, and that sudden distributional shifts trigger anomaly detection or reanalysis of training data.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"code-snippets-for-various-approaches\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#code-snippets-for-various-approaches\",\n    \"aria-label\": \"code snippets for various approaches permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Code snippets for various approaches\"), \"\\n\", React.createElement(_components.p, null, \"Below is a brief demonstration of how one might implement a pairwise ranking approach in Python using PyTorch. Here, I illustrate a simplified version of RankNet:\"), \"\\n\", React.createElement(Code, {\n    text: `\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\n\n# Hypothetical neural network ranker\nclass SimpleRankNet(nn.Module):\n    def __init__(self, input_dim, hidden_dim=64):\n        super(SimpleRankNet, self).__init__()\n        self.net = nn.Sequential(\n            nn.Linear(input_dim, hidden_dim),\n            nn.ReLU(),\n            nn.Linear(hidden_dim, 1)\n        )\n        \n    def forward(self, x):\n        # Returns the relevance score for each item\n        return self.net(x).squeeze(-1)\n\n\ndef pairwise_loss(score_i, score_j):\n    # Sigmoid pairwise loss\n    # We want score_j > score_i, so margin = score_j - score_i\n    margin = score_j - score_i\n    return torch.log1p(torch.exp(-margin))\n\n\n# Example usage:\n# Let's assume we have pairs of items (features_i, features_j) \n# and a label that indicates i < j in ranking\n\ninput_dim = 128\nmodel = SimpleRankNet(input_dim=input_dim)\noptimizer = optim.Adam(model.parameters(), lr=1e-3)\n\n# A toy training loop\nfor epoch in range(10):  # Just 10 epochs for demonstration\n    # Suppose we have a batch of pairs\n    # features_i, features_j are Tensors of shape [batch_size, input_dim]\n    # we also have a binary label or direct knowledge that i < j for each pair\n    \n    features_i = torch.randn(32, input_dim)  # random toy features\n    features_j = torch.randn(32, input_dim)\n    \n    # Forward pass\n    score_i = model(features_i)\n    score_j = model(features_j)\n    \n    loss = pairwise_loss(score_i, score_j).mean()\n    \n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    \n    if epoch % 2 == 0:\n        print(f\"Epoch {epoch}, Loss: {loss.item():.4f}\")\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"And here is a brief snippet showing how you might compute a simple version of nDCG@k for a set of predictions:\"), \"\\n\", React.createElement(Code, {\n    text: `\nimport numpy as np\n\ndef ndcg_at_k(scores, labels, k=10):\n    \"\"\"\n    scores: array of predicted scores\n    labels: array of ground truth relevances\n    both arrays of shape [num_items]\n    \"\"\"\n    idx = np.argsort(scores)[::-1]  # descending sort\n    sorted_labels = labels[idx]\n    # DCG\n    dcg = 0.0\n    for i in range(min(k, len(labels))):\n        rel = sorted_labels[i]\n        dcg += (2**rel - 1) / np.log2(i + 2)  # i+2 because log2(1+1) for i=0\n    # IDCG\n    ideal_idx = np.argsort(labels)[::-1]\n    ideal_labels = labels[ideal_idx]\n    idcg = 0.0\n    for i in range(min(k, len(labels))):\n        rel = ideal_labels[i]\n        idcg += (2**rel - 1) / np.log2(i + 2)\n    return dcg / idcg if idcg > 0 else 0.0\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"These examples are purely demonstrative: real-world ranking systems require more elaborate handling, especially for grouping items by query, partial labeling, and large-scale data ingestion.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(Image, {\n    alt: \"High-level architecture of a ranking pipeline\",\n    path: \"\",\n    caption: \"A conceptual overview of candidate generation, feature extraction, and learning-to-rank reranking.\",\n    zoom: \"false\"\n  }), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"Below, as an additional illustration, is a second snippet that might show how to set up a basic lambda-based approach in a gradient boosting context (using pseudocode rather than a specific library). The idea is that each iteration calculates a pseudo-residual incorporating a factor derived from how swapping two items in the current list affects the target metric:\"), \"\\n\", React.createElement(Code, {\n    text: `\n# Pseudocode sketch for one iteration of LambdaMART:\n# docs_for_query: list of docs relevant to a single query\n# current_scores: scores from the current model\n# rel_labels: the ground-truth relevance for each doc\n\nfor each doc_i, doc_j in docs_for_query:\n    if rel_labels[i] > rel_labels[j]:\n        # doc_i is more relevant than doc_j\n        S_ij = 1\n    else:\n        S_ij = -1\n    \n    # partial derivative of logistic loss\n    rho = 1.0 / (1 + exp(current_scores[doc_i] - current_scores[doc_j])) \n    lambda_ij = - S_ij * rho\n    \n    # factor for NDCG impact:\n    delta_ndcg = estimate_delta_ndcg_if_swapped(doc_i, doc_j)\n    \n    # final gradient for doc_i, doc_j\n    lambda_ij *= delta_ndcg\n    \n    # accumulate the lambdas to produce a single gradient for doc_i \n    # and doc_j used in the next tree fit\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"The final line shows how \", React.createElement(_components.strong, null, \"LambdaRank\"), \" modifies the gradient used in boosting by multiplying in the change in nDCG that would result from swapping the items \", React.createElement(Latex, {\n    text: \"\\\\( i \\\\)\"\n  }), \" and \", React.createElement(Latex, {\n    text: \"\\\\( j \\\\)\"\n  }), \". This approach (plus a tree-building algorithm that fits these pseudo-residuals) is roughly how \", React.createElement(_components.strong, null, \"LambdaMART\"), \" is implemented in practice.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"optional-additional-advanced-themes\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#optional-additional-advanced-themes\",\n    \"aria-label\": \"optional additional advanced themes permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"(Optional) Additional advanced themes\"), \"\\n\", React.createElement(_components.p, null, \"To make this article as comprehensive as possible for an advanced ML audience, I want to highlight a few specialized topics, though they are somewhat beyond the conventional scope of a straightforward learning-to-rank introduction:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Cascaded ranking\"), \": Where you partially evaluate items or use smaller models in an initial stage and only apply a computationally expensive re-ranker on a smaller subset. This is crucial in large-scale systems to reduce latency.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Contextual bandits for ranker optimization\"), \": Instead of passively collecting labeled data, an online system can explore different orderings and adapt based on user clicks. This crosses into the domain of reinforcement learning for ranking.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Multi-objective ranking\"), \": In many applications, you want to optimize not just user relevance but also fairness, diversity, or coverage. Combining multiple objectives can be done via specialized constraints or multi-objective optimization frameworks.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Counterfactual learning to rank\"), \": Handling biased user feedback by modeling the data generation process. For example, using inverse propensity weighting to correct for position bias.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Transformer-based cross-attention rankers\"), \": For text-heavy ranking tasks (e.g., passage re-ranking in question answering systems), cross-attention between query and text can lead to significantly better semantic matching. Fine-tuning pretrained language models on labeled ranking data (e.g., MS MARCO) is a standard approach.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"end-note\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#end-note\",\n    \"aria-label\": \"end note permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"End note\"), \"\\n\", React.createElement(_components.p, null, \"Learning to rank is a vibrant subfield of machine learning, bridging theoretical elegance with wide-ranging practical utility. Researchers continue to devise new metrics, optimization techniques, and approaches to handle partial or noisy labels at scale. Practitioners, meanwhile, rely on robust, proven algorithms like gradient boosted decision trees (LambdaMART) or advanced neural rankers finetuned from large pretrained models. The interplay of these approaches and the myriad of domain-specific nuances — from search engine design to e-commerce personalization — makes learning to rank a uniquely challenging and rewarding field to master.\"), \"\\n\", React.createElement(_components.p, null, \"Whether you choose a pointwise, pairwise, or listwise approach, the success of your ranking system ultimately depends on carefully engineered features (or embeddings), well-chosen metrics (like NDCG), reliable training procedures (with the right objective function), and thoughtful evaluation (both offline and online). Through a balanced understanding of each step — from conceptual motivations to advanced distributed training strategies — you can build ranking models that profoundly impact user experience and business outcomes.\"), \"\\n\", React.createElement(_components.p, null, \"I hope this extended tour has illuminated both the conceptual underpinnings and the practical considerations involved in learning to rank. As you progress through this advanced course, you will see how these ideas intersect with numerous other topics, from large-scale data pipelines to specialized deep neural architectures and beyond. By experimenting with the code snippets, exploring the frameworks mentioned, and staying current with the latest research, you will be well equipped to develop powerful ranking systems that meet the demands of modern applications.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/avrtt/Repos/avrtt.github.io/src/pages/posts/research/learning_to_rank.mdx\";\nimport React, {useState, useEffect} from 'react';\nimport {useSiteMetadata} from \"../hooks/useSiteMetadata\";\nimport RemoveMarkdown from 'remove-markdown';\nimport {ImageContext} from '../context/ImageContext';\nimport {MDXProvider} from '@mdx-js/react';\nimport Image from '../components/PostImage';\nimport {motion} from 'framer-motion';\nimport SEO from \"../components/seo\";\nimport PostBanner from '../components/PostBanner';\nimport PostBottom from '../components/PostBottom';\nimport {wordsPerMinuteAdventures, wordsPerMinuteResearch, wordsPerMinuteThoughts} from '../data/commonVariables';\nimport {graphql} from 'gatsby';\nimport PartOfCourseNotice from \"../components/PartOfCourseNotice\";\nimport * as stylesButtonsCommon from \"../styles/buttons_common.module.scss\";\nimport * as stylesCustomPostLayouts from \"../styles/custom_post_layouts.module.scss\";\nimport * as stylesTableOfContents from \"../styles/table_of_contents.module.scss\";\nimport * as stylesTagBadges from \"../styles/tag_badges.module.scss\";\nfunction formatReadTime(minutes) {\n  if (minutes <= 10) return '~10 min';\n  if (minutes <= 20) return '~20 min';\n  if (minutes <= 30) return '~30 min';\n  if (minutes <= 40) return '~40 min';\n  if (minutes <= 50) return '~50 min';\n  if (minutes <= 60) return '~1 h';\n  const hours = Math.floor(minutes / 60);\n  const remainder = minutes % 60;\n  if (remainder <= 30) {\n    return `~${hours}${remainder > 0 ? '.5' : ''} h`;\n  }\n  return `~${hours + 1} h`;\n}\nconst TableOfContents = ({toc}) => {\n  if (!toc || !toc.items) return null;\n  const handleClick = (e, url) => {\n    e.preventDefault();\n    const targetId = url.replace('#', '');\n    const targetElement = document.getElementById(targetId);\n    if (targetElement) {\n      targetElement.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }\n  };\n  return React.createElement(\"nav\", {\n    className: stylesTableOfContents.toc\n  }, React.createElement(\"ul\", null, toc.items.map((item, index) => React.createElement(\"li\", {\n    key: index\n  }, React.createElement(\"a\", {\n    href: item.url,\n    onClick: e => handleClick(e, item.url)\n  }, item.title), item.items && React.createElement(TableOfContents, {\n    toc: {\n      items: item.items\n    }\n  })))));\n};\nexport function PostTemplate({data: {mdx, allMdx, allPostImages}, children}) {\n  const {frontmatter, body, tableOfContents} = mdx;\n  const index = frontmatter.index;\n  const slug = frontmatter.slug;\n  const section = slug.split('/')[1];\n  const posts = allMdx.nodes.filter(post => post.frontmatter.slug.includes(`/${section}/`));\n  const sortedPosts = posts.sort((a, b) => a.frontmatter.index - b.frontmatter.index);\n  const currentIndex = sortedPosts.findIndex(post => post.frontmatter.index === index);\n  const nextPost = sortedPosts[currentIndex + 1];\n  const lastPost = sortedPosts[currentIndex - 1];\n  const trimmedSlug = frontmatter.slug.replace(/\\/$/, '');\n  const keyCurrent = (/[^/]*$/).exec(trimmedSlug)[0];\n  const basePath = `posts/${section}/content/${keyCurrent}/`;\n  const [isWideLayout, setIsWideLayout] = useState(frontmatter.flagWideLayoutByDefault);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const toggleLayout = () => {\n    setIsWideLayout(!isWideLayout);\n  };\n  useEffect(() => {\n    setIsAnimating(true);\n    const timer = setTimeout(() => setIsAnimating(false), 340);\n    return () => clearTimeout(timer);\n  }, [isWideLayout]);\n  var wordsPerMinute;\n  if (section === \"adventures\") {\n    wordsPerMinute = wordsPerMinuteAdventures;\n  } else if (section === \"research\") {\n    wordsPerMinute = wordsPerMinuteResearch;\n  } else if (section === \"thoughts\") {\n    wordsPerMinute = wordsPerMinuteThoughts;\n  }\n  const plainTextBody = RemoveMarkdown(body).replace(/import .*? from .*?;/g, '').replace(/<.*?>/g, '').replace(/\\{\\/\\*[\\s\\S]*?\\*\\/\\}/g, '').trim();\n  const wordCount = plainTextBody.split(/\\s+/).length;\n  const baseReadTimeMinutes = Math.ceil(wordCount / wordsPerMinute);\n  const extraTime = frontmatter.extraReadTimeMin || 0;\n  const totalReadTime = baseReadTimeMinutes + extraTime;\n  const readTime = formatReadTime(totalReadTime);\n  const notices = [{\n    flag: frontmatter.flagDraft,\n    component: () => import(\"../components/NotFinishedNotice\")\n  }, {\n    flag: frontmatter.flagMindfuckery,\n    component: () => import(\"../components/MindfuckeryNotice\")\n  }, {\n    flag: frontmatter.flagRewrite,\n    component: () => import(\"../components/RewriteNotice\")\n  }, {\n    flag: frontmatter.flagOffensive,\n    component: () => import(\"../components/OffensiveNotice\")\n  }, {\n    flag: frontmatter.flagProfane,\n    component: () => import(\"../components/ProfanityNotice\")\n  }, {\n    flag: frontmatter.flagMultilingual,\n    component: () => import(\"../components/MultilingualNotice\")\n  }, {\n    flag: frontmatter.flagUnreliably,\n    component: () => import(\"../components/UnreliablyNotice\")\n  }, {\n    flag: frontmatter.flagPolitical,\n    component: () => import(\"../components/PoliticsNotice\")\n  }, {\n    flag: frontmatter.flagCognitohazard,\n    component: () => import(\"../components/CognitohazardNotice\")\n  }, {\n    flag: frontmatter.flagHidden,\n    component: () => import(\"../components/HiddenNotice\")\n  }];\n  const [loadedNotices, setLoadedNotices] = useState([]);\n  useEffect(() => {\n    notices.forEach(({flag, component}) => {\n      if (flag) {\n        component().then(module => {\n          setLoadedNotices(prev => [...prev, module.default]);\n        });\n      }\n    });\n  }, []);\n  return React.createElement(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.15\n    }\n  }, React.createElement(PostBanner, {\n    postNumber: frontmatter.index,\n    date: frontmatter.date,\n    updated: frontmatter.updated,\n    readTime: readTime,\n    difficulty: frontmatter.difficultyLevel,\n    title: frontmatter.title,\n    desc: frontmatter.desc,\n    banner: frontmatter.banner,\n    section: section,\n    postKey: keyCurrent,\n    isMindfuckery: frontmatter.flagMindfuckery,\n    mainTag: frontmatter.mainTag\n  }), React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      flexWrap: \"wrap\",\n      maxWidth: \"75%\",\n      marginLeft: \"auto\",\n      paddingRight: \"1vw\",\n      marginTop: \"-6vh\",\n      marginBottom: \"4vh\"\n    }\n  }, frontmatter.otherTags.map((tag, index) => React.createElement(\"span\", {\n    key: index,\n    className: `noselect ${stylesTagBadges.tagPosts}`,\n    style: {\n      margin: \"0 5px 5px 0\"\n    }\n  }, tag))), React.createElement(\"div\", {\n    class: \"postBody\"\n  }, React.createElement(TableOfContents, {\n    toc: tableOfContents\n  })), React.createElement(\"br\"), React.createElement(\"div\", {\n    style: {\n      margin: \"0 10% -2vh 30%\",\n      textAlign: \"right\"\n    }\n  }, React.createElement(motion.button, {\n    class: \"noselect\",\n    className: stylesCustomPostLayouts.postButton,\n    id: stylesCustomPostLayouts.postLayoutSwitchButton,\n    onClick: toggleLayout,\n    whileTap: {\n      scale: 0.93\n    }\n  }, React.createElement(motion.div, {\n    className: stylesButtonsCommon.buttonTextWrapper,\n    key: isWideLayout,\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.3,\n      ease: \"easeInOut\"\n    }\n  }, isWideLayout ? \"Switch to default layout\" : \"Switch to wide layout\"))), React.createElement(\"br\"), React.createElement(\"div\", {\n    class: \"postBody\",\n    style: {\n      margin: isWideLayout ? \"0 -14%\" : \"\",\n      maxWidth: isWideLayout ? \"200%\" : \"\",\n      transition: \"margin 1s ease, max-width 1s ease, padding 1s ease\"\n    }\n  }, React.createElement(\"div\", {\n    className: `${stylesCustomPostLayouts.textContent} ${isAnimating ? stylesCustomPostLayouts.fadeOut : stylesCustomPostLayouts.fadeIn}`\n  }, loadedNotices.map((NoticeComponent, index) => React.createElement(NoticeComponent, {\n    key: index\n  })), frontmatter.indexCourse ? React.createElement(PartOfCourseNotice, {\n    index: frontmatter.indexCourse,\n    category: frontmatter.courseCategoryName\n  }) : \"\", React.createElement(ImageContext.Provider, {\n    value: {\n      images: allPostImages.nodes,\n      basePath: basePath.replace(/\\/$/, '') + '/'\n    }\n  }, React.createElement(MDXProvider, {\n    components: {\n      Image\n    }\n  }, children)))), React.createElement(PostBottom, {\n    nextPost: nextPost,\n    lastPost: lastPost,\n    keyCurrent: keyCurrent,\n    section: section\n  }));\n}\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport function Head({data}) {\n  const {frontmatter} = data.mdx;\n  const title = frontmatter.titleSEO || frontmatter.title;\n  const titleOG = frontmatter.titleOG || title;\n  const titleTwitter = frontmatter.titleTwitter || title;\n  const description = frontmatter.descSEO || frontmatter.desc;\n  const descriptionOG = frontmatter.descOG || description;\n  const descriptionTwitter = frontmatter.descTwitter || description;\n  const schemaType = frontmatter.schemaType || \"BlogPosting\";\n  const keywords = frontmatter.keywordsSEO;\n  const datePublished = frontmatter.date;\n  const dateModified = frontmatter.updated || datePublished;\n  const imageOG = frontmatter.imageOG || frontmatter.banner?.childImageSharp?.gatsbyImageData?.images?.fallback?.src;\n  const imageAltOG = frontmatter.imageAltOG || descriptionOG;\n  const imageTwitter = frontmatter.imageTwitter || imageOG;\n  const imageAltTwitter = frontmatter.imageAltTwitter || descriptionTwitter;\n  const canonicalUrl = frontmatter.canonicalURL;\n  const flagHidden = frontmatter.flagHidden || false;\n  const mainTag = frontmatter.mainTag || \"Posts\";\n  const section = frontmatter.slug.split('/')[1] || \"posts\";\n  const type = \"article\";\n  const {siteUrl} = useSiteMetadata();\n  const breadcrumbJSON = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    \"itemListElement\": [{\n      \"@type\": \"ListItem\",\n      \"position\": 1,\n      \"name\": \"Home\",\n      \"item\": siteUrl\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 2,\n      \"name\": mainTag,\n      \"item\": `${siteUrl}/${frontmatter.slug.split('/')[1]}`\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 3,\n      \"name\": title,\n      \"item\": `${siteUrl}${frontmatter.slug}`\n    }]\n  };\n  return React.createElement(SEO, {\n    title: title + \" - avrtt.blog\",\n    titleOG: titleOG,\n    titleTwitter: titleTwitter,\n    description: description,\n    descriptionOG: descriptionOG,\n    descriptionTwitter: descriptionTwitter,\n    schemaType: schemaType,\n    keywords: keywords,\n    datePublished: datePublished,\n    dateModified: dateModified,\n    imageOG: imageOG,\n    imageAltOG: imageAltOG,\n    imageTwitter: imageTwitter,\n    imageAltTwitter: imageAltTwitter,\n    canonicalUrl: canonicalUrl,\n    flagHidden: flagHidden,\n    mainTag: mainTag,\n    section: section,\n    type: type\n  }, React.createElement(\"script\", {\n    type: \"application/ld+json\"\n  }, JSON.stringify(breadcrumbJSON)));\n}\nexport const query = graphql`\n  query($id: String!, $postsFilterRegex: String!, $imagePathRegex: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        index\n        indexCourse\n        title\n        titleSEO\n        titleOG\n        titleTwitter\n        courseCategoryName\n        desc\n        descSEO\n        descOG\n        descTwitter\n        date\n        updated\n        extraReadTimeMin\n        difficultyLevel\n        flagDraft\n        flagMindfuckery\n        flagRewrite\n        flagOffensive\n        flagProfane\n        flagMultilingual\n        flagUnreliably\n        flagPolitical\n        flagCognitohazard\n        flagHidden\n        flagWideLayoutByDefault\n        schemaType\n        mainTag\n        otherTags\n        keywordsSEO\n        banner {\n          childImageSharp {\n            gatsbyImageData(\n\t\t\t\t\t\t\tformats: [JPG, WEBP], \n\t\t\t\t\t\t\tplaceholder: BLURRED, \n\t\t\t\t\t\t\tquality: 100\n\t\t\t\t\t\t)\n          }\n        }\n        imageOG\n        imageAltOG\n        imageTwitter\n        imageAltTwitter\n        canonicalURL\n        slug\n      }\n      body\n      tableOfContents(maxDepth: 3)\n    }\n    allMdx(filter: {frontmatter: {slug: {regex: $postsFilterRegex}}}) {\n      nodes {\n        frontmatter {\n          index\n          slug\n          banner {\n            childImageSharp {\n              gatsbyImageData(\n                formats: [JPG, WEBP],\n                placeholder: BLURRED,\n                quality: 100\n              )\n            }\n          }\n        }\n      }\n    }\n    allPostImages: allFile(\n      filter: { \n        sourceInstanceName: { eq: \"images\" },\n        relativePath: { regex: $imagePathRegex }\n      }\n    ) {\n      nodes {\n        relativePath\n        childImageSharp {\n          gatsbyImageData(\n            layout: CONSTRAINED\n            placeholder: DOMINANT_COLOR\n            quality: 100\n          )\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport Latex from 'react-latex-next';\nimport 'katex/dist/katex.min.css'; \n  \nconst L = ({ text }) => {\n  return (\n    <Latex>{text}</Latex>\n  );\n};\nexport default L;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","hr","h2","a","span","h3","ol","li","strong","ul","h4","_provideComponents","components","Image","id","component","Error","_missingMdxReference","React","Latex","text","style","position","href","className","dangerouslySetInnerHTML","__html","Code","alt","path","caption","zoom","wrapper","MDXLayout","TableOfContents","_ref","toc","items","stylesTableOfContents","map","item","index","key","url","onClick","e","handleClick","preventDefault","targetId","replace","targetElement","document","getElementById","scrollIntoView","behavior","block","title","PostTemplate","_ref2","data","mdx","allMdx","allPostImages","children","frontmatter","body","tableOfContents","section","slug","split","sortedPosts","nodes","filter","post","includes","sort","b","currentIndex","findIndex","nextPost","lastPost","trimmedSlug","keyCurrent","exec","basePath","isWideLayout","setIsWideLayout","useState","flagWideLayoutByDefault","isAnimating","setIsAnimating","wordsPerMinute","useEffect","timer","setTimeout","clearTimeout","wordsPerMinuteAdventures","wordsPerMinuteResearch","wordsPerMinuteThoughts","wordCount","RemoveMarkdown","trim","length","readTime","minutes","hours","Math","floor","remainder","formatReadTime","ceil","extraReadTimeMin","notices","flag","flagDraft","flagMindfuckery","flagRewrite","flagOffensive","flagProfane","flagMultilingual","flagUnreliably","flagPolitical","flagCognitohazard","flagHidden","loadedNotices","setLoadedNotices","forEach","_ref3","then","module","prev","concat","_toConsumableArray","default","motion","div","initial","opacity","animate","exit","transition","duration","PostBanner","postNumber","date","updated","difficulty","difficultyLevel","desc","banner","postKey","isMindfuckery","mainTag","display","justifyContent","flexWrap","maxWidth","marginLeft","paddingRight","marginTop","marginBottom","otherTags","tag","stylesTagBadges","margin","class","textAlign","button","stylesCustomPostLayouts","toggleLayout","whileTap","scale","stylesButtonsCommon","ease","NoticeComponent","indexCourse","PartOfCourseNotice","category","courseCategoryName","ImageContext","Provider","value","images","MDXProvider","PostBottom","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref4","_frontmatter$banner","_frontmatter$banner$c","_frontmatter$banner$c2","_frontmatter$banner$c3","_frontmatter$banner$c4","titleSEO","titleOG","titleTwitter","description","descSEO","descriptionOG","descOG","descriptionTwitter","descTwitter","schemaType","keywords","keywordsSEO","datePublished","dateModified","imageOG","childImageSharp","gatsbyImageData","fallback","src","imageAltOG","imageTwitter","imageAltTwitter","canonicalUrl","canonicalURL","siteUrl","useSiteMetadata","breadcrumbJSON","SEO","type","JSON","stringify"],"sourceRoot":""}