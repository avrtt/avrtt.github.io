"use strict";(self.webpackChunkavrtt_blog=self.webpackChunkavrtt_blog||[]).push([[3945],{1879:function(e,t,n){n.r(t),n.d(t,{Head:function(){return T},PostTemplate:function(){return z},default:function(){return S}});var a=n(54506),i=n(28453),r=n(96540),l=(n(16886),n(46295)),s=n(96098);function o(e){const t=Object.assign({p:"p",ul:"ul",li:"li",h2:"h2",a:"a",span:"span",h3:"h3",ol:"ol",strong:"strong",br:"br",hr:"hr"},(0,i.RP)(),e.components),{Image:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Image",!0),r.createElement(r.Fragment,null,"\n",r.createElement("br"),"\n","\n","\n",r.createElement(t.p,null,"Deep convolutional neural networks have revolutionized computer vision tasks by dramatically increasing the accuracy of models on benchmarks such as ImageNet, COCO, and many other large-scale datasets. Starting from the early success of AlexNet (Krizhevsky and gang, NeurIPS 2012) and followed by VGGNet (Simonyan and Zisserman, ICLR 2015) and GoogLeNet (Szegedy and gang, CVPR 2015), the research community recognized that adding more layers to neural networks often improved representational capacity and overall performance. However, simply stacking layers to deepen a network introduced a major challenge — the vanishing gradient problem. As networks grew deeper, the gradients in backpropagation became extremely small for the early layers, hindering learning and leading to difficulties in training."),"\n",r.createElement(t.p,null,'To address this issue, a team led by Kaiming He at Microsoft Research proposed the concept of residual learning, culminating in the groundbreaking "ResNet" architecture (He and gang, CVPR 2016). ResNet, an abbreviation for "residual network", introduced skip connections that effectively bypass certain layers, allowing gradients to flow unimpeded from later layers back to earlier layers. This approach mitigated vanishing gradients and made it possible to successfully train models with far deeper topologies — some versions of ResNet have well over 100 layers — while achieving superior performance compared to shallower models.'),"\n",r.createElement(t.p,null,'The motivation behind ResNet can be summarized by the insight that learning the "residual" mapping — the difference between a layer\'s input and output — may be easier than learning the unreferenced transformation from scratch. The skip (or "shortcut") connections in ResNet facilitate this by explicitly adding a reference pathway for the gradient, effectively turning certain sub-layers into residual blocks. The result is a network that not only addresses vanishing gradients but also accelerates convergence and enhances overall accuracy.'),"\n",r.createElement(t.p,null,"Historically, before residual learning, researchers struggled with networks deeper than 20 or 30 layers. VGGNet, for example, had up to 19 layers and required significant computational resources to train. Even slight modifications or expansions to deeper architectures often ran into severe training difficulties. ResNet overcame these limitations and showed that extremely deep networks — for instance, ResNet-101 or ResNet-152 — could match or surpass shallower networks in both accuracy and efficiency. This leap in performance ushered in a new wave of experiments with deeper and more complicated network designs, like DenseNet (Huang and gang, CVPR 2017) and ResNeXt (Xie and gang, CVPR 2017)."),"\n",r.createElement(t.p,null,"Another driving force for ResNet's emergence was the research community's hunger for models that could efficiently capture hierarchical and compositional structures in images. With skip connections, ResNets became highly expressive while avoiding some of the pitfalls of extremely deep architectures. In tasks such as object classification, detection, and semantic segmentation, ResNet-based models quickly became the de facto baseline, outperforming traditional convolutional backbones. Moreover, the skip-connection insight influenced numerous subsequent designs in natural language processing and speech recognition. In Transformers (Vaswani and gang, NeurIPS 2017), for example, skip-like residual pathways are ubiquitous, illustrating the widespread adoption of the residual concept."),"\n",r.createElement(t.p,null,"Finally, from a theoretical standpoint, the impetus behind ResNet's design was also driven by studies about function optimization. Researchers speculated that deeper networks can approximate complicated functions with fewer parameters compared to shallower networks if they can be trained effectively. Residual learning made it feasible to push the depth of networks to new extremes, reaffirming the connection between architecture depth, function approximation capacity, and training stability."),"\n",r.createElement(t.p,null,"In summary, ResNet was motivated by:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"The desire to train much deeper networks without vanishing gradients."),"\n",r.createElement(t.li,null,"The insight that learning residual functions is more tractable than learning unreferenced transformations."),"\n",r.createElement(t.li,null,"Demonstrated empirical success in surpassing prior state-of-the-art models on large-scale vision tasks."),"\n",r.createElement(t.li,null,"The theoretical promise of deep structures capable of representing highly complex features."),"\n"),"\n",r.createElement(t.p,null,"The rest of this article dives into the architecture and implementation details of ResNets, along with the training mechanisms that make them successful in practice, a survey of known variants, and a discussion of advanced topics."),"\n",r.createElement(t.h2,{id:"2-architecture",style:{position:"relative"}},r.createElement(t.a,{href:"#2-architecture","aria-label":"2 architecture permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2. Architecture"),"\n",r.createElement(t.p,null,'The ResNet architecture is characterized by its use of "residual blocks" that introduce skip connections, thereby enabling gradient flow across many layers. Although the design can vary depending on depth and intended application (e.g., image classification vs. object detection), there is a consistent set of principles that remain at the heart of any ResNet variant.'),"\n",r.createElement(t.p,null,"Below, I explore the fundamental building blocks of ResNet, highlighting details about convolutional layers, skip connections, layer stacking strategies, bottleneck structures, initialization strategies, and the role of batch normalization. These components form a cohesive framework that addresses key training challenges in deep neural networks."),"\n",r.createElement(t.h3,{id:"21-convolutional-layers-and-feature-extraction",style:{position:"relative"}},r.createElement(t.a,{href:"#21-convolutional-layers-and-feature-extraction","aria-label":"21 convolutional layers and feature extraction permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.1 convolutional layers and feature extraction"),"\n",r.createElement(t.p,null,"In typical convolutional neural network (CNN) designs, stacked convolutional layers act as hierarchical feature extractors. Early layers capture low-level features (edges, corners, simple color contrasts), while intermediate and deep layers capture more abstract features (object parts, textures, compositions). ResNet continues this tradition by using standard convolutional layers at every stage, but it couples them with the skip connection mechanism to facilitate robust gradient propagation."),"\n",r.createElement(t.p,null,"A standard ResNet often begins with an initial convolution that has a relatively large kernel size (for example, a 7×7 convolution in the original ResNet for ImageNet classification) and a stride of 2, followed by a pooling layer. This initial layer helps the network quickly reduce the spatial dimensions of the input image, focusing computation on more abstract features. Subsequent layers are grouped into different stages, each doubling or otherwise scaling the number of channels (i.e., feature maps) and sometimes further reducing spatial dimensions via strided convolutions."),"\n",r.createElement(t.p,null,"Formally, a single convolutional layer performing a 2D convolution can be described by:"),"\n",r.createElement(s.A,{text:"\\[\nO_{i,j}^{(k)} = \\sum_{u,v} W_{u,v}^{(k)} \\times I_{i+u, j+v} + b^{(k)},\n\\]"}),"\n",r.createElement(t.p,null,"Here, ",r.createElement(s.A,{text:"\\(O\\)"})," is the output feature map at spatial coordinates ",r.createElement(s.A,{text:"\\(i, j\\)"}),", ",r.createElement(s.A,{text:"\\(k\\)"})," indexes the particular output channel, ",r.createElement(s.A,{text:"\\(W\\)"})," and ",r.createElement(s.A,{text:"\\(b\\)"})," are trainable weights and bias, respectively, and ",r.createElement(s.A,{text:"\\(I\\)"})," is the input feature map. While this is the basic convolution formula that underlies all CNNs, ResNet's innovation relies not in a new convolution itself but rather in how these convolutions are composed and connected."),"\n",r.createElement(t.p,null,"Because ResNet aims to go deep, having 18, 34, 50, or even more layers, the design uses relatively small kernel sizes in many places (e.g., 3×3 kernels). This choice helps keep the number of parameters and the computational overhead within reasonable bounds. Additionally, these smaller kernels repeatedly capture local features and combine them across multiple layers, which can effectively represent complicated patterns in images."),"\n",r.createElement(t.p,null,"From a practical standpoint, the choice of kernel sizes, stride, and padding in ResNet is deeply informed by earlier architectures (VGG, for instance) that proved 3×3 convolutions are quite effective. ResNet also consistently applies a stride of 2 at certain layers to reduce spatial resolution, akin to pooling, though it is carried out through convolution rather than relying exclusively on max-pooling layers. This process yields a hierarchical reduction in spatial dimension and an increase in channel depth, feeding deeper layers with progressively abstract feature maps."),"\n",r.createElement(t.h3,{id:"22-the-role-of-skip-connections",style:{position:"relative"}},r.createElement(t.a,{href:"#22-the-role-of-skip-connections","aria-label":"22 the role of skip connections permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.2 the role of skip connections"),"\n",r.createElement(t.p,null,"Skip connections are the defining feature of ResNet, enabling the model to learn residual mappings. In a typical CNN without skip connections, the output of a stack of layers is simply:"),"\n",r.createElement(s.A,{text:"\\( \\text{output} = F(x) \\)"}),"\n",r.createElement(t.p,null,"where ",r.createElement(s.A,{text:"\\(F(\\cdot)\\)"})," represents the transformation learned by the stacked layers and ",r.createElement(s.A,{text:"\\(x\\)"})," is the input to that stack. In ResNet, by contrast, the architecture explicitly adds ",r.createElement(s.A,{text:"\\(x\\)"})," to the output of ",r.createElement(s.A,{text:"\\(F(x)\\)"}),":"),"\n",r.createElement(s.A,{text:"\\[\n\\text{output} = F(x) + x.\n\\]"}),"\n",r.createElement(t.p,null,"Here, the function ",r.createElement(s.A,{text:"\\(F(\\cdot)\\)"}),' is often thought of as the "residual function" with respect to the identity mapping. By rephrasing the layer\'s objective as ',r.createElement(s.A,{text:"\\(F(x) + x\\)"}),", ResNet reduces the difficulty of directly approximating complex transformations. Instead, the network can learn to tweak the identity mapping, or in other words, it learns how the output should differ from ",r.createElement(s.A,{text:"\\(x\\)"}),". This approach has shown significant advantages in mitigating vanishing gradients, because the gradient of the loss with respect to ",r.createElement(s.A,{text:"\\(x\\)"})," can flow through the addition operation more directly."),"\n",r.createElement(t.p,null,'Conceptually, if deeper layers are not needed to improve the performance beyond what earlier layers achieve, then the network can more easily learn something close to an identity function, effectively skipping the deeper layers. This approach addresses the phenomenon where adding more layers sometimes leads to higher training and test error (a problem known as "degradation"). Instead, deeper networks with skip connections are capable of learning at least as well as their shallower counterparts, and often substantially better.'),"\n",r.createElement(t.p,null,"In practice, the skip connection is typically implemented by a simple addition operation in the computational graph, occasionally preceded by a 1×1 convolution if matching shapes or dimension increases are needed. The success of this approach is not purely about gradient shortcuts; it also facilitates faster convergence. The network effectively sees references to earlier stage outputs, allowing deeper layers to refine, rather than wholly reinvent, the features from the earlier layers."),"\n",r.createElement(t.h3,{id:"23-identity-and-projection-shortcuts",style:{position:"relative"}},r.createElement(t.a,{href:"#23-identity-and-projection-shortcuts","aria-label":"23 identity and projection shortcuts permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.3 identity and projection shortcuts"),"\n",r.createElement(t.p,null,'ResNet uses two main forms of skip connections, often referred to as "shortcuts":'),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Identity shortcut"),": Where the input is added to the output of the stacked layers directly, requiring the output to match the input shape exactly (i.e., same number of channels and the same spatial resolution)."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Projection shortcut"),": Where a 1×1 convolution (often accompanied by a stride) is applied to the input before addition, ensuring that shapes are compatible when the number of channels changes or when the spatial resolution is reduced."),"\n"),"\n",r.createElement(t.p,null,"Mathematically, we can describe a residual block with a projection shortcut (e.g., used when downsampling is required) as:"),"\n",r.createElement(s.A,{text:"\\[\n\\text{output} = F(x) + W_s x,\n\\]"}),"\n",r.createElement(t.p,null,"where ",r.createElement(s.A,{text:"\\(W_s\\)"})," is a learned weight matrix that projects the input ",r.createElement(s.A,{text:"\\(x\\)"})," to match the dimension of ",r.createElement(s.A,{text:"\\(F(x)\\)"}),". Typically, ",r.createElement(s.A,{text:"\\(W_s\\)"})," might represent a 1×1 convolution with stride 2 (or some other stride), effectively cutting the spatial dimension in half if needed and expanding or contracting the number of channels to match."),"\n",r.createElement(t.p,null,"Identity shortcuts are used whenever possible, since they simplify the structure and lighten the parameter overhead. However, every time the network changes the output dimension or modifies resolution, a projection shortcut is employed to ensure that the summation ",r.createElement(s.A,{text:"\\(F(x) + x\\)"})," remains dimensionally consistent."),"\n",r.createElement(t.p,null,"From a design perspective, identity shortcuts reflect the simplest approach to skip connections, and they reinforce the principle that the deeper layers are refining the features from earlier layers rather than discarding or rewriting them altogether. Projection shortcuts, while more computationally demanding, preserve the skip connection advantage when the feature map size or number of channels changes."),"\n",r.createElement(t.h3,{id:"24-resnet-design-principles",style:{position:"relative"}},r.createElement(t.a,{href:"#24-resnet-design-principles","aria-label":"24 resnet design principles permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.4 resnet design principles"),"\n",r.createElement(t.p,null,"While the fundamental idea of residual blocks is straightforward, it is the careful orchestration of these blocks that drives ResNet's success. From the original paper, the creators of ResNet (He and gang) laid out a number of guiding principles:"),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Use of small kernels"),": Many parts of ResNet rely heavily on 3×3 filters, following the VGG16/VGG19 design style. Small kernels reduce parameter counts and preserve a simpler architecture."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Batch normalization"),": Each convolutional layer in a residual block is typically followed by batch normalization (BN) and a ReLU activation. BN normalizes activations across the batch dimension, stabilizing gradients and accelerating training (Ioffe and Szegedy, ICML 2015)."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Downsampling"),": ResNets use strided convolution (often in the first convolution of a residual block at each new stage) for downsampling. This approach replaces or supplements max-pooling layers."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"No pooling in the middle"),": Rather than using repeated pooling layers throughout the network, ResNet relies primarily on strided convolutions for dimension changes."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Avoiding complicated topologies"),": Other advanced architectures, such as Inception, introduced more intricate module structures. By comparison, ResNet is simpler in its building block design, focusing on direct skip connections and 3×3 convolutions."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Deep but consistent"),": Stacking multiple blocks in a repeated pattern fosters a consistent design that is relatively easy to scale up or down."),"\n"),"\n",r.createElement(t.p,null,"These principles make ResNet more modular, facilitating the creation of different variants (e.g., ResNet-18 vs. ResNet-152) by repeating residual blocks in a standardized way. Researchers and practitioners alike find this modularity to be advantageous when customizing ResNets for different tasks."),"\n",r.createElement(t.h3,{id:"25-layer-stacking-strategy",style:{position:"relative"}},r.createElement(t.a,{href:"#25-layer-stacking-strategy","aria-label":"25 layer stacking strategy permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.5 layer stacking strategy"),"\n",r.createElement(t.p,null,'A typical ResNet architecture for ImageNet classification is divided into multiple "stages" or "groups":'),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Stage 0"),": An initial convolution with a relatively large kernel (7×7) and stride 2, followed by a pooling layer."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Stage 1"),": A stack of residual blocks with 64 filters (output channels)."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Stage 2"),": A stack of residual blocks with 128 filters, often with stride 2 in the first block to reduce spatial resolution."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Stage 3"),": A stack of residual blocks with 256 filters, again using stride 2 for downsampling."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Stage 4"),": A stack of residual blocks with 512 filters, downsampling once more."),"\n"),"\n",r.createElement(t.p,null,"The exact number of blocks in each stage determines the overall depth of the ResNet. For example, ResNet-18 uses fewer blocks in each stage compared to ResNet-50 or ResNet-152. After these stages, a global average pooling is usually applied, followed by a fully connected layer for classification (for tasks such as ImageNet)."),"\n",r.createElement(t.p,null,"The interplay between the number of filters and the spatial resolution is critical. The deeper stages have more filters but smaller spatial dimensions, keeping the computational footprint from exploding while still preserving the ability to capture complex, high-level features. The existence of skip connections across each block helps the network leverage features from earlier layers without forcing each stage to relearn the identity mapping."),"\n",r.createElement(t.p,null,"In deployment scenarios, this stacking strategy can be adapted:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"For smaller input images, some stages might be shortened or omitted."),"\n",r.createElement(t.li,null,"For deeper architectures, additional blocks can be inserted into each stage."),"\n",r.createElement(t.li,null,"For specialized tasks like object detection (e.g., Faster R-CNN or Mask R-CNN), the ResNet backbone might be truncated in later layers or augmented with feature pyramid networks for multi-scale feature extraction."),"\n"),"\n",r.createElement(t.h3,{id:"26-bottleneck-building-blocks",style:{position:"relative"}},r.createElement(t.a,{href:"#26-bottleneck-building-blocks","aria-label":"26 bottleneck building blocks permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.6 bottleneck building blocks"),"\n",r.createElement(t.p,null,'In deeper variants of ResNet — typically those with 50 or more layers (ResNet-50, ResNet-101, ResNet-152) — a "bottleneck" design is used within residual blocks. This design reduces the computational burden while allowing for deeper stacking. A bottleneck block typically uses three convolutions:'),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"1×1 convolution"),' to reduce channel dimension (sometimes called the "reduction" or "compression" step).'),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"3×3 convolution")," for the main spatial feature extraction."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"1×1 convolution"),' to restore the reduced dimension to the original channel dimension (sometimes called the "expansion" step).'),"\n"),"\n",r.createElement(t.p,null,"Hence, the input with a certain number of channels is first reduced in dimensionality, processed with a 3×3 convolution at a smaller channel size, and then expanded back to the original dimension before the skip addition. This approach is beneficial because the intermediate 3×3 convolution operates on fewer channels, significantly lowering the number of operations and parameters while still providing the necessary capacity for learning complex transformations."),"\n",r.createElement(t.p,null,"Mathematically, if ",r.createElement(s.A,{text:"\\(C\\)"})," is the number of input channels in the block, and the bottleneck factor is ",r.createElement(s.A,{text:"\\(r\\)"})," (typical values are around 4), then the intermediate representation might have ",r.createElement(s.A,{text:"\\(C/r\\)"})," channels. The 3×3 convolution will then have ",r.createElement(s.A,{text:"\\(C/r \\times C/r \\times 3 \\times 3\\)"})," parameters rather than ",r.createElement(s.A,{text:"\\(C \\times C \\times 3 \\times 3\\)"}),". The final 1×1 expansion reverts the channel count to ",r.createElement(s.A,{text:"\\(C\\)"})," so it can be added elementwise to the identity or projected input."),"\n",r.createElement(t.p,null,"In summary, bottleneck blocks enable ResNet to go deeper (up to 152 layers and beyond) without incurring a massive computational cost. This architectural pattern has influenced a wide range of subsequent network designs, including many top-performers in computer vision challenges."),"\n",r.createElement(t.h3,{id:"27-initialization-and-batch-normalization-practices",style:{position:"relative"}},r.createElement(t.a,{href:"#27-initialization-and-batch-normalization-practices","aria-label":"27 initialization and batch normalization practices permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2.7 initialization and batch normalization practices"),"\n",r.createElement(t.p,null,"Another critical component of ResNet's training stability is the use of well-thought-out weight initialization and normalization layers. Two key elements stand out:"),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Initialization"),": The original ResNet work used variants of He initialization (He and gang, ICCV 2015), which is especially designed for ReLU-based networks. This approach sets the initial weights in a manner that preserves the signal variance across layers. In subsequent practice, some prefer more nuanced initialization schemes or additional tricks like zero-initializing the last batch normalization gamma parameter in each residual branch, ensuring that each residual block initially behaves like an identity function. This further stabilizes early training and ensures that the network can effectively skip layers at the beginning if needed."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Batch Normalization (BN)"),": By normalizing the outputs of each convolution across the batch dimension, BN helps keep the activation distribution stable as data flows through many layers. This is absolutely vital in deeper networks, as unregulated activation distributions can explode or vanish quickly. BN also often includes learnable scale and shift parameters, which, together with skip connections, give the network further expressiveness."),"\n"),"\n"),"\n",r.createElement(t.p,null,"In some advanced ResNet variants, researchers have experimented with alternatives to BN, such as group normalization or layer normalization, particularly for tasks where batch sizes are small or dynamic. However, BN remains the de facto standard for large-scale image classification tasks."),"\n",r.createElement(t.p,null,"When these initialization strategies and BN layers are combined with residual blocks, the resulting network converges faster and exhibits consistently strong performance. If either piece were removed or improperly applied, the training process for extremely deep networks would be unstable and likely to fail."),"\n",r.createElement(t.h2,{id:"3-variants",style:{position:"relative"}},r.createElement(t.a,{href:"#3-variants","aria-label":"3 variants permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"3. Variants"),"\n",r.createElement(t.p,null,"The flexibility and success of ResNet quickly spurred the creation of multiple variants. These variants differ primarily in depth (i.e., how many layers), width (i.e., how many filters per layer), and the ordering/activation inside each block (e.g., pre-activation). In this section, I describe popular and influential ResNet variants, including the classic 18, 34, 50, 101, and 152-layer models, along with more specialized innovations like Wide ResNet, ResNeXt, and the pre-activation design."),"\n",r.createElement(t.h3,{id:"31-resnet-18-resnet-34-resnet-50-and-beyond",style:{position:"relative"}},r.createElement(t.a,{href:"#31-resnet-18-resnet-34-resnet-50-and-beyond","aria-label":"31 resnet 18 resnet 34 resnet 50 and beyond permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"3.1 resnet-18, resnet-34, resnet-50, and beyond"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"ResNet-18 and ResNet-34"),': These are the "lighter" versions often used for smaller datasets or for tasks where computational resources are limited. They do not employ the bottleneck block; each residual block is a pair of 3×3 convolutions. Despite their relative simplicity, they tend to outperform similarly small networks in the same parameter range, largely thanks to the skip connections.'),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"ResNet-50"),": This version introduced the bottleneck block and became one of the most popular backbones for feature extraction in a variety of tasks, including object detection and image segmentation. Its balance between depth and computational cost makes it a staple in the ML community."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"ResNet-101 and ResNet-152"),": These deeper models expand upon the ResNet-50 design by adding more bottleneck blocks. They are more computationally expensive but can deliver improved accuracy on large-scale datasets. Many top entries in recognition challenges throughout the mid-to-late 2010s used ResNet-101 or ResNet-152."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"ResNet-200 and deeper"),": Some explorations push the depth even further. These extremely deep versions are less common in production but are used in research to show that the ResNet concept can scale to hundreds of layers without suffering from the vanishing gradient problem."),"\n"),"\n"),"\n",r.createElement(t.p,null,"Each of these models follows the same overarching architecture strategy: an initial convolution and pooling layer, followed by multiple stages of residual blocks that downsample spatial dimensions while increasing channel depth, finally leading into a global average pooling and fully connected layer for classification. The difference lies in how many residual blocks appear in each stage and whether or not they use the bottleneck design."),"\n",r.createElement(t.h3,{id:"32-wide-resnet-and-resnext",style:{position:"relative"}},r.createElement(t.a,{href:"#32-wide-resnet-and-resnext","aria-label":"32 wide resnet and resnext permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"3.2 wide resnet and resnext"),"\n",r.createElement(t.p,null,'Depth is not the only dimension that can be scaled. Researchers have also experimented with scaling "width" — the number of channels in the intermediate or final convolution layers. Two well-known offshoots from the original ResNet design are Wide ResNet (WRN) and ResNeXt:'),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Wide ResNet (WRN)"),": Presented by Zagoruyko and Komodakis (BMVC 2016), Wide ResNets reduce the depth of the network but significantly increase the width (i.e., the number of channels). The authors found that a shallower but wider network could sometimes yield better accuracy and faster training than extremely deep counterparts, especially on datasets like CIFAR-10 and CIFAR-100. WRN preserves the skip connection philosophy but changes the channel multiplier to broaden each layer, addressing the possibility that additional depth is not always necessary to achieve strong representational power."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"ResNeXt"),': Introduced by Xie and gang (CVPR 2017), ResNeXt modifies the ResNet bottleneck block by splitting the 3×3 convolution into multiple "cardinality" branches (also known as group convolutions). The outputs of these parallel branches are aggregated by summation (similar to the skip connection concept). The cardinality dimension can be increased to improve accuracy, often more efficiently than simply deepening or widening the network. Hence, a ResNeXt block introduces group convolutions that allow for more flexible multi-branch transformations without ballooning parameters as drastically as naive wide expansions.'),"\n"),"\n"),"\n",r.createElement(t.p,null,"These variants illustrate that skip connections are not just about building deeper networks; they can also be leveraged in a variety of ways to broaden or restructure how each convolutional layer processes features. Both Wide ResNet and ResNeXt remain active baselines in tasks like image classification and even specialized tasks (e.g., super-resolution), showcasing the adaptability of ResNet's core approach."),"\n",r.createElement(t.h3,{id:"33-pre-activation-resnet",style:{position:"relative"}},r.createElement(t.a,{href:"#33-pre-activation-resnet","aria-label":"33 pre activation resnet permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"3.3 pre-activation resnet"),"\n",r.createElement(t.p,null,"In the original ResNet, the structure of a residual block is:"),"\n",r.createElement(t.p,null,r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">[conv -> BN -> ReLU -> conv -> BN -> addition -> ReLU]</code>'}})),"\n",r.createElement(t.p,null,"Here, the skip connection adds ",r.createElement(s.A,{text:"\\(x\\)"})," to the output of the second batch normalization. However, He and gang later introduced a ",r.createElement(t.strong,null,"pre-activation")," variant where the block is reorganized such that the activation and normalization occur before the convolution:"),"\n",r.createElement(t.p,null,r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">[BN -> ReLU -> conv -> BN -> ReLU -> conv -> addition]</code>'}})),"\n",r.createElement(t.p,null,"In the pre-activation design, the skip connection is added to the output of the second convolution, which occurs ",r.createElement(t.strong,null,"after"),' the batch normalization and ReLU. The difference is subtle, but it carries important implications for optimization. By moving batch normalization and ReLU to the front, the network sees cleaner gradient signals, and many have reported that training becomes more stable. Additionally, the identity mapping in the skip connection is potentially more "pure" (i.e., less subject to activation-induced distortions), further simplifying residual learning.'),"\n",r.createElement(t.p,null,"In practice, pre-activation ResNets can sometimes outperform standard (post-activation) ResNets, especially in deeper variants. Some frameworks default to pre-activation blocks for advanced training recipes. Nonetheless, the standard post-activation ResNet remains very common because of its historical significance, simpler block structure, and well-tested performance across many tasks."),"\n",r.createElement(t.h2,{id:"4-training",style:{position:"relative"}},r.createElement(t.a,{href:"#4-training","aria-label":"4 training permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4. Training"),"\n",r.createElement(t.p,null,"Training a ResNet is typically more straightforward than training similarly deep networks without skip connections, but there are still key considerations that can make or break performance. For instance, data preprocessing and augmentation strategies, hyperparameter settings, and regularization approaches all have a major impact on how well a deep residual network converges and generalizes."),"\n",r.createElement(t.h3,{id:"41-data-preprocessing-and-augmentation",style:{position:"relative"}},r.createElement(t.a,{href:"#41-data-preprocessing-and-augmentation","aria-label":"41 data preprocessing and augmentation permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.1 data preprocessing and augmentation"),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Data normalization"),": Especially in image classification tasks, each input is usually normalized by mean subtraction and standard deviation scaling for the dataset at hand (e.g., using the Imagenet dataset's per-channel mean and standard deviation). This ensures that the inputs to the network are centered and scaled appropriately, which complements BN's internal normalization."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Random crops and flips"),": A common technique is to randomly crop a portion of the image and subsequently resize to the desired input dimension (for instance, 224×224 for ImageNet). Horizontal flipping is also widely used for data augmentation, effectively doubling the training set if flips are applied randomly."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Color jitter and other distortions"),": For more robust color invariance and to prevent overfitting, random perturbations of brightness, contrast, and saturation are often applied. Other spatial transformations like random rotation or slight random translation can also help."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"AutoAugment and RandAugment"),": Recent research has introduced automated augmentation policies that choose from a range of transformations. Although these are not specific to ResNet, they often yield notable improvements in final accuracy."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"CutMix and MixUp"),": These advanced augmentation strategies combine images (and corresponding labels) in creative ways to encourage the network to learn more robust decision boundaries."),"\n"),"\n"),"\n",r.createElement(t.p,null,"These augmentation and preprocessing techniques become increasingly important as the network depth increases, because deeper networks tend to be more data-hungry and can easily overfit if not exposed to enough training variety."),"\n",r.createElement(t.h3,{id:"42-hyperparameter-tuning-for-depth-and-width",style:{position:"relative"}},r.createElement(t.a,{href:"#42-hyperparameter-tuning-for-depth-and-width","aria-label":"42 hyperparameter tuning for depth and width permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.2 hyperparameter tuning for depth and width"),"\n",r.createElement(t.p,null,"While ResNet alleviates many training problems, the choice of model depth and width still matters:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Depth"),": As we move from ResNet-18 to ResNet-50, 101, or 152, the representational power improves but so does the need for more compute and more data. For smaller datasets, going too deep can lead to diminishing returns or overfitting. In some tasks, ResNet-50 remains a sweet spot. In larger-scale tasks, deeper variants sometimes provide significant gains."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Width"),": Adjusting width (i.e., the number of channels) can be a direct way to control the capacity of the network without making it significantly deeper. Networks such as Wide ResNet have shown that increasing width can sometimes yield better accuracy than adding more layers, especially in data-constrained settings."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Batch size"),": A bigger batch size can improve statistical estimates in BN and accelerate training via parallelization, but it may require specialized hardware or tricky tuning of the learning rate. Conversely, training with small batches is feasible but often demands different hyperparameter choices, such as a well-tuned learning rate schedule or using group normalization instead of BN."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Learning rate schedules"),': Typical schedules include step decays, where the learning rate is dropped at certain epochs, or more advanced methods like cosine annealing. "Warm restarts" and other adaptive scheduling strategies can also help the network avoid local minima.'),"\n"),"\n",r.createElement(t.p,null,'Practitioners typically rely on empirical experimentation or well-established training "recipes" for a given dataset (e.g., the famous "ImageNet 1K recipe"). The skip connections in ResNet reduce the catastrophic effects of badly chosen hyperparameters, but a well-tuned set of hyperparameters remains crucial for best performance.'),"\n",r.createElement(t.h3,{id:"43-regularization",style:{position:"relative"}},r.createElement(t.a,{href:"#43-regularization","aria-label":"43 regularization permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.3 regularization"),"\n",r.createElement(t.p,null,"Regularization strategies reduce overfitting, which is essential for large, deep networks like ResNet:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Weight decay"),": Often set to a small constant (e.g., ",r.createElement(s.A,{text:"\\(1e-4\\)"}),") to penalize large weights, weight decay is one of the most common and effective forms of regularization."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Dropout"),": In early ResNet papers, dropout was not extensively used; skip connections already provide a form of implicit regularization. However, in some specialized tasks or in variants (Wide ResNet in certain configurations), dropout remains beneficial."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Label smoothing"),": This modifies the one-hot targets so that each class probability is slightly above zero rather than strictly 0 for classes other than the ground truth. This technique helps the model avoid overconfidence and can improve calibration."),"\n",r.createElement(t.li,null,r.createElement(t.strong,null,"Stochastic depth"),": Proposed by Huang and gang (ECCV 2016), this technique randomly drops entire residual blocks during training, making the network effectively shallower for some forward passes. This approach can help generalization and speed up training."),"\n"),"\n",r.createElement(t.p,null,"Depending on the domain, advanced domain-specific regularization strategies (e.g., cutout for image classification) can also be integrated. The key idea is that ResNet's skip connections reduce the friction of adding more layers, but the network can still overfit if not properly regularized."),"\n",r.createElement(t.p,null,"All of these tuning strategies, from data augmentation to weight decay, combine to allow the deeper ResNet variants to generalize well on large-scale tasks. Indeed, many computer vision top results from 2016 onward used ResNet backbones, either with or without modifications, attesting to the architecture's robust generalization when carefully trained."),"\n",r.createElement(t.h2,{id:"5-implementation-with-tensorflow",style:{position:"relative"}},r.createElement(t.a,{href:"#5-implementation-with-tensorflow","aria-label":"5 implementation with tensorflow permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"5. Implementation with tensorflow"),"\n",r.createElement(t.p,null,"Below, I illustrate a simplified ResNet block implementation in TensorFlow (particularly TensorFlow 2.x / Keras). This code snippet shows the bottleneck block approach, including skip connections. Keep in mind that real production code often includes many additional optimizations and specialized settings."),"\n",r.createElement(l.A,{text:"\nimport tensorflow as tf\nfrom tensorflow.keras import layers, Model\n\nclass BottleneckBlock(tf.keras.Model):\n    def __init__(self, filters, stride=1, downsample=None):\n        super(BottleneckBlock, self).__init__()\n        self.filters = filters\n        self.stride = stride\n        # 1x1 reduction\n        self.conv1 = layers.Conv2D(filters // 4, kernel_size=1, strides=1, padding='same', use_bias=False)\n        self.bn1 = layers.BatchNormalization()\n        \n        # 3x3 convolution\n        self.conv2 = layers.Conv2D(filters // 4, kernel_size=3, strides=stride, padding='same', use_bias=False)\n        self.bn2 = layers.BatchNormalization()\n        \n        # 1x1 expansion\n        self.conv3 = layers.Conv2D(filters, kernel_size=1, strides=1, padding='same', use_bias=False)\n        self.bn3 = layers.BatchNormalization()\n        \n        self.relu = layers.ReLU()\n        self.downsample = downsample\n\n    def call(self, x, training=False):\n        identity = x\n        \n        # First conv\n        out = self.conv1(x)\n        out = self.bn1(out, training=training)\n        out = self.relu(out)\n        \n        # Second conv\n        out = self.conv2(out)\n        out = self.bn2(out, training=training)\n        out = self.relu(out)\n        \n        # Third conv\n        out = self.conv3(out)\n        out = self.bn3(out, training=training)\n        \n        # Downsample if needed\n        if self.downsample is not None:\n            identity = self.downsample(x, training=training)\n        \n        # Skip connection\n        out = layers.add([out, identity])\n        out = self.relu(out)\n        \n        return out\n\nclass ResNet(Model):\n    def __init__(self, layer_dims, num_classes=1000):\n        super(ResNet, self).__init__()\n        \n        # Initial layers (similar to 'stage 0')\n        self.conv1 = layers.Conv2D(64, kernel_size=7, strides=2, padding='same', use_bias=False)\n        self.bn1 = layers.BatchNormalization()\n        self.relu = layers.ReLU()\n        self.maxpool = layers.MaxPooling2D(pool_size=3, strides=2, padding='same')\n        \n        # ResNet stages\n        self.layer1 = self._make_layer(64,  layer_dims[0])\n        self.layer2 = self._make_layer(128, layer_dims[1], stride=2)\n        self.layer3 = self._make_layer(256, layer_dims[2], stride=2)\n        self.layer4 = self._make_layer(512, layer_dims[3], stride=2)\n        \n        # Classification head\n        self.avgpool = layers.GlobalAveragePooling2D()\n        self.fc = layers.Dense(num_classes)\n\n    def _make_layer(self, filters, blocks, stride=1):\n        downsample = None\n        \n        # If stride != 1 or in/out channels differ, create projection\n        if stride != 1:\n            downsample = tf.keras.Sequential([\n                layers.Conv2D(filters, kernel_size=1, strides=stride, use_bias=False),\n                layers.BatchNormalization()\n            ])\n        \n        layers_list = []\n        layers_list.append(BottleneckBlock(filters, stride=stride, downsample=downsample))\n        \n        # Additional blocks\n        for _ in range(1, blocks):\n            layers_list.append(BottleneckBlock(filters))\n        \n        return tf.keras.Sequential(layers_list)\n\n    def call(self, x, training=False):\n        x = self.conv1(x)\n        x = self.bn1(x, training=training)\n        x = self.relu(x)\n        x = self.maxpool(x)\n        \n        x = self.layer1(x, training=training)\n        x = self.layer2(x, training=training)\n        x = self.layer3(x, training=training)\n        x = self.layer4(x, training=training)\n        \n        x = self.avgpool(x)\n        x = self.fc(x)\n        \n        return x\n\ndef ResNet50(num_classes=1000):\n    # layer_dims for ResNet-50\n    return ResNet(layer_dims=[3, 4, 6, 3], num_classes=num_classes)\n\n# Example usage:\n# model = ResNet50(num_classes=1000)\n# x = tf.random.normal((1, 224, 224, 3))\n# logits = model(x, training=True)\n# print(logits.shape)\n"}),"\n",r.createElement(t.p,null,"In this code:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"We define a ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">BottleneckBlock</code>'}})," class that captures the 1×1 → 3×3 → 1×1 design and includes optional downsampling for dimension matching."),"\n",r.createElement(t.li,null,"We build the main network in ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ResNet</code>'}})," by stacking these blocks in stages. The ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_make_layer</code>'}})," method constructs sequences of blocks for each stage."),"\n",r.createElement(t.li,null,r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ResNet50</code>'}})," is instantiated by specifying a layer configuration ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">[3, 4, 6, 3]</code>'}}),", which is a well-known blueprint for ResNet-50."),"\n",r.createElement(t.li,null,"Real-world usage would typically also include a training loop or usage of Keras's ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fit()</code>'}})," method, some additional utility for checkpointing or metrics logging, and possibly other advanced techniques."),"\n"),"\n",r.createElement(t.p,null,"This snippet highlights the essential structure of a ResNet: an initial convolution/pooling stage, several residual stages, a global average pooling, and a final fully connected layer for classification. If you wish to create ResNet-101, for instance, you could pass ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">[3, 4, 23, 3]</code>'}})," as ",r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">layer_dims</code>'}})," (the numbers represent the number of bottleneck blocks in each stage)."),"\n",r.createElement(t.h2,{id:"6-advanced-topics-related-to-resnet",style:{position:"relative"}},r.createElement(t.a,{href:"#6-advanced-topics-related-to-resnet","aria-label":"6 advanced topics related to resnet permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"6. Advanced topics related to resnet"),"\n",r.createElement(t.p,null,"Since its introduction, ResNet has evolved and influenced a broad spectrum of neural architectures. Researchers have extensively experimented with modifications, applications, and theoretical analyses of ResNets. Here are several advanced topics that highlight the continued relevance of ResNet in cutting-edge research and real-world applications:"),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Application beyond image classification"),":",r.createElement(t.br),"\n","ResNets are widely used as backbones in object detection (e.g., Faster R-CNN, YOLO) and instance/semantic segmentation frameworks (e.g., Mask R-CNN, DeepLab). In these use-cases, the final global pooling and fully connected layer are often replaced or augmented by task-specific heads, and the output feature maps from intermediate ResNet stages are fed into multi-scale detection pipelines."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"ResNet for domain adaptation"),":",r.createElement(t.br),"\n","In domain adaptation scenarios, a ResNet backbone might be pretrained on a large labeled dataset and then adapted to a different domain where labeled data is scarce. The skip connections provide robust baseline features that can generalize across domains more reliably than purely feedforward CNNs."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Residual connections in NLP"),":",r.createElement(t.br),"\n","The success of skip connections in ResNet has influenced many sequence models. Most modern Transformer-based architectures (like BERT, GPT, etc.) have skip connections around multi-head attention and feedforward layers. Although the data modality is different, the residual learning principle remains extremely powerful for stabilizing deep networks in any domain."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Ablation of skip connection types"),":",r.createElement(t.br),"\n",'Researchers have investigated different forms of skip connections, such as gating mechanisms that learn when to "turn on" or "turn off" the skip. Others have tried adding attention modules to the skip pathway. While these can occasionally improve performance, the straightforward addition approach remains the most common.'),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"ResNet's interpretability"),":",r.createElement(t.br),"\n","Because ResNets make deeper architectures more trainable, some research has analyzed internal representations formed by residual blocks. They have discovered that skip connections often preserve low-level signals that can be reintroduced in later layers, leading to interesting forms of feature reusability and hierarchical composition."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Stochastic depth and other training variants"),":",r.createElement(t.br),"\n","Building on the success of skip connections, some researchers introduced partial or stochastic usage of these connections during training. This can reduce the effective depth of the network for certain forward passes, speeding training and sometimes boosting test accuracy."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Normalization alternatives"),":",r.createElement(t.br),"\n","For small-batch or resource-constrained environments, group normalization or layer normalization can replace batch normalization. These changes often modify how the skip connections function in practice but still harness the same fundamental principle of learning residual transformations."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Extension to generative models"),":",r.createElement(t.br),"\n","Residual blocks are not limited to discriminative tasks. Many generative adversarial networks (GANs) and variational autoencoders (VAEs) incorporate skip connections to aid training stability and produce higher-quality samples."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"ResNet in compact or mobile settings"),":",r.createElement(t.br),"\n","MobileNet and other efficient architectures sometimes incorporate depthwise separable convolutions and other compression techniques. While they are not strict ResNets, they frequently adopt the concept of residual connections in a lighter form to reduce parameter counts and memory usage, thus bridging the gap between full-scale ResNets and edge deployments."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Residual blocks with attention"),":",r.createElement(t.br),"\n","Squeeze-and-excitation (SE) blocks (Hu and gang, CVPR 2018) insert small attention modules inside each residual block. This approach adaptively reweights channels, improving representational power for relatively few additional parameters. Another direction is using self-attention in place of some convolutions, bridging concepts from Transformers with residual blocks."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Theoretical perspectives on skip connections"),":",r.createElement(t.br),"\n","Some studies dive into the functional aspects of skip connections, analyzing them as solutions to certain ordinary differential equations (ODE-based interpretations). By seeing the network as an iterative solver of an ODE or by interpreting each residual block as a discrete step in a dynamical system, researchers gain insights into why skip connections help to stabilize and accelerate training."),"\n"),"\n"),"\n",r.createElement(t.p,null,"In conclusion, ResNet sparked a renaissance in architecture design, where the fundamental notion of learning residual mappings permeates the entire deep learning landscape. Although simpler in concept than many of its successors, ResNet remains a cornerstone model in computer vision and beyond, providing robust performance, flexibility, and interpretability — all while mitigating the obstacles posed by extreme depth."),"\n",r.createElement(n,{alt:"resnet block diagram",path:"",caption:"A simplified diagram of a residual block using bottleneck layers, featuring skip connections.",zoom:"false"}),"\n",r.createElement(n,{alt:"resnet skip connection",path:"",caption:"Visual depiction of adding the identity input to the output of the main convolutional layers.",zoom:"false"}),"\n",r.createElement(n,{alt:"resnet overall architecture",path:"",caption:"High-level view of a ResNet with four main stages plus an initial convolution and a final classification head.",zoom:"false"}),"\n",r.createElement(t.hr),"\n",r.createElement(t.p,null,"This concludes the deep exploration of ResNet. By incorporating skip connections and carefully designing each layer, ResNet overcomes many of the issues that plagued prior deep architectures, ushering in an era of networks that are both deeper and more effective. Its influence persists not only in computer vision but also in other fields, where residual learning stands as a proven strategy to push the depth and performance boundaries of neural networks. Researchers and practitioners continue to adapt, extend, and refine ResNet principles, demonstrating the broad relevance of this architecture in the machine learning world."))}var c=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,i.RP)(),e.components);return t?r.createElement(t,e,r.createElement(o,e)):o(e)};var d=n(36710),h=n(58481),m=n.n(h),u=n(36310),p=n(87245),g=n(27042),f=n(59849),y=n(5591),v=n(61122),b=n(9219),w=n(33203),E=n(95751),k=n(94328),x=n(80791),N=n(78137);const R=e=>{let{toc:t}=e;if(!t||!t.items)return null;return r.createElement("nav",{className:x.R},r.createElement("ul",null,t.items.map(((e,t)=>r.createElement("li",{key:t},r.createElement("a",{href:e.url,onClick:t=>((e,t)=>{e.preventDefault();const n=t.replace("#",""),a=document.getElementById(n);a&&a.scrollIntoView({behavior:"smooth",block:"start"})})(t,e.url)},e.title),e.items&&r.createElement(R,{toc:{items:e.items}}))))))};function z(e){let{data:{mdx:t,allMdx:l,allPostImages:s},children:o}=e;const{frontmatter:c,body:d,tableOfContents:h}=t,f=c.index,x=c.slug.split("/")[1],z=l.nodes.filter((e=>e.frontmatter.slug.includes(`/${x}/`))).sort(((e,t)=>e.frontmatter.index-t.frontmatter.index)),S=z.findIndex((e=>e.frontmatter.index===f)),T=z[S+1],_=z[S-1],H=c.slug.replace(/\/$/,""),I=/[^/]*$/.exec(H)[0],C=`posts/${x}/content/${I}/`,{0:A,1:M}=(0,r.useState)(c.flagWideLayoutByDefault),{0:B,1:L}=(0,r.useState)(!1);var V;(0,r.useEffect)((()=>{L(!0);const e=setTimeout((()=>L(!1)),340);return()=>clearTimeout(e)}),[A]),"adventures"===x?V=b.cb:"research"===x?V=b.Qh:"thoughts"===x&&(V=b.T6);const P=m()(d).replace(/import .*? from .*?;/g,"").replace(/<.*?>/g,"").replace(/\{\/\*[\s\S]*?\*\/\}/g,"").trim().split(/\s+/).length,F=function(e){if(e<=10)return"~10 min";if(e<=20)return"~20 min";if(e<=30)return"~30 min";if(e<=40)return"~40 min";if(e<=50)return"~50 min";if(e<=60)return"~1 h";const t=Math.floor(e/60),n=e%60;return n<=30?`~${t}${n>0?".5":""} h`:`~${t+1} h`}(Math.ceil(P/V)+(c.extraReadTimeMin||0)),W=[{flag:c.flagDraft,component:()=>Promise.all([n.e(3231),n.e(8809)]).then(n.bind(n,28809))},{flag:c.flagMindfuckery,component:()=>Promise.all([n.e(3231),n.e(2471)]).then(n.bind(n,67709))},{flag:c.flagRewrite,component:()=>Promise.all([n.e(3231),n.e(6764)]).then(n.bind(n,62002))},{flag:c.flagOffensive,component:()=>Promise.all([n.e(3231),n.e(2443)]).then(n.bind(n,17681))},{flag:c.flagProfane,component:()=>Promise.all([n.e(3231),n.e(8048)]).then(n.bind(n,53286))},{flag:c.flagMultilingual,component:()=>Promise.all([n.e(3231),n.e(4069)]).then(n.bind(n,78831))},{flag:c.flagUnreliably,component:()=>Promise.all([n.e(3231),n.e(3417)]).then(n.bind(n,8179))},{flag:c.flagPolitical,component:()=>Promise.all([n.e(3231),n.e(5195)]).then(n.bind(n,30433))},{flag:c.flagCognitohazard,component:()=>Promise.all([n.e(3231),n.e(3175)]).then(n.bind(n,8413))},{flag:c.flagHidden,component:()=>Promise.all([n.e(3231),n.e(9556)]).then(n.bind(n,14794))}],{0:j,1:q}=(0,r.useState)([]);return(0,r.useEffect)((()=>{W.forEach((e=>{let{flag:t,component:n}=e;t&&n().then((e=>{q((t=>[].concat((0,a.A)(t),[e.default])))}))}))}),[]),r.createElement(g.P.div,{initial:{opacity:0},animate:{opacity:1},exit:{opacity:0},transition:{duration:.15}},r.createElement(y.A,{postNumber:c.index,date:c.date,updated:c.updated,readTime:F,difficulty:c.difficultyLevel,title:c.title,desc:c.desc,banner:c.banner,section:x,postKey:I,isMindfuckery:c.flagMindfuckery,mainTag:c.mainTag}),r.createElement("div",{style:{display:"flex",justifyContent:"flex-end",flexWrap:"wrap",maxWidth:"75%",marginLeft:"auto",paddingRight:"1vw",marginTop:"-6vh",marginBottom:"4vh"}},c.otherTags.map(((e,t)=>r.createElement("span",{key:t,className:`noselect ${N.MW}`,style:{margin:"0 5px 5px 0"}},e)))),r.createElement("div",{className:"postBody"},r.createElement(R,{toc:h})),r.createElement("br"),r.createElement("div",{style:{margin:"0 10% -2vh 30%",textAlign:"right"}},r.createElement(g.P.button,{className:`noselect ${k.pb}`,id:k.xG,onClick:()=>{M(!A)},whileTap:{scale:.93}},r.createElement(g.P.div,{className:E.DJ,key:A,initial:{opacity:0},animate:{opacity:1},exit:{opacity:0},transition:{duration:.3,ease:"easeInOut"}},A?"Switch to default layout":"Switch to wide layout"))),r.createElement("br"),r.createElement("div",{className:"postBody",style:{margin:A?"0 -14%":"",maxWidth:A?"200%":"",transition:"margin 1s ease, max-width 1s ease, padding 1s ease"}},r.createElement("div",{className:`${k.P_} ${B?k.Xn:k.qG}`},j.map(((e,t)=>r.createElement(e,{key:t}))),c.indexCourse?r.createElement(w.A,{index:c.indexCourse,category:c.courseCategoryName}):"",r.createElement(u.Z.Provider,{value:{images:s.nodes,basePath:C.replace(/\/$/,"")+"/"}},r.createElement(i.xA,{components:{Image:p.A}},o)))),r.createElement(v.A,{nextPost:T,lastPost:_,keyCurrent:I,section:x}))}function S(e){return r.createElement(z,e,r.createElement(c,e))}function T(e){var t,n,a,i,l;let{data:s}=e;const{frontmatter:o}=s.mdx,c=o.titleSEO||o.title,h=o.titleOG||c,m=o.titleTwitter||c,u=o.descSEO||o.desc,p=o.descOG||u,g=o.descTwitter||u,y=o.schemaType||"BlogPosting",v=o.keywordsSEO,b=o.date,w=o.updated||b,E=o.imageOG||(null===(t=o.banner)||void 0===t||null===(n=t.childImageSharp)||void 0===n||null===(a=n.gatsbyImageData)||void 0===a||null===(i=a.images)||void 0===i||null===(l=i.fallback)||void 0===l?void 0:l.src),k=o.imageAltOG||p,x=o.imageTwitter||E,N=o.imageAltTwitter||g,R=o.canonicalURL,z=o.flagHidden||!1,S=o.mainTag||"Posts",T=o.slug.split("/")[1]||"posts",{siteUrl:_}=(0,d.Q)(),H={"@context":"https://schema.org","@type":"BreadcrumbList",itemListElement:[{"@type":"ListItem",position:1,name:"Home",item:_},{"@type":"ListItem",position:2,name:S,item:`${_}/${o.slug.split("/")[1]}`},{"@type":"ListItem",position:3,name:c,item:`${_}${o.slug}`}]};return r.createElement(f.A,{title:c+" - avrtt.blog",titleOG:h,titleTwitter:m,description:u,descriptionOG:p,descriptionTwitter:g,schemaType:y,keywords:v,datePublished:b,dateModified:w,imageOG:E,imageAltOG:k,imageTwitter:x,imageAltTwitter:N,canonicalUrl:R,flagHidden:z,mainTag:S,section:T,type:"article"},r.createElement("script",{type:"application/ld+json"},JSON.stringify(H)))}},96098:function(e,t,n){var a=n(96540),i=n(7978);t.A=e=>{let{text:t}=e;return a.createElement(i.A,null,t)}}}]);
//# sourceMappingURL=component---src-templates-post-js-content-file-path-src-pages-posts-research-resnet-architecture-mdx-bde8b224b79ff97aac0d.js.map