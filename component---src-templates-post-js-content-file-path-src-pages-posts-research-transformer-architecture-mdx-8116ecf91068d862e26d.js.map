{"version":3,"file":"component---src-templates-post-js-content-file-path-src-pages-posts-research-transformer-architecture-mdx-8116ecf91068d862e26d.js","mappings":"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","sources":["webpack://avrtt.blog/./src/pages/posts/research/transformer_architecture.mdx","webpack://avrtt.blog/./src/templates/post.js","webpack://avrtt.blog/./src/components/Latex/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\n/**(intro: a quote, catchphrase, joke, etc.)**/\n/*\n\nТрансформер\nhttps://neerc.ifmo.ru/wiki/index.php?title=%D0%A2%D1%80%D0%B0%D0%BD%D1%81%D1%84%D0%BE%D1%80%D0%BC%D0%B5%D1%80\n\n[https://www.youtube.com/watch?v=UETKUIlYE6g&list=PL4_hYwCyhAvY7k32D65q3xJVo8X8dc3Ye&index=5](https://www.youtube.com/watch?v=UETKUIlYE6g&list=PL4_hYwCyhAvY7k32D65q3xJVo8X8dc3Ye&index=5)\n[https://www.youtube.com/watch?v=1DygevyV2eA&list=PL4_hYwCyhAvY7k32D65q3xJVo8X8dc3Ye&index=6](https://www.youtube.com/watch?v=1DygevyV2eA&list=PL4_hYwCyhAvY7k32D65q3xJVo8X8dc3Ye&index=6)\n[https://www.youtube.com/watch?v=uI6XSlmZNEQ&list=PL4_hYwCyhAvZLp0CTIDVQr9FtDR_7DaUr&index=4](https://www.youtube.com/watch?v=uI6XSlmZNEQ&list=PL4_hYwCyhAvZLp0CTIDVQr9FtDR_7DaUr&index=4)\n[https://www.youtube.com/watch?v=F3jsMAI5EF4&list=PL4_hYwCyhAvZLp0CTIDVQr9FtDR_7DaUr&index=5](https://www.youtube.com/watch?v=F3jsMAI5EF4&list=PL4_hYwCyhAvZLp0CTIDVQr9FtDR_7DaUr&index=5)\n\nПопов отправлял две книги про трансформеры на почту\n\n[Tutorial 6: Transformers and Multi-Head Attention](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/tutorial6/Transformers_and_MHAttention.html)\n\n- [11. Attention Mechanisms and Transformers](https://d2l.ai/chapter_attention-mechanisms-and-transformers/index.html)\n- [11.1. Queries, Keys, and Values](https://d2l.ai/chapter_attention-mechanisms-and-transformers/queries-keys-values.html)\n- [11.2. Attention Pooling by Similarity](https://d2l.ai/chapter_attention-mechanisms-and-transformers/attention-pooling.html)\n- [11.3. Attention Scoring Functions](https://d2l.ai/chapter_attention-mechanisms-and-transformers/attention-scoring-functions.html)\n- [11.4. The Bahdanau Attention Mechanism](https://d2l.ai/chapter_attention-mechanisms-and-transformers/bahdanau-attention.html)\n- [11.5. Multi-Head Attention](https://d2l.ai/chapter_attention-mechanisms-and-transformers/multihead-attention.html)\n- [11.6. Self-Attention and Positional Encoding](https://d2l.ai/chapter_attention-mechanisms-and-transformers/self-attention-and-positional-encoding.html)\n- [11.7. The Transformer Architecture](https://d2l.ai/chapter_attention-mechanisms-and-transformers/transformer.html)\n- [11.8. Transformers for Vision](https://d2l.ai/chapter_attention-mechanisms-and-transformers/vision-transformer.html)\n- [11.9. Large-Scale Pretraining with Transformers](https://d2l.ai/chapter_attention-mechanisms-and-transformers/large-pretraining-transformers.html)\n\nhttps://jalammar.github.io/illustrated-transformer/\n\n*/\n/*\n\n1. Introduction\n- Background and motivation: Discuss the evolution from rule-based NLP systems to deep learning methods, highlighting limitations of RNNs and CNNs.\n- Importance in modern machine learning: Emphasize the wide adoption of Transformers in NLP, vision, and speech tasks, showcasing state-of-the-art results.\n- Scope of this article: Outline the main Transformer components, training strategies, and typical use cases.\n- Historical context in NLP: Describe key milestones (e.g., seq2seq, attention) leading up to the Transformer's inception.\n2. Core concepts\n- Sequence modeling vs. Transformer-based modeling: Compare traditional sequential processing to parallelizable attention-based architectures.\n- Attention mechanisms and their role: Highlight how attention redistributes focus across different parts of the input sequence.\n- Key differences from recurrent and convolutional models: Explain how Transformers eliminate recurrence and convolutions, improving parallelization.\n- Parallelization advantages: Detail how the attention approach allows faster training on large datasets.\n3. Transformer architecture overview\n- Encoder-decoder structure: Summarize the two-part design for sequence-to-sequence tasks.\n- Flow of information: Illustrate how data moves from embeddings through attention layers to final outputs.\n- Advantages and limitations: Discuss benefits like reduced training time and potential drawbacks such as high memory usage.\n- Variants of encoder-decoder approaches: Note models using only encoders (BERT), only decoders (GPT), or hybrids.\n4. Encoder module\n- Embedding layer: Convert tokens (words, subwords, or characters) into continuous vector representations.\n- Positional encoding: Introduce sine/cosine or learned embeddings to encode sequence order information.\n- Multi-head self-attention mechanism: Explain how multiple attention heads capture different aspects of the input.\n- Feed-forward network: Transform attention outputs with non-linear projections.\n- Residual connections and layer normalization: Stabilize training, aid gradient flow, and retain original information.\n- Alternative positional encoding methods: Mention rotary or relative position embeddings.\n5. Decoder module\n- Masked multi-head self-attention: Prevent a position from attending to future tokens, enabling autoregressive generation.\n- Encoder-decoder attention: Leverage the encoder's context when generating each token in the decoder.\n- Feed-forward network in the decoder: Discuss the role of feed-forward layers between attention modules.\n- Residual connections and layer normalization: Maintain consistent training mechanisms with the encoder.\n- Generating output tokens: Summarize how argmax sampling, beam search, or other decoding strategies produce final text.\n- Handling long sequences in decoding: Briefly address techniques like memory compression or chunking.\n\n*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Highlight from \"../../../components/Highlight\";\nimport Code from \"../../../components/Code\";\nimport Latex from \"../../../components/Latex\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    a: \"a\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    ol: \"ol\",\n    h2: \"h2\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, \"\\n\", React.createElement(\"br\"), \"\\n\", \"\\n\", \"\\n\", React.createElement(_components.p, null, \"The world of natural language processing has undergone a dramatic revolution in the last decade or so, evolving from the relatively rigid, rule-based systems of previous generations to the flexible deep learning approaches that dominate modern research and industry use cases. Historically, early computational linguistics involved carefully hand-crafted grammar rules and lexicons. These systems, although groundbreaking for their time, often struggled to handle the complexities and nuances of human language. Ambiguities in syntax, polysemy (the phenomenon of words having multiple meanings), and ever-growing linguistic variation meant that rigid rules frequently broke down in real-world situations.\"), \"\\n\", React.createElement(_components.p, null, \"As the field moved forward, the introduction of more data-driven methods — particularly statistical modeling — helped pave the way toward machine learning-based approaches. Recurrent neural networks (RNNs), especially those equipped with gating mechanisms such as LSTM networks (Hochreiter and Schmidhuber, 1997) and GRU networks (Cho and gang, 2014), enabled practitioners to capture contextual dependencies in sequences more effectively than ever before. Soon, these recurrent architectures dominated many NLP tasks, including language modeling, machine translation, speech recognition, and text classification. However, their inherently sequential nature meant that training on long sequences was difficult to parallelize, and capturing extremely long-range dependencies often proved challenging despite gating mechanisms.\"), \"\\n\", React.createElement(_components.p, null, \"In parallel, convolutional neural networks (CNNs) — originally designed for image processing tasks — were adapted by some researchers for NLP. Convolutional architectures promised greater parallelization than RNNs and improved gradient flow due to their hierarchical structure (Gehring and gang, 2017). Yet, they often struggled with capturing global dependencies and required carefully chosen kernel sizes or dilations to expand the receptive field.\"), \"\\n\", React.createElement(_components.p, null, \"The introduction of attention mechanisms (Bahdanau and gang, 2015; Luong and gang, 2015) was a key milestone that changed the game dramatically. Initially introduced to help RNN-based encoder-decoder systems \\\"focus\\\" on the most relevant parts of an input sequence when generating each output token, attention quickly proved useful beyond just alignment in machine translation. By weighting different components of the input sequence according to their relevance to a particular query, attention mechanisms gave models a way to handle long-range dependencies more directly than purely sequential approaches.\"), \"\\n\", React.createElement(_components.p, null, \"From here, the stage was set for the next big leap: the Transformer model. Introduced by Vaswani and gang (2017), the Transformer architecture demonstrated that recurrence and convolution could be replaced entirely with a structure built around attention, thereby unlocking unprecedented levels of parallelization and performance in sequence-to-sequence tasks. The Transformer quickly became the backbone for breakthroughs in language modeling, machine translation, text summarization, and even tasks beyond NLP, including image classification (Dosovitskiy and gang, 2021) and speech processing. Today, the Transformer stands as arguably the most influential architecture in modern machine learning, underpinning large language models such as GPT, BERT, T5, and numerous domain-specific variants.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"background-and-motivation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#background-and-motivation\",\n    \"aria-label\": \"background and motivation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Background and motivation\"), \"\\n\", React.createElement(_components.p, null, \"To fully appreciate the motivation behind the Transformer architecture, one must understand the limitations of prior methods:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Rule-based systems\"), \": Rigid, hand-crafted logic. Their ability to model language deeply was restricted by the complexity of language itself. Scaling up to new languages, dialects, or domains required extensive human labor.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"RNN-based models\"), \": Although effective at capturing sequential patterns, RNNs process tokens one step at a time, creating computational bottlenecks for long sequences. Training can be slow, and capturing very long-range dependencies becomes progressively more difficult.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"CNN-based approaches\"), \": More parallelizable than RNNs but still not as straightforward to capture non-local dependencies. Additional complexities arise when deciding kernel sizes or dilation schedules to ensure broad context coverage.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Attention provided a mechanism that addresses these issues by allowing the model to learn where to \\\"look\\\" in the entire input sequence when generating each output element. This idea set the foundation for further exploration that led to the notion of discarding recurrence entirely — and thus emerged the Transformer.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"importance-in-modern-machine-learning\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#importance-in-modern-machine-learning\",\n    \"aria-label\": \"importance in modern machine learning permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Importance in modern machine learning\"), \"\\n\", React.createElement(_components.p, null, \"Transformers have proven their worth across a wide array of tasks:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Natural language processing\"), \": State-of-the-art in machine translation, text summarization, question answering, sentiment analysis, and text generation.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Computer vision\"), \": The Vision Transformer (ViT) treats image patches like tokens, achieving competitive or superior results on image classification tasks.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Speech processing\"), \": Speech recognition and speech-to-text systems can leverage self-attention for improved context modeling.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Multimodal learning\"), \": Transformers excel in bridging multiple data modalities (text, images, audio) within a single architecture.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"By removing the need for strict sequential computation, Transformers can train more efficiently on modern hardware accelerators, taking advantage of large parallelizable matrix multiplications. When combined with massive pretraining datasets, Transformers form the basis for large foundation models that can be adapted or fine-tuned for a wide range of specialized tasks.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"scope-of-this-article\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#scope-of-this-article\",\n    \"aria-label\": \"scope of this article permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Scope of this article\"), \"\\n\", React.createElement(_components.p, null, \"This article provides a deep yet accessible introduction to the Transformer architecture. I will discuss:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"The conceptual underpinnings that distinguish Transformers from previous sequence models.\"), \"\\n\", React.createElement(_components.li, null, \"An overview of the architecture's core design, including both the encoder and decoder modules.\"), \"\\n\", React.createElement(_components.li, null, \"Practical considerations such as the strengths and limitations of a fully attention-based system.\"), \"\\n\", React.createElement(_components.li, null, \"Common variants of the Transformer that use only the encoder or only the decoder.\"), \"\\n\", React.createElement(_components.li, null, \"Detailed breakdown of each component (embedding layers, positional encoding, multi-head attention, feed-forward layers, etc.) in both the encoder and decoder.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"While I touch on essential concepts such as the parallelization advantage, memory usage, and how models like BERT and GPT relate to the Transformer blueprint, some of the more intricate mathematical details of the attention mechanism, alternative attention forms, scaling strategies, and advanced training setups will be explored in a follow-up article. By the end of this piece, you should have a firm grasp of the motivation, high-level structure, and internal flow of information within Transformer models.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"historical-context-in-nlp\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#historical-context-in-nlp\",\n    \"aria-label\": \"historical context in nlp permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Historical context in NLP\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Sequence-to-sequence learning\"), \": The notion of mapping an input sequence to an output sequence using neural networks gained momentum around 2014 (Sutskever and gang, 2014). Encoder-decoder structures employing LSTM or GRU layers became the standard approach for tasks like machine translation.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Introduction of attention\"), \": In 2015, Bahdanau and gang proposed an attention layer that improved sequence-to-sequence models by enabling the model to \\\"attend\\\" to relevant input tokens at each decoding step. This overcame some of the bottlenecks in purely recurrent models that rely on a single context vector.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Attention everywhere\"), \": Subsequent research integrated attention more deeply into the network architecture itself, culminating in the fully attention-based Transformer (Vaswani and gang, 2017). This design drastically reduced the path length between any two tokens in the input or output, yielding better performance and faster training.\"), \"\\n\", React.createElement(_components.p, null, \"These historical steps underscore how the field arrived at an architecture that dispenses with recurrence, allowing parallel processing of sequence elements via a global attention mechanism. In modern practice, Transformers define the cutting edge of NLP, forming the underlying blueprint for a diverse array of large-scale models.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"core-concepts\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#core-concepts\",\n    \"aria-label\": \"core concepts permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Core concepts\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"sequence-modeling-vs-transformer-based-modeling\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#sequence-modeling-vs-transformer-based-modeling\",\n    \"aria-label\": \"sequence modeling vs transformer based modeling permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Sequence modeling vs. transformer-based modeling\"), \"\\n\", React.createElement(_components.p, null, \"Traditional sequence modeling techniques (e.g., RNNs) process elements in a strict order: the hidden state at timestep \", React.createElement(Latex, {\n    text: \"\\\\(t\\\\)\"\n  }), \" depends on the hidden state at timestep \", React.createElement(Latex, {\n    text: \"\\\\(t-1\\\\)\"\n  }), \" (and so on), creating a chain-like dependency structure. This sequential nature means it can be difficult to parallelize computations across long sequences during training. Although methods like truncated backpropagation through time and specialized architectures (like bidirectional LSTMs) help alleviate some of these issues, the fundamental problem remains.\"), \"\\n\", React.createElement(_components.p, null, \"In contrast, a Transformer-based approach processes an entire sequence in parallel by employing self-attention. Given an input sequence of length \", React.createElement(Latex, {\n    text: \"\\\\(n\\\\)\"\n  }), \", each token can directly attend to any other token. The notion of positional encoding (discussed later) is introduced to keep track of the sequence order. This parallelism dramatically speeds up training: rather than waiting for hidden states from previous positions, the model updates all token representations at once.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"attention-mechanisms-and-their-role\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#attention-mechanisms-and-their-role\",\n    \"aria-label\": \"attention mechanisms and their role permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Attention mechanisms and their role\"), \"\\n\", React.createElement(_components.p, null, \"Attention mechanisms can be thought of as a strategy to compute weighted averages over a set of \\\"value\\\" vectors, where the weights are determined by how closely a \\\"query\\\" vector matches a set of \\\"key\\\" vectors. Formally, one can define a scaled dot-product attention function as:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\text{Attention}(Q, K, V) = \\\\text{softmax}\\\\Bigl(\\\\frac{Q K^\\\\top}{\\\\sqrt{d_k}}\\\\Bigr) V,\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\(Q\\\\)\"\n  }), \" (queries), \", React.createElement(Latex, {\n    text: \"\\\\(K\\\\)\"\n  }), \" (keys), and \", React.createElement(Latex, {\n    text: \"\\\\(V\\\\)\"\n  }), \" (values) often come from transformations of the same input sequence (self-attention) or from different sequences (encoder-decoder attention). The factor \", React.createElement(Latex, {\n    text: \"\\\\(\\\\sqrt{d_k}\\\\)\"\n  }), \" (where \", React.createElement(Latex, {\n    text: \"\\\\(d_k\\\\)\"\n  }), \" is the dimensionality of the keys) prevents overly large dot-product values that can destabilize gradients.\"), \"\\n\", React.createElement(_components.p, null, \"In the Transformer, the self-attention layer allows each position in the sequence to gather information from every other position, effectively modeling relationships across the entire span without relying on potentially distant hidden states.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"key-differences-from-recurrent-and-convolutional-models\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#key-differences-from-recurrent-and-convolutional-models\",\n    \"aria-label\": \"key differences from recurrent and convolutional models permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Key differences from recurrent and convolutional models\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Elimination of recurrence\"), \": Transformers do not process tokens in a fixed sequential manner. This means the path length between two positions in the sequence is significantly reduced, often resulting in better gradient flow and the ability to capture very long-range dependencies.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"No convolutions\"), \": Instead of applying kernels locally (as in CNNs), Transformers attend to tokens across the entire sequence. Convolution-like behaviors can sometimes emerge in certain attention patterns, but it is not a structural requirement.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Reliance on positional information\"), \": Since the Transformer processes all tokens in parallel, it needs an explicit way of encoding token positions. This is handled by positional encoding or learned position embeddings.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Multi-head design\"), \": Each attention layer is split into multiple heads. Each head can \\\"focus\\\" on different parts of the sequence, capturing diverse patterns.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"parallelization-advantages\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#parallelization-advantages\",\n    \"aria-label\": \"parallelization advantages permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Parallelization advantages\"), \"\\n\", React.createElement(_components.p, null, \"Because each token can be processed independently (apart from the attention mechanism's matrix multiplications, which themselves are highly parallelizable on GPUs and TPUs), Transformers make much more efficient use of modern hardware. Training times for large datasets can be drastically reduced compared to RNNs, as we are no longer forced to wait on hidden state computations for each position in the input. This is why Transformers have become so central to large-scale language models that require tens or hundreds of billions of parameters.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"transformer-architecture-overview\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#transformer-architecture-overview\",\n    \"aria-label\": \"transformer architecture overview permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Transformer architecture overview\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"encoder-decoder-structure\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#encoder-decoder-structure\",\n    \"aria-label\": \"encoder decoder structure permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Encoder-decoder structure\"), \"\\n\", React.createElement(_components.p, null, \"A standard Transformer (Vaswani and gang, 2017) includes two main blocks:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Encoder\"), \": Processes the input sequence and produces a sequence of hidden representations (of the same length as the input).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Decoder\"), \": Generates output tokens one by one (for sequence generation tasks), attending to both its own previously generated tokens (through masked self-attention) and the encoder outputs (through encoder-decoder attention).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Conceptually, this mirrors earlier sequence-to-sequence models that used RNN encoders and decoders. The significant difference is that both the encoder and decoder are built entirely around self-attention (plus feed-forward layers), rather than RNN or CNN cells.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"flow-of-information\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#flow-of-information\",\n    \"aria-label\": \"flow of information permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Flow of information\"), \"\\n\", React.createElement(_components.p, null, \"Consider a machine translation task from a source language to a target language:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Encoder\"), \": The input tokens are converted to embeddings and enriched with positional encodings so the model knows the order of words. Then, each encoder layer refines these embeddings by applying self-attention (where every token can attend to every other token in the input) and feed-forward transformations.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Passing to decoder\"), \": The output of the final encoder layer is a set of contextual embeddings representing each position in the source sentence. These embeddings are fed into the decoder.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Decoder\"), \": For each token in the target sequence as it's being generated, the decoder first applies a masked self-attention mechanism (so the model cannot \\\"peek\\\" at future tokens). It then attends to the encoder outputs, finally passing the result through a feed-forward layer and output logits.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"This pipeline handles sequence-to-sequence transformations comprehensively. In other tasks, like classification, one might use only the encoder portion (e.g., BERT). In language modeling, one might rely only on the decoder (e.g., GPT).\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"advantages-and-limitations\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#advantages-and-limitations\",\n    \"aria-label\": \"advantages and limitations permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Advantages and limitations\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Advantages\"), \":\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Massively parallelizable computations lead to faster training.\"), \"\\n\", React.createElement(_components.li, null, \"Global attention allows the model to learn relationships between distant tokens more easily than RNN-based methods.\"), \"\\n\", React.createElement(_components.li, null, \"Excellent performance on a broad range of tasks, from language modeling to speech recognition to computer vision.\"), \"\\n\", React.createElement(_components.li, null, \"Modular design (stacking self-attention layers) makes them relatively simple to scale up.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Limitations\"), \":\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Memory usage\"), \": Storing attention scores for very long sequences \", React.createElement(Latex, {\n    text: \"\\\\((n \\\\times n)\\\\)\"\n  }), \" can be prohibitive in terms of memory. This becomes a limiting factor for extremely long inputs.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Computational overhead\"), \": Although highly parallelizable, the attention mechanism can be expensive for large \", React.createElement(Latex, {\n    text: \"\\\\(n\\\\)\"\n  }), \". Researchers have responded with variants like sparse attention or linear attention to mitigate these costs.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Requires large datasets\"), \": Transformers often demonstrate their full potential when trained on massive corpora. Smaller datasets may lead to overfitting unless carefully regularized or fine-tuned from a pretrained model.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"variants-of-encoder-decoder-approaches\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#variants-of-encoder-decoder-approaches\",\n    \"aria-label\": \"variants of encoder decoder approaches permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Variants of encoder-decoder approaches\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Encoder-only\"), \": For tasks like classification or regression on a single sequence (e.g., BERT), you only need an encoder stack. After passing an input sequence through the stack, you might take the final hidden state (or a special token like [CLS]) to perform classification.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Decoder-only\"), \": For language modeling or generative tasks (e.g., GPT), a decoder stack suffices. It produces one token at a time, conditioning on previously generated tokens.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Full encoder-decoder\"), \": For sequence-to-sequence tasks like translation, summarization, or question answering, the original Transformer blueprint with both encoder and decoder modules is commonly used.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"encoder-module\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#encoder-module\",\n    \"aria-label\": \"encoder module permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Encoder module\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"embedding-layer\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#embedding-layer\",\n    \"aria-label\": \"embedding layer permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Embedding layer\"), \"\\n\", React.createElement(_components.p, null, \"When dealing with textual data, one typically starts with a vocabulary of subword tokens. Each token is assigned an index in an embedding matrix of dimension \", React.createElement(Latex, {\n    text: \"\\\\((\\\\text{vocab_size} \\\\times d_\\\\text{model})\\\\)\"\n  }), \". The model dimension \", React.createElement(Latex, {\n    text: \"\\\\(d_\\\\text{model}\\\\)\"\n  }), \" (often 512 or 768, though many higher or lower values are used in practice) determines how large each token's representation is. For example, if you have a vocabulary of 30,000 tokens and \", React.createElement(Latex, {\n    text: \"\\\\(d_\\\\text{model} = 512\\\\)\"\n  }), \", your embedding matrix is \", React.createElement(Latex, {\n    text: \"\\\\(30,000 \\\\times 512\\\\)\"\n  }), \". When you feed a batch of token indices into the embedding layer, it returns a 3D tensor: \", React.createElement(Latex, {\n    text: \"\\\\((\\\\text{batch_size}, \\\\text{sequence_length}, d_\\\\text{model})\\\\)\"\n  }), \".\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"positional-encoding\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#positional-encoding\",\n    \"aria-label\": \"positional encoding permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Positional encoding\"), \"\\n\", React.createElement(_components.p, null, \"Since Transformers do not inherently track sequence order by processing tokens sequentially, they need a way to inject positional information. The original paper by Vaswani and gang (2017) proposed using sinusoidal position encoding, which can be summarized as follows for each token position \", React.createElement(Latex, {\n    text: \"\\\\(pos\\\\)\"\n  }), \":\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\nPE_{(pos, 2i)} = \\\\sin\\\\Bigl(\\\\frac{pos}{10000^{2i / d_{\\\\text{model}}}}\\\\Bigr),\\n\\\\]\"\n  }), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\nPE_{(pos, 2i+1)} = \\\\cos\\\\Bigl(\\\\frac{pos}{10000^{2i / d_{\\\\text{model}}}}\\\\Bigr),\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\(pos\\\\)\"\n  }), \" is the token index in the sequence (0, 1, 2, …), and \", React.createElement(Latex, {\n    text: \"\\\\(i\\\\)\"\n  }), \" is the dimension index within the embedding. These periodic functions allow the model to extrapolate to positions greater than those in the training data, and they encode positions in a way that preserves relative distance information through linear transformations.\"), \"\\n\", React.createElement(_components.p, null, \"An alternative is to learn positional embeddings. In that scenario, you simply have another trainable embedding matrix for positions — similar to token embeddings. Some newer models employ more sophisticated strategies, such as \", React.createElement(_components.strong, null, \"relative position embeddings\"), \" or \", React.createElement(_components.strong, null, \"rotary embeddings\"), \" (Su and gang, 2021), to better handle long sequences and to model positions in a relative rather than absolute sense.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"multi-head-self-attention-mechanism\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#multi-head-self-attention-mechanism\",\n    \"aria-label\": \"multi head self attention mechanism permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Multi-head self-attention mechanism\"), \"\\n\", React.createElement(_components.p, null, \"A hallmark of the Transformer is \", React.createElement(_components.strong, null, \"multi-head self-attention\"), \". Instead of applying a single attention function, the model splits its representation into multiple heads (each of dimension \", React.createElement(Latex, {\n    text: \"\\\\(d_\\\\text{model}/h\\\\)\"\n  }), \", where \", React.createElement(Latex, {\n    text: \"\\\\(h\\\\)\"\n  }), \" is the number of heads) and applies the attention function in parallel. The outputs of these heads are then concatenated and linearly transformed. For each head \", React.createElement(Latex, {\n    text: \"\\\\(j\\\\)\"\n  }), \", the transformations can be expressed as:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\nQ_j = X W_j^Q, \\\\quad K_j = X W_j^K, \\\\quad V_j = X W_j^V,\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\(X\\\\)\"\n  }), \" is the input sequence's representation (dimensions \", React.createElement(Latex, {\n    text: \"\\\\((\\\\text{batch_size}, \\\\text{sequence_length}, d_\\\\text{model})\\\\)\"\n  }), \"), and \", React.createElement(Latex, {\n    text: \"\\\\(W_j^Q, W_j^K, W_j^V\\\\)\"\n  }), \" are parameter matrices specific to that head. Each head then computes its own self-attention:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{head}_j = \\\\text{Attention}(Q_j, K_j, V_j) \\\\)\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Finally, the heads are concatenated and transformed by a matrix \", React.createElement(Latex, {\n    text: \"\\\\(W^O\\\\)\"\n  }), \":\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{MultiHead}(X) = [\\\\text{head}_1, \\\\ldots, \\\\text{head}_h] W^O. \\\\)\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Breaking down the representation into multiple attention heads allows the model to capture a variety of interactions in parallel — perhaps one head focuses on syntactic relationships while another focuses on semantic ones.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"feed-forward-network\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#feed-forward-network\",\n    \"aria-label\": \"feed forward network permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Feed-forward network\"), \"\\n\", React.createElement(_components.p, null, \"Each encoder layer also includes a position-wise feed-forward network that processes each token representation independently. The typical form is:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\text{FFN}(x) = \\\\max(0, xW_1 + b_1)W_2 + b_2,\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\(W_1\\\\)\"\n  }), \" and \", React.createElement(Latex, {\n    text: \"\\\\(W_2\\\\)\"\n  }), \" are learnable parameter matrices (dimensions \", React.createElement(Latex, {\n    text: \"\\\\((d_\\\\text{model}, d_{ff})\\\\)\"\n  }), \" and \", React.createElement(Latex, {\n    text: \"\\\\((d_{ff}, d_\\\\text{model})\\\\)\"\n  }), \", respectively), and \", React.createElement(Latex, {\n    text: \"\\\\(b_1, b_2\\\\)\"\n  }), \" are biases. The intermediate dimension \", React.createElement(Latex, {\n    text: \"\\\\(d_{ff}\\\\)\"\n  }), \" (often 2,048 in the original Transformer) is larger than \", React.createElement(Latex, {\n    text: \"\\\\(d_\\\\text{model}\\\\)\"\n  }), \", allowing the network to learn more complex transformations. The activation function is typically ReLU or GELU in many modern variants.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"residual-connections-and-layer-normalization\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#residual-connections-and-layer-normalization\",\n    \"aria-label\": \"residual connections and layer normalization permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Residual connections and layer normalization\"), \"\\n\", React.createElement(_components.p, null, \"To facilitate signal propagation and stable gradient flow, Transformers use residual connections around both the multi-head attention sub-layer and the feed-forward sub-layer. After each sub-layer, a layer normalization step (Ba and gang, 2016) is applied. Symbolically:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\( y = \\\\text{LayerNorm}(x + \\\\text{Sublayer}(x)), \\\\)\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\(\\\\text{Sublayer}(x)\\\\)\"\n  }), \" could be the self-attention block or the feed-forward block. This structure, repeated \", React.createElement(Latex, {\n    text: \"\\\\(N\\\\)\"\n  }), \" times, forms the encoder stack. The original Transformer used \", React.createElement(Latex, {\n    text: \"\\\\(N=6\\\\)\"\n  }), \" layers, though many modern architectures use more.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"alternative-positional-encoding-methods\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#alternative-positional-encoding-methods\",\n    \"aria-label\": \"alternative positional encoding methods permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Alternative positional encoding methods\"), \"\\n\", React.createElement(_components.p, null, \"While the original sinusoidal approach and learned position embeddings remain popular, a variety of newer approaches exist:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Relative position embeddings\"), \" (Shaw and gang, 2018): Instead of encoding absolute positions, it encodes the relative distance between tokens, which can be more flexible in certain tasks.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Rotary position embeddings\"), \" (Su and gang, 2021): A method that multiplies token embeddings by a rotation matrix to incorporate positional information directly into the attention score. Known to scale well to longer sequences.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"decoder-module\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#decoder-module\",\n    \"aria-label\": \"decoder module permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Decoder module\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"masked-multi-head-self-attention\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#masked-multi-head-self-attention\",\n    \"aria-label\": \"masked multi head self attention permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Masked multi-head self-attention\"), \"\\n\", React.createElement(_components.p, null, \"For tasks like language modeling or machine translation, the decoder must generate the output sequence token-by-token, without peeking at future tokens. A \", React.createElement(_components.strong, null, \"causal\"), \" or \", React.createElement(_components.strong, null, \"masked\"), \" self-attention mechanism ensures that the attention for position \", React.createElement(Latex, {\n    text: \"\\\\(t\\\\)\"\n  }), \" only depends on positions \", React.createElement(Latex, {\n    text: \"\\\\(\\\\leq t\\\\)\"\n  }), \". Concretely, a triangular or future-masking matrix is applied to the attention logits so that no attention weight is computed for positions beyond \", React.createElement(Latex, {\n    text: \"\\\\(t\\\\)\"\n  }), \". This is critical for autoregressive text generation, where the model must produce tokens in a left-to-right manner.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"encoder-decoder-attention\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#encoder-decoder-attention\",\n    \"aria-label\": \"encoder decoder attention permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Encoder-decoder attention\"), \"\\n\", React.createElement(_components.p, null, \"In addition to the masked self-attention, the decoder includes a cross-attention sub-layer that attends to the encoder outputs. This is also a multi-head attention mechanism, but here the queries come from the decoder's hidden states, while the keys and values come from the encoder outputs. This structure allows the decoder to reference and distill information from the entire input sequence, which has already been transformed by the encoder.\"), \"\\n\", React.createElement(_components.p, null, \"Formally:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\( Q = H_{\\\\text{decoder}}, \\\\quad K = H_{\\\\text{encoder}}, \\\\quad V = H_{\\\\text{encoder}}. \\\\)\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Where \", React.createElement(Latex, {\n    text: \"\\\\(H_{\\\\text{decoder}}\\\\)\"\n  }), \" and \", React.createElement(Latex, {\n    text: \"\\\\(H_{\\\\text{encoder}}\\\\)\"\n  }), \" are the hidden representations (or states) coming from the respective modules.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"feed-forward-network-in-the-decoder\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#feed-forward-network-in-the-decoder\",\n    \"aria-label\": \"feed forward network in the decoder permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Feed-forward network in the decoder\"), \"\\n\", React.createElement(_components.p, null, \"Like the encoder, each decoder layer contains its own position-wise feed-forward network. The structure typically mirrors that of the encoder. Each token's representation is passed through a set of linear transformations and non-linearities. The hyperparameters (like \", React.createElement(Latex, {\n    text: \"\\\\(d_{ff}\\\\)\"\n  }), \") often match those in the encoder, though one can modify them as needed.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"residual-connections-and-layer-normalization-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#residual-connections-and-layer-normalization-1\",\n    \"aria-label\": \"residual connections and layer normalization 1 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Residual connections and layer normalization\"), \"\\n\", React.createElement(_components.p, null, \"The decoder also has residual connections around each sub-layer and performs layer normalization in the same manner as the encoder. Specifically:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\( y = \\\\text{LayerNorm}(x + \\\\text{Sublayer}(x)), \\\\)\"\n  }), \"\\n\", React.createElement(_components.p, null, \"applies to both the masked self-attention sub-layer, the encoder-decoder attention sub-layer, and the feed-forward sub-layer. This consistency ensures stable training behavior across the entire stack.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"generating-output-tokens\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#generating-output-tokens\",\n    \"aria-label\": \"generating output tokens permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Generating output tokens\"), \"\\n\", React.createElement(_components.p, null, \"Once the decoder has computed its final hidden states, the standard approach is to project those states through a linear transformation that maps each vector of dimension \", React.createElement(Latex, {\n    text: \"\\\\(d_\\\\text{model}\\\\)\"\n  }), \" to the vocabulary dimension. A softmax is then applied to produce a probability distribution over possible next tokens:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\nP(\\\\text{token}_t = w) = \\\\text{softmax}(H_{\\\\text{decoder}} W_{\\\\text{vocab}}^T)_w.\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"At inference time, the model can generate text by sampling from this distribution (e.g., greedily taking the most likely token at each step), or using more sophisticated decoding algorithms such as beam search, nucleus sampling, or top-k sampling.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"handling-long-sequences-in-decoding\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#handling-long-sequences-in-decoding\",\n    \"aria-label\": \"handling long sequences in decoding permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Handling long sequences in decoding\"), \"\\n\", React.createElement(_components.p, null, \"While Transformers can handle longer sequences than many RNN-based approaches, memory usage can still balloon if the sequence is very long. Several techniques exist to mitigate this during decoding:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Chunking or blocking\"), \": Split the input (or the previously generated output) into manageable blocks.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Memory compression\"), \": Summarize past tokens into fewer representations, so the attention context does not grow unbounded.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Sparse or linear attention variants\"), \": Reduce the computational overhead and memory usage of full self-attention, often by restricting which tokens can attend to each other or by approximating the attention mechanism.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Regardless of the method, the essential principle remains that the decoder must not have direct access to future positions, preserving causal consistency.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"Below, I will embed a brief code snippet that demonstrates a minimal high-level Transformer encoder-decoder forward pass in Python-like pseudocode. This snippet is intended simply as a conceptual illustration of how the data flows, rather than a complete implementation with all details (masking, positional encodings, etc.) spelled out.\"), \"\\n\", React.createElement(Code, {\n    text: `\nimport torch\nimport torch.nn as nn\nimport math\n\nclass SimpleTransformer(nn.Module):\n    def __init__(self, \n                 vocab_size, \n                 d_model=512, \n                 n_heads=8, \n                 num_encoder_layers=6,\n                 num_decoder_layers=6):\n        super().__init__()\n        self.embedding_src = nn.Embedding(vocab_size, d_model)\n        self.embedding_tgt = nn.Embedding(vocab_size, d_model)\n\n        # Positional encoding parameters\n        self.pos_encoder = PositionalEncoding(d_model)\n\n        # Transformer module from PyTorch\n        self.transformer = nn.Transformer(d_model=d_model, \n                                          nhead=n_heads,\n                                          num_encoder_layers=num_encoder_layers,\n                                          num_decoder_layers=num_decoder_layers)\n\n        self.fc_out = nn.Linear(d_model, vocab_size)\n    \n    def forward(self, src_tokens, tgt_tokens):\n        # src_tokens, tgt_tokens: shape (seq_len, batch_size)\n        src_emb = self.embedding_src(src_tokens)  # (seq_len, batch_size, d_model)\n        tgt_emb = self.embedding_tgt(tgt_tokens)  # (seq_len, batch_size, d_model)\n\n        src_emb = self.pos_encoder(src_emb)\n        tgt_emb = self.pos_encoder(tgt_emb)\n\n        # The nn.Transformer in PyTorch expects (seq_len, batch_size, d_model)\n        # By default, it implements both the encoder and decoder\n        memory = self.transformer.encoder(src_emb)  # shape: (src_seq_len, batch_size, d_model)\n        outputs = self.transformer.decoder(tgt_emb, memory)  # shape: (tgt_seq_len, batch_size, d_model)\n\n        logits = self.fc_out(outputs)  # (tgt_seq_len, batch_size, vocab_size)\n        return logits\n\nclass PositionalEncoding(nn.Module):\n    def __init__(self, d_model, max_len=5000):\n        super().__init__()\n        pe = torch.zeros(max_len, d_model)\n        position = torch.arange(0, max_len).unsqueeze(1)\n        div_term = torch.exp(torch.arange(0, d_model, 2) * -(math.log(10000.0) / d_model))\n        pe[:, 0::2] = torch.sin(position * div_term)\n        pe[:, 1::2] = torch.cos(position * div_term)\n        pe = pe.unsqueeze(1)  # shape: (max_len, 1, d_model)\n        self.register_buffer('pe', pe)\n\n    def forward(self, x):\n        # x shape: (seq_len, batch_size, d_model)\n        seq_len = x.size(0)\n        x = x + self.pe[:seq_len, :]\n        return x\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"Even though libraries such as PyTorch provide a high-level \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">nn.Transformer</code>\"\n    }\n  }), \" module, it can be valuable for advanced practitioners to understand the architectural details behind it, especially when debugging or implementing variants like GPT-style decoder-only models, BERT-style encoder-only models, or specialized attention mechanisms.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"I have thus outlined the core elements of the Transformer architecture: encoder-decoder design, multi-head self-attention, feed-forward networks, and the usage of residual connections and normalization to stabilize training. The final layers of the decoder generate tokens autoregressively, ensuring that the model can effectively produce sequences for tasks like translation or text generation. You should now have a strong conceptual grounding in how Transformers function at a fundamental level.\"), \"\\n\", React.createElement(_components.p, null, \"In the subsequent article (part 2), I will dive deeper into the mathematical intricacies of the self-attention mechanism, the roles of queries, keys, and values, and advanced topics such as memory-efficient attention variants and common training techniques. However, even at this stage, it should be evident why Transformers have drastically reshaped the modern ML landscape, offering a scalable, parallelizable, and powerful framework for dealing with sequential data across a variety of modalities.\"), \"\\n\", React.createElement(_components.p, null, \"Depending on your application, you may consider exploring both the encoder-only variants (such as BERT or Vision Transformers) and the decoder-only variants (such as GPT) to determine which best meets your needs. If you're working on tasks where a sequence-to-sequence approach is critical — like machine translation or text summarization — the standard encoder-decoder Transformer structure remains a highly effective choice.\"), \"\\n\", React.createElement(_components.p, null, \"By understanding these components, you're well on your way to building advanced, attention-driven architectures that stand at the forefront of contemporary machine learning.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/avrtt/Repos/avrtt.github.io/src/pages/posts/research/transformer_architecture.mdx\";\nimport React, {useState, useEffect} from 'react';\nimport {useSiteMetadata} from \"../hooks/useSiteMetadata\";\nimport RemoveMarkdown from 'remove-markdown';\nimport {ImageContext} from '../context/ImageContext';\nimport {MDXProvider} from '@mdx-js/react';\nimport Image from '../components/PostImage';\nimport {motion} from 'framer-motion';\nimport SEO from \"../components/seo\";\nimport PostBanner from '../components/PostBanner';\nimport PostBottom from '../components/PostBottom';\nimport {wordsPerMinuteAdventures, wordsPerMinuteResearch, wordsPerMinuteThoughts} from '../data/commonVariables';\nimport {graphql} from 'gatsby';\nimport PartOfCourseNotice from \"../components/PartOfCourseNotice\";\nimport * as stylesButtonsCommon from \"../styles/buttons_common.module.scss\";\nimport * as stylesCustomPostLayouts from \"../styles/custom_post_layouts.module.scss\";\nimport * as stylesTableOfContents from \"../styles/table_of_contents.module.scss\";\nimport * as stylesTagBadges from \"../styles/tag_badges.module.scss\";\nfunction formatReadTime(minutes) {\n  if (minutes <= 10) return '~10 min';\n  if (minutes <= 20) return '~20 min';\n  if (minutes <= 30) return '~30 min';\n  if (minutes <= 40) return '~40 min';\n  if (minutes <= 50) return '~50 min';\n  if (minutes <= 60) return '~1 h';\n  const hours = Math.floor(minutes / 60);\n  const remainder = minutes % 60;\n  if (remainder <= 30) {\n    return `~${hours}${remainder > 0 ? '.5' : ''} h`;\n  }\n  return `~${hours + 1} h`;\n}\nconst TableOfContents = ({toc}) => {\n  if (!toc || !toc.items) return null;\n  const handleClick = (e, url) => {\n    e.preventDefault();\n    const targetId = url.replace('#', '');\n    const targetElement = document.getElementById(targetId);\n    if (targetElement) {\n      targetElement.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }\n  };\n  return React.createElement(\"nav\", {\n    className: stylesTableOfContents.toc\n  }, React.createElement(\"ul\", null, toc.items.map((item, index) => React.createElement(\"li\", {\n    key: index\n  }, React.createElement(\"a\", {\n    href: item.url,\n    onClick: e => handleClick(e, item.url)\n  }, item.title), item.items && React.createElement(TableOfContents, {\n    toc: {\n      items: item.items\n    }\n  })))));\n};\nexport function PostTemplate({data: {mdx, allMdx, allPostImages}, children}) {\n  const {frontmatter, body, tableOfContents} = mdx;\n  const index = frontmatter.index;\n  const slug = frontmatter.slug;\n  const section = slug.split('/')[1];\n  const posts = allMdx.nodes.filter(post => post.frontmatter.slug.includes(`/${section}/`));\n  const sortedPosts = posts.sort((a, b) => a.frontmatter.index - b.frontmatter.index);\n  const currentIndex = sortedPosts.findIndex(post => post.frontmatter.index === index);\n  const nextPost = sortedPosts[currentIndex + 1];\n  const lastPost = sortedPosts[currentIndex - 1];\n  const trimmedSlug = frontmatter.slug.replace(/\\/$/, '');\n  const keyCurrent = (/[^/]*$/).exec(trimmedSlug)[0];\n  const basePath = `posts/${section}/content/${keyCurrent}/`;\n  const [isWideLayout, setIsWideLayout] = useState(frontmatter.flagWideLayoutByDefault);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const toggleLayout = () => {\n    setIsWideLayout(!isWideLayout);\n  };\n  useEffect(() => {\n    setIsAnimating(true);\n    const timer = setTimeout(() => setIsAnimating(false), 340);\n    return () => clearTimeout(timer);\n  }, [isWideLayout]);\n  var wordsPerMinute;\n  if (section === \"adventures\") {\n    wordsPerMinute = wordsPerMinuteAdventures;\n  } else if (section === \"research\") {\n    wordsPerMinute = wordsPerMinuteResearch;\n  } else if (section === \"thoughts\") {\n    wordsPerMinute = wordsPerMinuteThoughts;\n  }\n  const plainTextBody = RemoveMarkdown(body).replace(/import .*? from .*?;/g, '').replace(/<.*?>/g, '').replace(/\\{\\/\\*[\\s\\S]*?\\*\\/\\}/g, '').trim();\n  const wordCount = plainTextBody.split(/\\s+/).length;\n  const baseReadTimeMinutes = Math.ceil(wordCount / wordsPerMinute);\n  const extraTime = frontmatter.extraReadTimeMin || 0;\n  const totalReadTime = baseReadTimeMinutes + extraTime;\n  const readTime = formatReadTime(totalReadTime);\n  const notices = [{\n    flag: frontmatter.flagDraft,\n    component: () => import(\"../components/NotFinishedNotice\")\n  }, {\n    flag: frontmatter.flagMindfuckery,\n    component: () => import(\"../components/MindfuckeryNotice\")\n  }, {\n    flag: frontmatter.flagRewrite,\n    component: () => import(\"../components/RewriteNotice\")\n  }, {\n    flag: frontmatter.flagOffensive,\n    component: () => import(\"../components/OffensiveNotice\")\n  }, {\n    flag: frontmatter.flagProfane,\n    component: () => import(\"../components/ProfanityNotice\")\n  }, {\n    flag: frontmatter.flagMultilingual,\n    component: () => import(\"../components/MultilingualNotice\")\n  }, {\n    flag: frontmatter.flagUnreliably,\n    component: () => import(\"../components/UnreliablyNotice\")\n  }, {\n    flag: frontmatter.flagPolitical,\n    component: () => import(\"../components/PoliticsNotice\")\n  }, {\n    flag: frontmatter.flagCognitohazard,\n    component: () => import(\"../components/CognitohazardNotice\")\n  }, {\n    flag: frontmatter.flagHidden,\n    component: () => import(\"../components/HiddenNotice\")\n  }];\n  const [loadedNotices, setLoadedNotices] = useState([]);\n  useEffect(() => {\n    notices.forEach(({flag, component}) => {\n      if (flag) {\n        component().then(module => {\n          setLoadedNotices(prev => [...prev, module.default]);\n        });\n      }\n    });\n  }, []);\n  return React.createElement(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.15\n    }\n  }, React.createElement(PostBanner, {\n    postNumber: frontmatter.index,\n    date: frontmatter.date,\n    updated: frontmatter.updated,\n    readTime: readTime,\n    difficulty: frontmatter.difficultyLevel,\n    title: frontmatter.title,\n    desc: frontmatter.desc,\n    banner: frontmatter.banner,\n    section: section,\n    postKey: keyCurrent,\n    isMindfuckery: frontmatter.flagMindfuckery,\n    mainTag: frontmatter.mainTag\n  }), React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      flexWrap: \"wrap\",\n      maxWidth: \"75%\",\n      marginLeft: \"auto\",\n      paddingRight: \"1vw\",\n      marginTop: \"-6vh\",\n      marginBottom: \"4vh\"\n    }\n  }, frontmatter.otherTags.map((tag, index) => React.createElement(\"span\", {\n    key: index,\n    className: `noselect ${stylesTagBadges.tagPosts}`,\n    style: {\n      margin: \"0 5px 5px 0\"\n    }\n  }, tag))), React.createElement(\"div\", {\n    class: \"postBody\"\n  }, React.createElement(TableOfContents, {\n    toc: tableOfContents\n  })), React.createElement(\"br\"), React.createElement(\"div\", {\n    style: {\n      margin: \"0 10% -2vh 30%\",\n      textAlign: \"right\"\n    }\n  }, React.createElement(motion.button, {\n    class: \"noselect\",\n    className: stylesCustomPostLayouts.postButton,\n    id: stylesCustomPostLayouts.postLayoutSwitchButton,\n    onClick: toggleLayout,\n    whileTap: {\n      scale: 0.93\n    }\n  }, React.createElement(motion.div, {\n    className: stylesButtonsCommon.buttonTextWrapper,\n    key: isWideLayout,\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.3,\n      ease: \"easeInOut\"\n    }\n  }, isWideLayout ? \"Switch to default layout\" : \"Switch to wide layout\"))), React.createElement(\"br\"), React.createElement(\"div\", {\n    class: \"postBody\",\n    style: {\n      margin: isWideLayout ? \"0 -14%\" : \"\",\n      maxWidth: isWideLayout ? \"200%\" : \"\",\n      transition: \"margin 1s ease, max-width 1s ease, padding 1s ease\"\n    }\n  }, React.createElement(\"div\", {\n    className: `${stylesCustomPostLayouts.textContent} ${isAnimating ? stylesCustomPostLayouts.fadeOut : stylesCustomPostLayouts.fadeIn}`\n  }, loadedNotices.map((NoticeComponent, index) => React.createElement(NoticeComponent, {\n    key: index\n  })), frontmatter.indexCourse ? React.createElement(PartOfCourseNotice, {\n    index: frontmatter.indexCourse,\n    category: frontmatter.courseCategoryName\n  }) : \"\", React.createElement(ImageContext.Provider, {\n    value: {\n      images: allPostImages.nodes,\n      basePath: basePath.replace(/\\/$/, '') + '/'\n    }\n  }, React.createElement(MDXProvider, {\n    components: {\n      Image\n    }\n  }, children)))), React.createElement(PostBottom, {\n    nextPost: nextPost,\n    lastPost: lastPost,\n    keyCurrent: keyCurrent,\n    section: section\n  }));\n}\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport function Head({data}) {\n  const {frontmatter} = data.mdx;\n  const title = frontmatter.titleSEO || frontmatter.title;\n  const titleOG = frontmatter.titleOG || title;\n  const titleTwitter = frontmatter.titleTwitter || title;\n  const description = frontmatter.descSEO || frontmatter.desc;\n  const descriptionOG = frontmatter.descOG || description;\n  const descriptionTwitter = frontmatter.descTwitter || description;\n  const schemaType = frontmatter.schemaType || \"BlogPosting\";\n  const keywords = frontmatter.keywordsSEO;\n  const datePublished = frontmatter.date;\n  const dateModified = frontmatter.updated || datePublished;\n  const imageOG = frontmatter.imageOG || frontmatter.banner?.childImageSharp?.gatsbyImageData?.images?.fallback?.src;\n  const imageAltOG = frontmatter.imageAltOG || descriptionOG;\n  const imageTwitter = frontmatter.imageTwitter || imageOG;\n  const imageAltTwitter = frontmatter.imageAltTwitter || descriptionTwitter;\n  const canonicalUrl = frontmatter.canonicalURL;\n  const flagHidden = frontmatter.flagHidden || false;\n  const mainTag = frontmatter.mainTag || \"Posts\";\n  const section = frontmatter.slug.split('/')[1] || \"posts\";\n  const type = \"article\";\n  const {siteUrl} = useSiteMetadata();\n  const breadcrumbJSON = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    \"itemListElement\": [{\n      \"@type\": \"ListItem\",\n      \"position\": 1,\n      \"name\": \"Home\",\n      \"item\": siteUrl\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 2,\n      \"name\": mainTag,\n      \"item\": `${siteUrl}/${frontmatter.slug.split('/')[1]}`\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 3,\n      \"name\": title,\n      \"item\": `${siteUrl}${frontmatter.slug}`\n    }]\n  };\n  return React.createElement(SEO, {\n    title: title + \" - avrtt.blog\",\n    titleOG: titleOG,\n    titleTwitter: titleTwitter,\n    description: description,\n    descriptionOG: descriptionOG,\n    descriptionTwitter: descriptionTwitter,\n    schemaType: schemaType,\n    keywords: keywords,\n    datePublished: datePublished,\n    dateModified: dateModified,\n    imageOG: imageOG,\n    imageAltOG: imageAltOG,\n    imageTwitter: imageTwitter,\n    imageAltTwitter: imageAltTwitter,\n    canonicalUrl: canonicalUrl,\n    flagHidden: flagHidden,\n    mainTag: mainTag,\n    section: section,\n    type: type\n  }, React.createElement(\"script\", {\n    type: \"application/ld+json\"\n  }, JSON.stringify(breadcrumbJSON)));\n}\nexport const query = graphql`\n  query($id: String!, $postsFilterRegex: String!, $imagePathRegex: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        index\n        indexCourse\n        title\n        titleSEO\n        titleOG\n        titleTwitter\n        courseCategoryName\n        desc\n        descSEO\n        descOG\n        descTwitter\n        date\n        updated\n        extraReadTimeMin\n        difficultyLevel\n        flagDraft\n        flagMindfuckery\n        flagRewrite\n        flagOffensive\n        flagProfane\n        flagMultilingual\n        flagUnreliably\n        flagPolitical\n        flagCognitohazard\n        flagHidden\n        flagWideLayoutByDefault\n        schemaType\n        mainTag\n        otherTags\n        keywordsSEO\n        banner {\n          childImageSharp {\n            gatsbyImageData(\n\t\t\t\t\t\t\tformats: [JPG, WEBP], \n\t\t\t\t\t\t\tplaceholder: BLURRED, \n\t\t\t\t\t\t\tquality: 100\n\t\t\t\t\t\t)\n          }\n        }\n        imageOG\n        imageAltOG\n        imageTwitter\n        imageAltTwitter\n        canonicalURL\n        slug\n      }\n      body\n      tableOfContents(maxDepth: 3)\n    }\n    allMdx(filter: {frontmatter: {slug: {regex: $postsFilterRegex}}}) {\n      nodes {\n        frontmatter {\n          index\n          slug\n          banner {\n            childImageSharp {\n              gatsbyImageData(\n                formats: [JPG, WEBP],\n                placeholder: BLURRED,\n                quality: 100\n              )\n            }\n          }\n        }\n      }\n    }\n    allPostImages: allFile(\n      filter: { \n        sourceInstanceName: { eq: \"images\" },\n        relativePath: { regex: $imagePathRegex }\n      }\n    ) {\n      nodes {\n        relativePath\n        childImageSharp {\n          gatsbyImageData(\n            layout: CONSTRAINED\n            placeholder: DOMINANT_COLOR\n            quality: 100\n          )\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport Latex from 'react-latex-next';\nimport 'katex/dist/katex.min.css'; \n  \nconst L = ({ text }) => {\n  return (\n    <Latex>{text}</Latex>\n  );\n};\nexport default L;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h3","a","span","ul","li","strong","ol","h2","hr","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","Latex","text","Code","wrapper","MDXLayout","TableOfContents","_ref","toc","items","stylesTableOfContents","map","item","index","key","url","onClick","e","handleClick","preventDefault","targetId","replace","targetElement","document","getElementById","scrollIntoView","behavior","block","title","PostTemplate","_ref2","data","mdx","allMdx","allPostImages","children","frontmatter","body","tableOfContents","section","slug","split","sortedPosts","nodes","filter","post","includes","sort","b","currentIndex","findIndex","nextPost","lastPost","trimmedSlug","keyCurrent","exec","basePath","isWideLayout","setIsWideLayout","useState","flagWideLayoutByDefault","isAnimating","setIsAnimating","wordsPerMinute","useEffect","timer","setTimeout","clearTimeout","wordsPerMinuteAdventures","wordsPerMinuteResearch","wordsPerMinuteThoughts","wordCount","RemoveMarkdown","trim","length","readTime","minutes","hours","Math","floor","remainder","formatReadTime","ceil","extraReadTimeMin","notices","flag","flagDraft","component","flagMindfuckery","flagRewrite","flagOffensive","flagProfane","flagMultilingual","flagUnreliably","flagPolitical","flagCognitohazard","flagHidden","loadedNotices","setLoadedNotices","forEach","_ref3","then","module","prev","concat","_toConsumableArray","default","motion","div","initial","opacity","animate","exit","transition","duration","PostBanner","postNumber","date","updated","difficulty","difficultyLevel","desc","banner","postKey","isMindfuckery","mainTag","display","justifyContent","flexWrap","maxWidth","marginLeft","paddingRight","marginTop","marginBottom","otherTags","tag","stylesTagBadges","margin","class","textAlign","button","stylesCustomPostLayouts","toggleLayout","whileTap","scale","stylesButtonsCommon","ease","NoticeComponent","indexCourse","PartOfCourseNotice","category","courseCategoryName","ImageContext","Provider","value","images","MDXProvider","Image","PostBottom","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref4","_frontmatter$banner","_frontmatter$banner$c","_frontmatter$banner$c2","_frontmatter$banner$c3","_frontmatter$banner$c4","titleSEO","titleOG","titleTwitter","description","descSEO","descriptionOG","descOG","descriptionTwitter","descTwitter","schemaType","keywords","keywordsSEO","datePublished","dateModified","imageOG","childImageSharp","gatsbyImageData","fallback","src","imageAltOG","imageTwitter","imageAltTwitter","canonicalUrl","canonicalURL","siteUrl","useSiteMetadata","breadcrumbJSON","SEO","type","JSON","stringify"],"sourceRoot":""}