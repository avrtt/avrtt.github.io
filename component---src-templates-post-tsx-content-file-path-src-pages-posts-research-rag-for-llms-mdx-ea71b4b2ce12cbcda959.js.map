{"version":3,"file":"component---src-templates-post-tsx-content-file-path-src-pages-posts-research-rag-for-llms-mdx-ea71b4b2ce12cbcda959.js","mappings":"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","sources":["webpack://avrtt.blog/./src/pages/posts/research/rag_for_llms.mdx","webpack://avrtt.blog/./src/templates/post.tsx","webpack://avrtt.blog/./src/components/Latex/index.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\n/**(intro: a quote, catchphrase, joke, etc.)**/\n/*\n\nОбъяснение принципа работы векторных БД было представлено в посте \"Vector databases\". Здесь реализация и практические вопросы.\n\n### 2. Building a Vector Storage\nCreating a vector storage is the first step to building a Retrieval Augmented Generation (RAG) pipeline. Documents are loaded, split, and relevant chunks are used to produce vector representations (embeddings) that are stored for future use during inference.\n- **Ingesting documents**: Document loaders are convenient wrappers that can handle many formats: PDF, JSON, HTML, Markdown, etc. They can also directly retrieve data from some databases and APIs (GitHub, Reddit, Google Drive, etc.).\n- **Splitting documents**: Text splitters break down documents into smaller, semantically meaningful chunks. Instead of splitting text after _n_ characters, it's often better to split by header or recursively, with some additional metadata.\n- **Embedding models**: Embedding models convert text into vector representations. It allows for a deeper and more nuanced understanding of language, which is essential to perform semantic search.\n- **Vector databases**: Vector databases (like [Chroma](https://www.trychroma.com/), [Pinecone](https://www.pinecone.io/), [Milvus](https://milvus.io/), [FAISS](https://faiss.ai/), [Annoy](https://github.com/spotify/annoy), etc.) are designed to store embedding vectors. They enable efficient retrieval of data that is 'most similar' to a query based on vector similarity.\n### 3. Retrieval Augmented Generation\nWith RAG, LLMs retrieve contextual documents from a database to improve the accuracy of their answers. RAG is a popular way of augmenting the model's knowledge without any fine-tuning.\n- **Orchestrators**: Orchestrators (like [LangChain](https://python.langchain.com/docs/get_started/introduction), [LlamaIndex](https://docs.llamaindex.ai/en/stable/), [FastRAG](https://github.com/IntelLabs/fastRAG), etc.) are popular frameworks to connect your LLMs with tools, databases, memories, etc. and augment their abilities.\n- **Retrievers**: User instructions are not optimized for retrieval. Different techniques (e.g., multi-query retriever, [HyDE](https://arxiv.org/abs/2212.10496), etc.) can be applied to rephrase/expand them and improve performance.\n- **Memory**: To remember previous instructions and answers, LLMs and chatbots like ChatGPT add this history to their context window. This buffer can be improved with summarization (e.g., using a smaller LLM), a vector store + RAG, etc.\n- **Evaluation**: We need to evaluate both the document retrieval (context precision and recall) and generation stages (faithfulness and answer relevancy). It can be simplified with tools [Ragas](https://github.com/explodinggradients/ragas/tree/main) and [DeepEval](https://github.com/confident-ai/deepeval).\n# Implementing RAG\nRetrieval-Augmented Generation (RAG) combines information retrieval with language generation to produce more accurate, context-aware responses. It uses two components: a retriever, which searches a database to find relevant information, and a generator, which crafts a response based on the retrieved data. Implementing RAG involves using a retrieval model (e.g., embeddings and vector search) alongside a generative language model (like GPT). The process starts by converting a query into embeddings, retrieving relevant documents from a vector database, and feeding them to the language model, which then generates a coherent, informed response. This approach grounds outputs in real-world data, resulting in more reliable and detailed answers.\n### Chunking\nThe chunking step in Retrieval-Augmented Generation (RAG) involves breaking down large documents or data sources into smaller, manageable chunks. This is done to ensure that the retriever can efficiently search through large volumes of data while staying within the token or input limits of the model. Each chunk, typically a paragraph or section, is converted into an embedding, and these embeddings are stored in a vector database. When a query is made, the retriever searches for the most relevant chunks rather than the entire document, enabling faster and more accurate retrieval.\nhttps://dev.to/eteimz/understanding-langchains-recursivecharactertextsplitter-2846\n### Embedding\nIn Retrieval-Augmented Generation (RAG), embeddings are essential for linking information retrieval with natural language generation. Embeddings represent both the user query and documents as dense vectors in a shared space, enabling the system to retrieve relevant information based on similarity. This retrieved information is then fed into a generative model, such as GPT, to produce contextually informed and accurate responses. By using embeddings, RAG enhances the model's ability to generate content grounded in external knowledge, making it effective for tasks like question answering and summarization.\n### Vector Database\nWhen implementing Retrieval-Augmented Generation (RAG), a vector database is used to store and efficiently retrieve embeddings, which are vector representations of data like documents, images, or other knowledge sources. During the RAG process, when a query is made, the system converts it into an embedding and searches the vector database for the most relevant, similar embeddings (e.g., related documents or snippets). These retrieved pieces of information are then fed to a generative model, which uses them to produce a more accurate, context-aware response.\n### Retrieval Process\nThe retrieval process in Retrieval-Augmented Generation (RAG) involves finding relevant information from a large dataset or knowledge base to support the generation of accurate, context-aware responses. When a query is received, the system first converts it into a vector (embedding) and uses this vector to search a database of pre-indexed embeddings, identifying the most similar or relevant data points. Techniques like approximate nearest neighbor (ANN) search are often used to speed up this process.\n### Generation\nGeneration refers to the process where a generative language model, such as GPT, creates a response based on the information retrieved during the retrieval phase. After relevant documents or data snippets are identified using embeddings, they are passed to the generative model, which uses this information to produce coherent, context-aware, and informative responses. The retrieved content helps the model stay grounded and factual, enhancing its ability to answer questions, provide summaries, or engage in dialogue by combining retrieved knowledge with its natural language generation capabilities. This synergy between retrieval and generation makes RAG systems effective for tasks that require detailed, accurate, and contextually relevant outputs.\nhttps://towardsdatascience.com/how-to-implement-graph-rag-using-knowledge-graphs-and-vector-databases-60bb69a22759\n# Ways to implement RAG\n### Using SDKs Directly\nWhile tools like Langchain and LlamaIndex make it easy to implement RAG, you don't have to necessarily learn and use them. If you know about the different steps of implementing RAG you can simply do it all yourself e.g. do the chunking using `@langchain/textsplitters` package, create embeddings using any LLM e.g. use OpenAI Embedding API through their SDK, save the embeddings to any vector database e.g. if you are using Supabase Vector DB, you can use their SDK and similarly you can use the relevant SDKs for the rest of the steps as well.\n### Langchain\nLangChain is a development framework that simplifies building applications powered by language models, enabling seamless integration of multiple AI models and data sources. It focuses on creating chains, or sequences, of operations where language models can interact with databases, APIs, and other models to perform complex tasks. LangChain offers tools for prompt management, data retrieval, and workflow orchestration, making it easier to develop robust, scalable applications like chatbots, automated data analysis, and multi-step reasoning systems.\n### LlamaIndex\nLlamaIndex, formerly known as GPT Index, is a tool designed to facilitate the integration of large language models (LLMs) with structured and unstructured data sources. It acts as a data framework that helps developers build retrieval-augmented generation (RAG) applications by indexing various types of data, such as documents, databases, and APIs, enabling LLMs to query and retrieve relevant information efficiently.\n# RAG Usecases\nRetrieval-Augmented Generation (RAG) enhances applications like chatbots, customer support, and content summarization by combining information retrieval with language generation. It retrieves relevant data from a knowledge base and uses it to generate accurate, context-aware responses, making it ideal for tasks such as question answering, document generation, and semantic search. RAG's ability to ground outputs in real-world information leads to more reliable and informative results, improving user experience across various domains.\n# RAG vs Fine-tuning\nRAG (Retrieval-Augmented Generation) and fine-tuning are two approaches to enhancing language models, but they differ in methodology and use cases. Fine-tuning involves training a pre-trained model on a specific dataset to adapt it to a particular task, making it more accurate for that context but limited to the knowledge present in the training data. RAG, on the other hand, combines real-time information retrieval with generation, enabling the model to access up-to-date external data and produce contextually relevant responses. While fine-tuning is ideal for specialized, static tasks, RAG is better suited for dynamic tasks that require real-time, fact-based responses.\n# Implementing vector search\n### Indexing Embeddings\nEmbeddings are stored in a vector database by first converting data, such as text, images, or audio, into high-dimensional vectors using machine learning models. These vectors, also called embeddings, capture the semantic relationships and patterns within the data. Once generated, each embedding is indexed in the vector database along with its associated metadata, such as the original data (e.g., text or image) or an identifier. The vector database then organizes these embeddings to support efficient similarity searches, typically using techniques like approximate nearest neighbor (ANN) search.\n### Performing Similarity Search\nIn a similarity search, the process begins by converting the user's query (such as a piece of text or an image) into an embedding—a vector representation that captures the query's semantic meaning. This embedding is generated using a pre-trained model, such as BERT for text or a neural network for images. Once the query is converted into a vector, it is compared to the embeddings stored in the vector database.\n\nhttps://www.rungalileo.io/blog/mastering-rag-how-to-select-an-embedding-model\n\n*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Highlight from \"../../../components/Highlight\";\nimport Code from \"../../../components/Code\";\nimport Latex from \"../../../components/Latex\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    a: \"a\",\n    span: \"span\",\n    ol: \"ol\",\n    li: \"li\",\n    h4: \"h4\",\n    ul: \"ul\",\n    br: \"br\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, \"\\n\", React.createElement(\"br\"), \"\\n\", \"\\n\", React.createElement(_components.p, null, \"Retrieval-Augmented Generation (RAG) has emerged as one of the most compelling strategies for enhancing the factual grounding and contextual relevance of large language models (LLMs). The rapid growth in the capabilities of LLMs—such as GPT-based models, BERT derivatives, and other transformer-based architectures—has spurred research into strategies that leverage external knowledge sources. RAG is at the forefront of these efforts. By combining information retrieval with generative modeling, RAG can draw upon an external corpus (e.g., a vector database, knowledge graph, or curated document store) to supplement an LLM's internal learned representation. Hence, RAG helps LLMs produce answers that are not only fluent, coherent, and contextually holistic, but also significantly more factual and grounded in the latest knowledge.\"), \"\\n\", React.createElement(_components.p, null, \"In this article, I will explore the theoretical foundations of RAG, dive into the architectural components that constitute RAG-based pipelines, demonstrate step-by-step implementations (including various advanced techniques), discuss relevant open-source frameworks and state-of-the-art research, and compare RAG to other common approaches such as fine-tuning or knowledge distillation. My goal is to give you an in-depth, PhD-level understanding of RAG, covering everything from embedding-based retrieval algorithms to orchestrating multi-step interactions with large language models.\"), \"\\n\", React.createElement(_components.p, null, \"The core principle behind RAG is straightforward in theory: a large language model directly leverages external documents or data for context, instead of relying solely on the capacity of its internal parameters. But the actual implementation details can be quite intricate and require a deep understanding of vector databases, indexing, approximate nearest neighbor (ANN) search, chunking or segmentation of documents, and real-time orchestration with generative models.\"), \"\\n\", React.createElement(_components.p, null, \"Throughout this article, I will approach RAG from both theoretical and practical angles. On the theoretical side, I will examine how similarity measures in embedding spaces connect to the idea of retrieving semantically relevant pieces of information for the generative model. On the practical side, I will show typical code snippets in Python, referencing popular libraries and frameworks that implement RAG pipelines. I will also introduce advanced strategies like multi-query retrieval, memory augmentation, and specialized re-ranking methods, as well as discuss the potential pitfalls (e.g., hallucinations, mismatch in domain-specific embeddings, privacy or latency constraints) and how to mitigate them.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"background-and-context\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#background-and-context\",\n    \"aria-label\": \"background and context permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Background And Context\"), \"\\n\", React.createElement(_components.p, null, \"Before diving deeper, let me contextualize RAG's origins. Patrick Lewis and gang (2020) introduced the concept of retrieval-augmented generation to tackle knowledge-intensive NLP tasks. Their paper demonstrated that bridging retrieval techniques with generative models can outperform purely parametric approaches, including fully fine-tuned BERT and GPT variations, when the tasks demand factual accuracy and context. Since then, many follow-up works have expanded on RAG, exploring topics such as knowledge-grounded question answering, open-domain dialogue generation, or multi-turn reasoning.\"), \"\\n\", React.createElement(_components.p, null, \"The principle of RAG can be summarized as follows:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"User issues a query or prompt.\"), \"\\n\", React.createElement(_components.li, null, \"The system converts this query into an embedding using a dedicated or pretrained encoder.\"), \"\\n\", React.createElement(_components.li, null, \"A retrieval component (often an approximate nearest neighbor system) searches for relevant documents, text chunks, or knowledge items based on similarity to the query embedding.\"), \"\\n\", React.createElement(_components.li, null, \"The top-k retrieved items are appended (or fed in as separate structured context) to the prompt or model input.\"), \"\\n\", React.createElement(_components.li, null, \"The generative language model draws on both the provided context and its learned knowledge to generate a coherent answer.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"By reusing or updating the external knowledge source, the system retains continuous access to new or changing information, which significantly reduces the need for frequent re-training or fine-tuning. This property is immensely beneficial in dynamic domains—like finance, e-commerce, news monitoring, or corporate knowledge bases—where the underlying information can change rapidly.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"theoretical-foundation-of-retrieval-augmented-generation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#theoretical-foundation-of-retrieval-augmented-generation\",\n    \"aria-label\": \"theoretical foundation of retrieval augmented generation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Theoretical Foundation Of Retrieval-Augmented Generation\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"linking-retrieval-and-generation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#linking-retrieval-and-generation\",\n    \"aria-label\": \"linking retrieval and generation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Linking Retrieval And Generation\"), \"\\n\", React.createElement(_components.p, null, \"RAG's theoretical structure hinges on the composition of two principal modules: a retriever \", React.createElement(Latex, {\n    text: \"\\\\( R \\\\)\"\n  }), \" and a generator \", React.createElement(Latex, {\n    text: \"\\\\( G \\\\)\"\n  }), \". Formally, let \", React.createElement(Latex, {\n    text: \"\\\\( q \\\\)\"\n  }), \" be the user query. The retriever \", React.createElement(Latex, {\n    text: \"\\\\( R(q) \\\\)\"\n  }), \" produces a set of relevant documents or passages \", React.createElement(Latex, {\n    text: \"\\\\( \\\\{d_1, d_2, ..., d_k\\\\} \\\\)\"\n  }), \". The generator \", React.createElement(Latex, {\n    text: \"\\\\( G(q, \\\\{d_i\\\\}) \\\\)\"\n  }), \" is then tasked with producing a response \", React.createElement(Latex, {\n    text: \"\\\\( a \\\\)\"\n  }), \". Thus, we can define the process as:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\na = \\\\arg\\\\max_{a} p_G(a \\\\mid q, d_1, d_2, \\\\ldots, d_k)\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Here, \", React.createElement(Latex, {\n    text: \"\\\\( p_G \\\\)\"\n  }), \" indicates the probability distribution induced by the generative model.\"), \"\\n\", React.createElement(_components.p, null, \"The retrieved documents \", React.createElement(Latex, {\n    text: \"\\\\( \\\\{d_i\\\\} \\\\)\"\n  }), \" constitute external knowledge that augments the internal representation of the language model's parameters. Conceptually, best results arise when the retrieval subsystem is tightly coupled to the generative subsystem, such that the retrieved knowledge directly supports the generation process (Lewis and gang, 2020).\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"embedding-space-and-similarity-metrics\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#embedding-space-and-similarity-metrics\",\n    \"aria-label\": \"embedding space and similarity metrics permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Embedding Space And Similarity Metrics\"), \"\\n\", React.createElement(_components.p, null, \"Key to RAG is the idea that both queries and documents live in a (typically high-dimensional) embedding space where dot product, cosine similarity, or other distance metrics reflect semantic closeness. Let \", React.createElement(Latex, {\n    text: \"\\\\( x \\\\)\"\n  }), \" be a text fragment (which could be a user query or a chunk of a document). An embedding model \", React.createElement(Latex, {\n    text: \"\\\\( E(\\\\cdot) \\\\)\"\n  }), \" maps \", React.createElement(Latex, {\n    text: \"\\\\( x \\\\)\"\n  }), \" into a vector \", React.createElement(Latex, {\n    text: \"\\\\( \\\\mathbf{v} \\\\in \\\\mathbb{R}^n \\\\)\"\n  }), \". For example,\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\mathbf{v} = E(x),\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\( n \\\\)\"\n  }), \" could be on the order of hundreds or thousands, depending on the embedding model.\"), \"\\n\", React.createElement(_components.p, null, \"The retrieval step typically relies on searching among these vectors for the \", React.createElement(Latex, {\n    text: \"\\\\( k \\\\)\"\n  }), \" closest neighbors to the query's embedding \", React.createElement(Latex, {\n    text: \"\\\\( \\\\mathbf{v_q} = E(q) \\\\)\"\n  }), \". If \", React.createElement(Latex, {\n    text: \"\\\\( \\\\mathbf{v_d} \\\\)\"\n  }), \" is the embedding for a document chunk \", React.createElement(Latex, {\n    text: \"\\\\( d \\\\)\"\n  }), \", the similarity might be measured by the cosine similarity \", React.createElement(Latex, {\n    text: \"\\\\( \\\\cos(\\\\mathbf{v_q}, \\\\mathbf{v_d}) \\\\)\"\n  }), \" or the inner product \", React.createElement(Latex, {\n    text: \"\\\\( \\\\mathbf{v_q}^\\\\top \\\\mathbf{v_d} \\\\)\"\n  }), \". Across large corpora (potentially billions of documents), approximate nearest neighbor search algorithms (like Hierarchical Navigable Small World graphs, or product quantization methods) are vital in making retrieval at scale computationally tractable.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"probabilistic-modeling\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#probabilistic-modeling\",\n    \"aria-label\": \"probabilistic modeling permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Probabilistic Modeling\"), \"\\n\", React.createElement(_components.p, null, \"From a probabilistic standpoint, one might consider \", React.createElement(Latex, {\n    text: \"\\\\( p(d \\\\mid q) \\\\)\"\n  }), \" as the probability that a document \", React.createElement(Latex, {\n    text: \"\\\\( d \\\\)\"\n  }), \" is relevant to query \", React.createElement(Latex, {\n    text: \"\\\\( q \\\\)\"\n  }), \". In many RAG systems, \", React.createElement(Latex, {\n    text: \"\\\\( p(d \\\\mid q) \\\\)\"\n  }), \" is approximated by a function of the vector similarity \", React.createElement(Latex, {\n    text: \"\\\\( \\\\mathrm{sim}( E(q), E(d) ) \\\\)\"\n  }), \". Then, the final generation is shaped by:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\np(a \\\\mid q) = \\\\sum_{d \\\\in \\\\mathcal{D}} p_G(a \\\\mid q, d) \\\\, p(d \\\\mid q)\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\( \\\\mathcal{D} \\\\)\"\n  }), \" is the entire document corpus. Implementing this sum explicitly is infeasible for large corpora, but approximate top-k retrieval picks out the most probable (or relevant) documents to reduce the search space.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"key-components-of-a-rag-pipeline\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#key-components-of-a-rag-pipeline\",\n    \"aria-label\": \"key components of a rag pipeline permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Key Components Of A RAG Pipeline\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"retriever\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#retriever\",\n    \"aria-label\": \"retriever permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Retriever\"), \"\\n\", React.createElement(_components.p, null, \"At the heart of RAG resides the retriever, which surfaces the most relevant documents from a large corpus given a query. Typically, a retriever is built on an embedding model plus a vector database that indexes these embeddings. Some well-known vector databases include:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"FAISS (Facebook AI Similarity Search)\"), \"\\n\", React.createElement(_components.li, null, \"ScaNN (Scalable Nearest Neighbors by Google)\"), \"\\n\", React.createElement(_components.li, null, \"Annoy (Approximate Nearest Neighbors Oh Yeah)\"), \"\\n\", React.createElement(_components.li, null, \"Milvus\"), \"\\n\", React.createElement(_components.li, null, \"Pinecone\"), \"\\n\", React.createElement(_components.li, null, \"Chroma\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Each of these solutions provides different trade-offs in terms of CPU/GPU usage, indexing speed, memory requirements, and query latency.\"), \"\\n\", React.createElement(_components.p, null, \"Because the retriever is critical for final performance, one often invests in specialized training or fine-tuning for the retrieval module. For instance, models like DPR (Karpukhin and gang, 2020) or Contriever can yield advanced retrieval performance when dealing with domain-specific corpora.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"generator\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#generator\",\n    \"aria-label\": \"generator permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Generator\"), \"\\n\", React.createElement(_components.p, null, \"The generator is a large language model—for instance, a GPT-based architecture or T5—that takes not only the user's query but also the retrieved text chunks as context to produce a response. The generator typically has a limited context window (e.g., a few thousand tokens in GPT-style models), so thorough control of how the retrieved documents are appended, summarized, or re-encoded is crucial.\"), \"\\n\", React.createElement(_components.p, null, \"The generator might also rely on specialized input formatting. For instance, a prompt could look like:\"), \"\\n\", React.createElement(_components.p, null, \"\\\"User query: [Q]\", React.createElement(_components.br), \"\\n\", \"Context: [D1] [D2] [D3]\", React.createElement(_components.br), \"\\n\", \"Answer: …\\\"\"), \"\\n\", React.createElement(_components.p, null, \"Advanced frameworks like LangChain or LlamaIndex handle this prompt concatenation automatically, but if you are implementing RAG from scratch, you must be strategic about how you pass context to the model to avoid exceeding token limits or losing important details.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"chunking-document-splitting\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#chunking-document-splitting\",\n    \"aria-label\": \"chunking document splitting permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Chunking (Document Splitting)\"), \"\\n\", React.createElement(_components.p, null, \"Because documents can be very large and exceed typical context windows, the pipeline usually splits each document into smaller chunks of text. For instance, each chunk might be 200–500 words or tokens. Each chunk is then embedded independently, so that retrieval can be more fine-grained.\"), \"\\n\", React.createElement(_components.p, null, \"Chunking strategies vary. One might use:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Simple fixed-size segments (e.g., 256-token windows).\"), \"\\n\", React.createElement(_components.li, null, \"Semantic segmentation based on headings or paragraphs.\"), \"\\n\", React.createElement(_components.li, null, \"Recursive character/paragraph splitters that break text at logical boundaries.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"The chunk size profoundly impacts retrieval performance. Overly large chunks might reduce the precision of retrieval, while overly small chunks could lose context.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"vector-database-indexing-and-search\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#vector-database-indexing-and-search\",\n    \"aria-label\": \"vector database indexing and search permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Vector Database (Indexing And Search)\"), \"\\n\", React.createElement(_components.p, null, \"A vector database stores all the chunk embeddings and allows fast approximate nearest neighbor queries. Internally, it may employ indexing structures such as an inverted file system, a k-means-based product quantization, or HNSW-type graphs to achieve sub-linear search times.\"), \"\\n\", React.createElement(_components.p, null, \"When building a vector storage, the general steps are:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Ingest documents.\"), \"\\n\", React.createElement(_components.li, null, \"Split them into chunks.\"), \"\\n\", React.createElement(_components.li, null, \"Embed each chunk.\"), \"\\n\", React.createElement(_components.li, null, \"Insert these embeddings into a vector database, typically with metadata (e.g., chunk ID, source document, page number).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"At query time:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"The query is embedded.\"), \"\\n\", React.createElement(_components.li, null, \"The database returns the top-k most similar chunks.\"), \"\\n\", React.createElement(_components.li, null, \"Those chunks are fed into the generator model.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"orchestration-encapsulation-and-workflow\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#orchestration-encapsulation-and-workflow\",\n    \"aria-label\": \"orchestration encapsulation and workflow permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Orchestration: Encapsulation And Workflow\"), \"\\n\", React.createElement(_components.p, null, \"In a complete pipeline, the RAG steps need to be orchestrated. This can be done manually (by chaining together embedding, vector search, and generation calls in your code) or by using frameworks like:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(Highlight, null, \"LangChain\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"LlamaIndex\"), \"\\n\", React.createElement(_components.li, null, \"FastRAG\"), \"\\n\", React.createElement(_components.li, null, \"Haystack\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"These frameworks integrate data ingestion, chunking, embedding, retrieval, and generation steps under a uniform API, helping you quickly stand up RAG-based applications. They also offer convenient modules for memory (capturing conversation history), caching, tool usage (e.g. calling external APIs before generation), and advanced QA chaining.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"implementation-details\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#implementation-details\",\n    \"aria-label\": \"implementation details permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Implementation Details\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"building-a-minimal-rag-pipeline\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#building-a-minimal-rag-pipeline\",\n    \"aria-label\": \"building a minimal rag pipeline permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Building A Minimal RAG Pipeline\"), \"\\n\", React.createElement(_components.p, null, \"To illustrate the general structure of a RAG pipeline, I will now provide an example snippet in Python. This example uses a hypothetical embedding model (like OpenAI's embeddings API) and a vector database interface (like FAISS or Pinecone).\"), \"\\n\", React.createElement(Code, {\n    text: `\nimport os\nimport openai\nimport numpy as np\n\n# Hypothetical vector DB client, e.g. pinecone\nimport pinecone\n\n# Step 1: Chunking \ndef split_document_into_chunks(document, chunk_size=300):\n    words = document.split()\n    chunks = []\n    current_chunk = []\n    for word in words:\n        current_chunk.append(word)\n        if len(current_chunk) >= chunk_size:\n            chunks.append(\" \".join(current_chunk))\n            current_chunk = []\n    if current_chunk:\n        chunks.append(\" \".join(current_chunk))\n    return chunks\n\n# Step 2: Generating embeddings\n# We'll use OpenAI's embedding endpoint for demonstration\ndef get_embedding(text):\n    # This call requires your OpenAI API key to be set in openai.api_key\n    # e.g. openai.api_key = \"YOUR_KEY\"\n    response = openai.Embedding.create(\n        input=[text],\n        model=\"text-embedding-ada-002\"\n    )\n    vector = response['data'][0]['embedding']\n    return vector\n\n# Step 3: Indexing chunks in a vector store\ndef index_in_pinecone(chunks, index_name=\"my_index\"):\n    # Initialize Pinecone\n    pinecone.init(api_key=\"YOUR_API_KEY\", environment=\"us-east1-gcp\")\n    \n    # Create index if it doesn't exist\n    if index_name not in pinecone.list_indexes():\n        pinecone.create_index(index_name, dimension=1536)\n    \n    index = pinecone.Index(index_name)\n    \n    upserts = []\n    for i, chunk in enumerate(chunks):\n        chunk_vector = get_embedding(chunk)\n        upserts.append((str(i), chunk_vector, {\"text\": chunk}))\n    \n    index.upsert(vectors=upserts)\n\n# Step 4: Retrieval\ndef retrieve_chunks_from_pinecone(query, index_name=\"my_index\", top_k=3):\n    index = pinecone.Index(index_name)\n    query_vector = get_embedding(query)\n    results = index.query(vector=query_vector, top_k=top_k, include_metadata=True)\n    return [match[\"metadata\"][\"text\"] for match in results[\"matches\"]]\n\n# Step 5: Generation with retrieved context\ndef generate_answer(query):\n    # 1. Retrieve\n    relevant_chunks = retrieve_chunks_from_pinecone(query)\n    # 2. Form prompt\n    prompt = f\"User query: {query}\\\\nContext: {relevant_chunks}\\\\nAnswer:\"\n    \n    # 3. Use GPT for generation\n    completion = openai.Completion.create(\n        engine=\"text-davinci-003\",\n        prompt=prompt,\n        max_tokens=150\n    )\n    return completion.choices[0].text.strip()\n\n# Putting it all together:\nif __name__ == \"__main__\":\n    sample_document = \"Here is a long text about advanced machine learning, ...\n                       We also discuss concepts like RAG, MLOps, and so forth.\"\n    chunks = split_document_into_chunks(sample_document)\n    index_in_pinecone(chunks)\n    \n    user_query = \"What is RAG in the context of LLMs?\"\n    answer = generate_answer(user_query)\n    print(answer)\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"In this dummy example, I have illustrated how you might chunk a document, embed the chunks, store them in Pinecone, retrieve the top few matches for a query, and pass them into a GPT-based model. In a real production environment, you would likely refine each step, such as:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Using more sophisticated chunk splitting (by sentence or headings).\"), \"\\n\", React.createElement(_components.li, null, \"Caching embeddings so that you don't re-encode the same text repeatedly.\"), \"\\n\", React.createElement(_components.li, null, \"Performing additional logic to format or re-rank retrieved chunks.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Nevertheless, this general pattern is representative of many RAG systems.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"multi-hop-retrieval-and-re-ranking\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#multi-hop-retrieval-and-re-ranking\",\n    \"aria-label\": \"multi hop retrieval and re ranking permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Multi-Hop Retrieval And Re-Ranking\"), \"\\n\", React.createElement(_components.p, null, \"An advanced technique called multi-hop retrieval can address queries that require multiple reasoning steps or combining information from multiple chunks. In multi-hop retrieval, the system iteratively refines the query or expands the set of candidate documents. The newly retrieved documents at each step are used to formulate a subsequent query.\"), \"\\n\", React.createElement(_components.p, null, \"You can also incorporate re-ranking steps (similar to how cross-encoders function) to reorder the retrieved documents based on deeper semantic checks. Approaches like ColBERT or re-rankers fine-tuned on question-answer pairs might significantly improve retrieval precision.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"orchestration-frameworks\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#orchestration-frameworks\",\n    \"aria-label\": \"orchestration frameworks permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Orchestration Frameworks\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"langchain\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#langchain\",\n    \"aria-label\": \"langchain permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"LangChain\"), \"\\n\", React.createElement(_components.p, null, \"LangChain is one of the most popular frameworks for building end-to-end RAG pipelines. It allows you to define “chains” of prompts and connect them with broader retrieval or question-answer modules. It also integrates conversation “memory,” tool usage (including external APIs), and advanced prompting techniques.\"), \"\\n\", React.createElement(_components.p, null, \"LangChain's advantage lies in packaging many best practices for LLM usage into a single cohesive library. For instance, you can define a chain that first rewrites the user query to enhance retrieval, fetches top-k documents, and calls a second chain for summarization or final answer generation.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"llamaindex\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#llamaindex\",\n    \"aria-label\": \"llamaindex permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"LlamaIndex\"), \"\\n\", React.createElement(_components.p, null, \"LlamaIndex (formerly GPT Index) is similarly oriented toward retrieval-augmented tasks, but focuses heavily on indexing and building hierarchical or graph-based structures on top of your data. It can be used with a variety of LLMs and vector databases. LlamaIndex covers chunking, embedding, retrieval, and generation while still allowing you to customize each step.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"fastrag\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#fastrag\",\n    \"aria-label\": \"fastrag permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"FastRAG\"), \"\\n\", React.createElement(_components.p, null, \"FastRAG is an emerging library (Intel Labs) that emphasizes optimizing the retrieval-augmented pipeline for low-latency response times, employing advanced caching and model acceleration.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"rag-versus-fine-tuning\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#rag-versus-fine-tuning\",\n    \"aria-label\": \"rag versus fine tuning permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"RAG Versus Fine-Tuning\"), \"\\n\", React.createElement(_components.p, null, \"RAG is often contrasted with the more traditional approach of \", React.createElement(Highlight, null, \"fine-tuning\"), \", in which a language model is updated (via gradient-based training) on a domain-specific corpus or a given dataset. The difference can be summarized as follows:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(Highlight, null, \"Fine-Tuning:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"You effectively bake domain knowledge into the model's parameters.\"), \"\\n\", React.createElement(_components.li, null, \"The approach can yield excellent domain-specific results but tends to be static—once trained, the knowledge is frozen until a new fine-tuning round.\"), \"\\n\", React.createElement(_components.li, null, \"Can be expensive or infeasible for extremely large LLMs.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(Highlight, null, \"RAG:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"You keep the model's parameters fixed, but attach an external knowledge base or vector database.\"), \"\\n\", React.createElement(_components.li, null, \"Ensures up-to-date knowledge is always available, as you can update the external data store regularly without retraining the model.\"), \"\\n\", React.createElement(_components.li, null, \"May require well-engineered retrieval index structures to keep latency manageable.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"In many real-world scenarios, RAG is a more flexible approach: if your knowledge base changes frequently or must incorporate multiple data sources, it's usually more practical to retrieve from an updatable store than to re-train or fine-tune a large model from scratch.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"use-cases-and-applications\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#use-cases-and-applications\",\n    \"aria-label\": \"use cases and applications permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Use Cases And Applications\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Open-Domain Question Answering\"), \": RAG enables robust QA in scenarios where the answer to a question may lie in a large text corpus or website. As changes occur in the corpus, the system remains accurate without retraining.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Customer Support Chatbots\"), \": A RAG-based system can retrieve relevant knowledge base content (FAQs, policy documents, troubleshooting guides) and base its answers on up-to-date references, drastically reducing the risk of providing outdated information.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Enterprise Knowledge Management\"), \": In an enterprise setting, RAG can serve as a dynamic interface to large volumes of documents—memos, wikis, policy docs—without requiring elaborate data wrangling each time.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Scientific Literature Search\"), \": Researchers can query a database of academic papers by embedding user queries and retrieving relevant sections, prompting the language model to summarize or highlight key points.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"News And Trend Monitoring\"), \": Journalists or data analysts can retrieve the most relevant news fragments to unify them into a coherent storyline for real-time analysis.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Educational Applications\"), \": RAG-based tutoring systems can retrieve relevant textbooks or reference materials in real time, augmenting the knowledge of a base language model.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"evaluating-rag-based-systems\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#evaluating-rag-based-systems\",\n    \"aria-label\": \"evaluating rag based systems permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Evaluating RAG-Based Systems\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"retrieval-metrics\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#retrieval-metrics\",\n    \"aria-label\": \"retrieval metrics permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Retrieval Metrics\"), \"\\n\", React.createElement(_components.p, null, \"One part of evaluation focuses on retrieval quality. Common retrieval metrics include:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Recall@k: fraction of queries for which a relevant document is among the top-k retrieved results.\"), \"\\n\", React.createElement(_components.li, null, \"MRR (Mean Reciprocal Rank): measures how high in the ranking the first relevant document appears.\"), \"\\n\", React.createElement(_components.li, null, \"nDCG (Normalized Discounted Cumulative Gain): accounts for multiple relevance levels in ranking.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"For advanced domain-specific tasks, a manual annotation or gold-labeled set might be needed to measure how well retrieval is performing.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"generation-metrics\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#generation-metrics\",\n    \"aria-label\": \"generation metrics permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Generation Metrics\"), \"\\n\", React.createElement(_components.p, null, \"Once relevant documents are retrieved, the language model's generation is evaluated with metrics like:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Perplexity: how well the model predicts the observed text, though less common for open-ended tasks.\"), \"\\n\", React.createElement(_components.li, null, \"ROUGE/BLEU: measure textual overlap with a reference answer (used in summarization or QA).\"), \"\\n\", React.createElement(_components.li, null, \"Factual accuracy: specialized to check correctness of the produced statements (can be done partially with retrieval-based cross-checking).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"In knowledge-intensive tasks, human evaluation or specialized QA metrics often remain the gold standard to measure the “usefulness” and correctness of generated answers.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"holistic-end-to-end-evaluation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#holistic-end-to-end-evaluation\",\n    \"aria-label\": \"holistic end to end evaluation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Holistic End-To-End Evaluation\"), \"\\n\", React.createElement(_components.p, null, \"It is often practical to adopt pipeline-level metrics. For instance, a question-answering system can be scored on whether the final answer is correct, ignoring the intermediate question of which documents were retrieved. Tools like Ragas or DeepEval allow direct end-to-end QA evaluation and help diagnose where errors occur (retriever or generator).\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"potential-pitfalls-and-future-directions\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#potential-pitfalls-and-future-directions\",\n    \"aria-label\": \"potential pitfalls and future directions permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Potential Pitfalls And Future Directions\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Hallucinations\"), \": Even if relevant documents are retrieved, LLMs sometimes hallucinate or fabricate details. Careful prompt engineering and chain-of-thought checking can reduce but not eliminate this issue.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Domain-Specific Embeddings\"), \": If your corpus is domain-specific (e.g., legal texts, chemical patents), pretrained generalist embeddings may fail to accurately capture domain concepts. Fine-tuning or specialized embedding models can improve retrieval performance.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Latency And Scalability\"), \": Large corpora plus big LLMs can cause response delays. Strategies such as quantization, distillation, caching, and approximate nearest neighbor indexing are crucial for real-world viability.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Security And Privacy\"), \": Many RAG pipelines rely on external APIs for embedding or generation. Sensitive data might need to remain on-premises, prompting the search for private embedding models or self-hosted solutions.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Multilingual Retrieval\"), \": Substantial progress is still needed on multilingual RAG, where queries and documents may appear in multiple languages. Cross-lingual embedding approaches, such as LaBSE or multilingual MiniLM, can help unify the retrieval space.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Knowledge Graphs Integration\"), \": Some pipelines integrate knowledge graphs or relational data with embeddings for schema-aware retrieval. This approach can provide structured knowledge and improve interpretability, but requires more sophisticated indexing and retrieval logic.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Advanced Re-Ranking And Fusion Techniques\"), \": Future research is exploring how an LLM can dynamically re-rank or fuse multiple retrieved pieces of text, especially for multi-hop reasoning.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"example-code-snippets-for-advanced-features\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#example-code-snippets-for-advanced-features\",\n    \"aria-label\": \"example code snippets for advanced features permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Example Code Snippets For Advanced Features\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"multi-query-retrieval\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#multi-query-retrieval\",\n    \"aria-label\": \"multi query retrieval permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Multi-Query Retrieval\"), \"\\n\", React.createElement(_components.p, null, \"In multi-query retrieval, the system might reformulate the user's original query multiple times to capture different facets of the question. Below is a simplified demonstration:\"), \"\\n\", React.createElement(Code, {\n    text: `\ndef multi_query_retrieval(query, times=3):\n    # Step 1: Generate expansions or reformulations\n    # For domain-specific tasks, you might use a specialized LLM or rules\n    expansions = []\n    for i in range(times):\n        expansion_prompt = f\"Rephrase the query in a different way:\\nOriginal query: {query}\\nAlternative version #{i+1}:\"\n        completion = openai.Completion.create(engine=\"text-davinci-003\", prompt=expansion_prompt, max_tokens=50)\n        expansions.append(completion.choices[0].text.strip())\n    \n    # Step 2: Retrieve for each expansion\n    all_retrieved_chunks = []\n    for eq in expansions:\n        eq_chunks = retrieve_chunks_from_pinecone(eq, top_k=2)\n        all_retrieved_chunks.extend(eq_chunks)\n    \n    # De-duplicate or re-rank final chunks\n    unique_chunks = list(set(all_retrieved_chunks))\n    # Optionally run a re-ranking step\n    # ...\n    return unique_chunks\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"Here, I generate multiple expansions of the query. Each expansion is used to retrieve top-k results, and then all the retrieved chunks are merged and re-ranked. This approach sometimes unearths relevant documents that would be missed by a single retrieval query.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"integrating-summaries-or-distillation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#integrating-summaries-or-distillation\",\n    \"aria-label\": \"integrating summaries or distillation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Integrating Summaries Or Distillation\"), \"\\n\", React.createElement(_components.p, null, \"Instead of passing raw retrieved text to the generator, you can compress or summarize each chunk before final usage, especially when chunk sizes are large.\"), \"\\n\", React.createElement(Code, {\n    text: `\ndef summarize_chunk(chunk):\n    prompt = f\"Summarize this text in a concise paragraph:\\n{chunk}\\nSummary:\"\n    summary = openai.Completion.create(engine=\"text-davinci-003\", prompt=prompt, max_tokens=80)\n    return summary.choices[0].text.strip()\n\ndef retrieve_and_summarize(query, top_k=3):\n    chunks = retrieve_chunks_from_pinecone(query, top_k=top_k)\n    summaries = [summarize_chunk(ch) for ch in chunks]\n    return summaries\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"This ensures your final prompt to the LLM has more relevant coverage of multiple retrieved chunks while staying within the model's context window. Summarization can be performed through smaller or specialized language models to reduce cost and latency.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"conclusion\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Retrieval-Augmented Generation is an exciting, powerful paradigm for bridging the gap between massive language models and real-world knowledge. By harnessing vector embeddings, sophisticated indexing structures, and generative AI, RAG can provide accurate, context-aware, and up-to-date responses in domains where knowledge changes frequently. The synergy of retrieval and generation reduces the need for repeated fine-tuning, offers dynamic knowledge updates, and can significantly improve the reliability and factual grounding of LLM outputs.\"), \"\\n\", React.createElement(_components.p, null, \"From a theoretical perspective, RAG thrives on well-structured retrieval probabilities, advanced embedding models, and carefully orchestrated multi-step generation. In practical terms, developers face a suite of engineering challenges regarding text chunking, metadata management, latency, cost optimization, and data governance. Nonetheless, the ecosystem supporting RAG—from open-source frameworks like LangChain and LlamaIndex to commercial vector databases and HPC-optimized pipelines—is rapidly maturing.\"), \"\\n\", React.createElement(_components.p, null, \"Whether you are building enterprise chatbots, knowledge-driven question-answering systems, scientific literature discovery tools, or real-time data analysis platforms, RAG can be a cornerstone of a robust, future-proof solution. By leveraging RAG, I believe you can design LLM-powered services that truly reflect the latest information and deliver domain-specific insights with precision, clarity, and trustworthiness.\"), \"\\n\", React.createElement(_components.p, null, \"If you are keen to expand these ideas further, consider exploring next-generation retrieval systems (e.g., dense passage retrieval with domain adaptation, knowledge graphs, or retrieval with advanced re-ranking), investigating advanced multi-hop or multi-turn retrieval strategies, or experimenting with specialized hardware acceleration for large-scale deployments. RAG stands at the intersection of cutting-edge NLP, IR (Information Retrieval), and knowledge management—a nexus that I expect will continue evolving swiftly in the coming years.\"), \"\\n\", React.createElement(_components.p, null, \"I encourage you to experiment with the code snippets, adapt them to your domain, and keep a close eye on new developments in the broader IR and generative AI research communities. Bringing retrieval augmentation fully into the LLM workflow can unlock unprecedented potential for real-time knowledge assimilation, bridging the gap between static parametric knowledge and the ever-changing world of information.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/avrtt/Repos/avrtt.github.io/src/pages/posts/research/rag_for_llms.mdx\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React, {useState, useEffect} from 'react';\nimport {useSiteMetadata} from \"../hooks/useSiteMetadata\";\nimport RemoveMarkdown from 'remove-markdown';\nimport {ImageContext} from '../context/ImageContext';\nimport {MDXProvider} from '@mdx-js/react';\nimport Image from '../components/PostImage';\nimport {motion} from 'framer-motion';\nimport SEO from \"../components/seo\";\nimport PostBanner from '../components/PostBanner';\nimport PostBottom from '../components/PostBottom';\nimport {wordsPerMinuteAdventures, wordsPerMinuteResearch, wordsPerMinuteThoughts} from '../data/commonVariables';\nimport PartOfCourseNotice from \"../components/PartOfCourseNotice\";\nimport * as stylesButtonsCommon from \"../styles/buttons_common.module.scss\";\nimport * as stylesCustomPostLayouts from \"../styles/custom_post_layouts.module.scss\";\nimport * as stylesTableOfContents from \"../styles/table_of_contents.module.scss\";\nimport * as stylesTagBadges from \"../styles/tag_badges.module.scss\";\nfunction formatReadTime(minutes) {\n  if (minutes <= 10) return '~10 min';\n  if (minutes <= 20) return '~20 min';\n  if (minutes <= 30) return '~30 min';\n  if (minutes <= 40) return '~40 min';\n  if (minutes <= 50) return '~50 min';\n  if (minutes <= 60) return '~1 h';\n  const hours = Math.floor(minutes / 60);\n  const remainder = minutes % 60;\n  if (remainder <= 30) {\n    return `~${hours}${remainder > 0 ? '.5' : ''} h`;\n  }\n  return `~${hours + 1} h`;\n}\nconst TableOfContents = _ref => {\n  let {toc} = _ref;\n  if (!toc || !toc.items) return null;\n  const handleClick = (e, url) => {\n    e.preventDefault();\n    const targetId = url.replace('#', '');\n    const targetElement = document.getElementById(targetId);\n    if (targetElement) {\n      targetElement.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }\n  };\n  return React.createElement(\"nav\", {\n    className: stylesTableOfContents.toc\n  }, React.createElement(\"ul\", null, toc.items.map((item, index) => React.createElement(\"li\", {\n    key: index\n  }, React.createElement(\"a\", {\n    href: item.url,\n    onClick: e => handleClick(e, item.url)\n  }, item.title), item.items && React.createElement(TableOfContents, {\n    toc: {\n      items: item.items\n    }\n  })))));\n};\nexport function PostTemplate(_ref2) {\n  let {data: {mdx, allMdx, allPostImages}, children} = _ref2;\n  const {frontmatter, body, tableOfContents} = mdx;\n  const index = frontmatter.index;\n  const slug = frontmatter.slug;\n  const section = slug.split('/')[1];\n  const posts = allMdx.nodes.filter(post => post.frontmatter.slug.includes(`/${section}/`));\n  const sortedPosts = posts.sort((a, b) => a.frontmatter.index - b.frontmatter.index);\n  const currentIndex = sortedPosts.findIndex(post => post.frontmatter.index === index);\n  const nextPost = sortedPosts[currentIndex + 1];\n  const lastPost = sortedPosts[currentIndex - 1];\n  const trimmedSlug = frontmatter.slug.replace(/\\/$/, '');\n  const keyCurrent = (/[^/]*$/).exec(trimmedSlug)[0];\n  const basePath = `posts/${section}/content/${keyCurrent}/`;\n  const {0: isWideLayout, 1: setIsWideLayout} = useState(frontmatter.flagWideLayoutByDefault);\n  const {0: isAnimating, 1: setIsAnimating} = useState(false);\n  const toggleLayout = () => {\n    setIsWideLayout(!isWideLayout);\n  };\n  useEffect(() => {\n    setIsAnimating(true);\n    const timer = setTimeout(() => setIsAnimating(false), 340);\n    return () => clearTimeout(timer);\n  }, [isWideLayout]);\n  var wordsPerMinute;\n  if (section === \"adventures\") {\n    wordsPerMinute = wordsPerMinuteAdventures;\n  } else if (section === \"research\") {\n    wordsPerMinute = wordsPerMinuteResearch;\n  } else if (section === \"thoughts\") {\n    wordsPerMinute = wordsPerMinuteThoughts;\n  }\n  const plainTextBody = RemoveMarkdown(body).replace(/import .*? from .*?;/g, '').replace(/<.*?>/g, '').replace(/\\{\\/\\*[\\s\\S]*?\\*\\/\\}/g, '').trim();\n  const wordCount = plainTextBody.split(/\\s+/).length;\n  const baseReadTimeMinutes = Math.ceil(wordCount / wordsPerMinute);\n  const extraTime = frontmatter.extraReadTimeMin || 0;\n  const totalReadTime = baseReadTimeMinutes + extraTime;\n  const readTime = formatReadTime(totalReadTime);\n  const notices = [{\n    flag: frontmatter.flagDraft,\n    component: () => import(\"../components/NotFinishedNotice\")\n  }, {\n    flag: frontmatter.flagMindfuckery,\n    component: () => import(\"../components/MindfuckeryNotice\")\n  }, {\n    flag: frontmatter.flagRewrite,\n    component: () => import(\"../components/RewriteNotice\")\n  }, {\n    flag: frontmatter.flagOffensive,\n    component: () => import(\"../components/OffensiveNotice\")\n  }, {\n    flag: frontmatter.flagProfane,\n    component: () => import(\"../components/ProfanityNotice\")\n  }, {\n    flag: frontmatter.flagMultilingual,\n    component: () => import(\"../components/MultilingualNotice\")\n  }, {\n    flag: frontmatter.flagUnreliably,\n    component: () => import(\"../components/UnreliablyNotice\")\n  }, {\n    flag: frontmatter.flagPolitical,\n    component: () => import(\"../components/PoliticsNotice\")\n  }, {\n    flag: frontmatter.flagCognitohazard,\n    component: () => import(\"../components/CognitohazardNotice\")\n  }, {\n    flag: frontmatter.flagHidden,\n    component: () => import(\"../components/HiddenNotice\")\n  }];\n  const {0: loadedNotices, 1: setLoadedNotices} = useState([]);\n  useEffect(() => {\n    notices.forEach(_ref3 => {\n      let {flag, component} = _ref3;\n      if (flag) {\n        component().then(module => {\n          setLoadedNotices(prev => [].concat(_toConsumableArray(prev), [module.default]));\n        });\n      }\n    });\n  }, []);\n  return React.createElement(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.15\n    }\n  }, React.createElement(PostBanner, {\n    postNumber: frontmatter.index,\n    date: frontmatter.date,\n    updated: frontmatter.updated,\n    readTime: readTime,\n    difficulty: frontmatter.difficultyLevel,\n    title: frontmatter.title,\n    desc: frontmatter.desc,\n    banner: frontmatter.banner,\n    section: section,\n    postKey: keyCurrent,\n    isMindfuckery: frontmatter.flagMindfuckery,\n    mainTag: frontmatter.mainTag\n  }), React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      flexWrap: \"wrap\",\n      maxWidth: \"75%\",\n      marginLeft: \"auto\",\n      paddingRight: \"1vw\",\n      marginTop: \"-6vh\",\n      marginBottom: \"4vh\"\n    }\n  }, frontmatter.otherTags.map((tag, index) => React.createElement(\"span\", {\n    key: index,\n    className: `noselect ${stylesTagBadges.tagPosts}`,\n    style: {\n      margin: \"0 5px 5px 0\"\n    }\n  }, tag))), React.createElement(\"div\", {\n    className: \"postBody\"\n  }, React.createElement(TableOfContents, {\n    toc: tableOfContents\n  })), React.createElement(\"br\", null), React.createElement(\"div\", {\n    style: {\n      margin: \"0 10% -2vh 30%\",\n      textAlign: \"right\"\n    }\n  }, React.createElement(motion.button, {\n    className: `noselect ${stylesCustomPostLayouts.postButton}`,\n    id: stylesCustomPostLayouts.postLayoutSwitchButton,\n    onClick: toggleLayout,\n    whileTap: {\n      scale: 0.93\n    }\n  }, React.createElement(motion.div, {\n    className: stylesButtonsCommon.buttonTextWrapper,\n    key: isWideLayout,\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.3,\n      ease: \"easeInOut\"\n    }\n  }, isWideLayout ? \"Switch to default layout\" : \"Switch to wide layout\"))), React.createElement(\"br\", null), React.createElement(\"div\", {\n    className: \"postBody\",\n    style: {\n      margin: isWideLayout ? \"0 -14%\" : \"\",\n      maxWidth: isWideLayout ? \"200%\" : \"\",\n      transition: \"margin 1s ease, max-width 1s ease, padding 1s ease\"\n    }\n  }, React.createElement(\"div\", {\n    className: `${stylesCustomPostLayouts.textContent} ${isAnimating ? stylesCustomPostLayouts.fadeOut : stylesCustomPostLayouts.fadeIn}`\n  }, loadedNotices.map((NoticeComponent, index) => React.createElement(NoticeComponent, {\n    key: index\n  })), frontmatter.indexCourse ? React.createElement(PartOfCourseNotice, {\n    index: frontmatter.indexCourse,\n    category: frontmatter.courseCategoryName\n  }) : \"\", React.createElement(ImageContext.Provider, {\n    value: {\n      images: allPostImages.nodes,\n      basePath: basePath.replace(/\\/$/, '') + '/'\n    }\n  }, React.createElement(MDXProvider, {\n    components: {\n      Image\n    }\n  }, children)))), React.createElement(PostBottom, {\n    nextPost: nextPost,\n    lastPost: lastPost,\n    keyCurrent: keyCurrent,\n    section: section\n  }));\n}\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport function Head(_ref4) {\n  var _frontmatter$banner, _frontmatter$banner$c, _frontmatter$banner$c2, _frontmatter$banner$c3, _frontmatter$banner$c4;\n  let {data} = _ref4;\n  const {frontmatter} = data.mdx;\n  const title = frontmatter.titleSEO || frontmatter.title;\n  const titleOG = frontmatter.titleOG || title;\n  const titleTwitter = frontmatter.titleTwitter || title;\n  const description = frontmatter.descSEO || frontmatter.desc;\n  const descriptionOG = frontmatter.descOG || description;\n  const descriptionTwitter = frontmatter.descTwitter || description;\n  const schemaType = frontmatter.schemaType || \"BlogPosting\";\n  const keywords = frontmatter.keywordsSEO;\n  const datePublished = frontmatter.date;\n  const dateModified = frontmatter.updated || datePublished;\n  const imageOG = frontmatter.imageOG || ((_frontmatter$banner = frontmatter.banner) === null || _frontmatter$banner === void 0 ? void 0 : (_frontmatter$banner$c = _frontmatter$banner.childImageSharp) === null || _frontmatter$banner$c === void 0 ? void 0 : (_frontmatter$banner$c2 = _frontmatter$banner$c.gatsbyImageData) === null || _frontmatter$banner$c2 === void 0 ? void 0 : (_frontmatter$banner$c3 = _frontmatter$banner$c2.images) === null || _frontmatter$banner$c3 === void 0 ? void 0 : (_frontmatter$banner$c4 = _frontmatter$banner$c3.fallback) === null || _frontmatter$banner$c4 === void 0 ? void 0 : _frontmatter$banner$c4.src);\n  const imageAltOG = frontmatter.imageAltOG || descriptionOG;\n  const imageTwitter = frontmatter.imageTwitter || imageOG;\n  const imageAltTwitter = frontmatter.imageAltTwitter || descriptionTwitter;\n  const canonicalUrl = frontmatter.canonicalURL;\n  const flagHidden = frontmatter.flagHidden || false;\n  const mainTag = frontmatter.mainTag || \"Posts\";\n  const section = frontmatter.slug.split('/')[1] || \"posts\";\n  const type = \"article\";\n  const {siteUrl} = useSiteMetadata();\n  const breadcrumbJSON = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    \"itemListElement\": [{\n      \"@type\": \"ListItem\",\n      \"position\": 1,\n      \"name\": \"Home\",\n      \"item\": siteUrl\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 2,\n      \"name\": mainTag,\n      \"item\": `${siteUrl}/${frontmatter.slug.split('/')[1]}`\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 3,\n      \"name\": title,\n      \"item\": `${siteUrl}${frontmatter.slug}`\n    }]\n  };\n  return React.createElement(SEO, {\n    title: title + \" - avrtt.blog\",\n    titleOG: titleOG,\n    titleTwitter: titleTwitter,\n    description: description,\n    descriptionOG: descriptionOG,\n    descriptionTwitter: descriptionTwitter,\n    schemaType: schemaType,\n    keywords: keywords,\n    datePublished: datePublished,\n    dateModified: dateModified,\n    imageOG: imageOG,\n    imageAltOG: imageAltOG,\n    imageTwitter: imageTwitter,\n    imageAltTwitter: imageAltTwitter,\n    canonicalUrl: canonicalUrl,\n    flagHidden: flagHidden,\n    mainTag: mainTag,\n    section: section,\n    type: type\n  }, React.createElement(\"script\", {\n    type: \"application/ld+json\"\n  }, JSON.stringify(breadcrumbJSON)));\n}\nconst query = \"2571018839\";\n","/* \n\nCopyright © 2022  Vladislav Averett (avrtt)\nDistributed under the GNU AGPLv3 license. For details and source code, please refer to <https://github.com/avrtt/avrtt.github.io>.\n\n*/\n\nimport React from \"react\";\nimport Latex from 'react-latex-next';\nimport 'katex/dist/katex.min.css'; \n\ninterface LatexProps {\n  text: string;\n}\n  \nconst L = ({ text }: LatexProps) => {\n  return (\n    <Latex>{text}</Latex>\n  );\n};\nexport default L;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h3","a","span","ol","li","h4","ul","br","strong","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","Latex","text","Highlight","Code","wrapper","MDXLayout","TableOfContents","_ref","toc","items","stylesTableOfContents","map","item","index","key","url","onClick","e","handleClick","preventDefault","targetId","replace","targetElement","document","getElementById","scrollIntoView","behavior","block","title","PostTemplate","_ref2","data","mdx","allMdx","allPostImages","children","frontmatter","body","tableOfContents","section","slug","split","sortedPosts","nodes","filter","post","includes","sort","b","currentIndex","findIndex","nextPost","lastPost","trimmedSlug","keyCurrent","exec","basePath","isWideLayout","setIsWideLayout","useState","flagWideLayoutByDefault","isAnimating","setIsAnimating","wordsPerMinute","useEffect","timer","setTimeout","clearTimeout","wordsPerMinuteAdventures","wordsPerMinuteResearch","wordsPerMinuteThoughts","wordCount","RemoveMarkdown","trim","length","readTime","minutes","hours","Math","floor","remainder","formatReadTime","ceil","extraReadTimeMin","notices","flag","flagDraft","component","flagMindfuckery","flagRewrite","flagOffensive","flagProfane","flagMultilingual","flagUnreliably","flagPolitical","flagCognitohazard","flagHidden","loadedNotices","setLoadedNotices","forEach","_ref3","then","module","prev","concat","_toConsumableArray","default","motion","div","initial","opacity","animate","exit","transition","duration","PostBanner","postNumber","date","updated","difficulty","difficultyLevel","desc","banner","postKey","isMindfuckery","mainTag","display","justifyContent","flexWrap","maxWidth","marginLeft","paddingRight","marginTop","marginBottom","otherTags","tag","stylesTagBadges","margin","textAlign","button","stylesCustomPostLayouts","toggleLayout","whileTap","scale","stylesButtonsCommon","ease","NoticeComponent","indexCourse","PartOfCourseNotice","category","courseCategoryName","ImageContext","Provider","value","images","MDXProvider","Image","PostBottom","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref4","_frontmatter$banner","_frontmatter$banner$c","_frontmatter$banner$c2","_frontmatter$banner$c3","_frontmatter$banner$c4","titleSEO","titleOG","titleTwitter","description","descSEO","descriptionOG","descOG","descriptionTwitter","descTwitter","schemaType","keywords","keywordsSEO","datePublished","dateModified","imageOG","childImageSharp","gatsbyImageData","fallback","src","imageAltOG","imageTwitter","imageAltTwitter","canonicalUrl","canonicalURL","siteUrl","useSiteMetadata","breadcrumbJSON","SEO","type","JSON","stringify"],"sourceRoot":""}