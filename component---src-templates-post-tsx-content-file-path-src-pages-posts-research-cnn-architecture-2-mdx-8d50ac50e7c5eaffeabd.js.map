{"version":3,"file":"component---src-templates-post-tsx-content-file-path-src-pages-posts-research-cnn-architecture-2-mdx-8d50ac50e7c5eaffeabd.js","mappings":"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","sources":["webpack://avrtt.blog/./src/pages/posts/research/cnn_architecture_2.mdx","webpack://avrtt.blog/./src/templates/post.tsx","webpack://avrtt.blog/./src/components/Latex/index.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\n/**(intro: a quote, catchphrase, joke, etc.)**/\n/*\n\n[https://www.youtube.com/watch?v=IYxU985meTM&list=PLA0M1Bcd0w8yv0XGiF1wjerjSZVSrYbjh&index=17](https://www.youtube.com/watch?v=IYxU985meTM&list=PLA0M1Bcd0w8yv0XGiF1wjerjSZVSrYbjh&index=17)\n\n*/\n/*\n\n1. LeNet\nDetails and architecture of LeNet\nUse cases\nAdvantages and disadvantages of LeNet\nStep-by-step implementation of LeNet (TensorFlow/Keras)\n2. AlexNet\nDetails and architecture of AlexNet\nUse cases\nAdvantages and disadvantages of AlexNet\nStep-by-step implementation of AlexNet (TensorFlow/Keras)\n3. VGGNet\nDetails and architecture of VGGNet\nUse cases\nAdvantages and disadvantages of VGGNet\nVGG-16, VGG-19\nStep-by-step implementation of VGGNet (TensorFlow/Keras)\n4. MobileNet\nDetails and architecture of MobileNet\nUse cases\nAdvantages and disadvantages of MobileNet\nStep-by-step implementation of MobileNet (TensorFlow/Keras)\n5. Network in Network (NiN)\n6. Residual connections\n7. Inception modules\n8. Depthwise separable convolutions\n9. Dilated convolutions\n10. Grouped convolutions\n11. Deployment and optimization\nModel compression (pruning, quantization)\nGPU/TPU acceleration\nDistributed training\nReal-world deployment challenges\nConclusion for the article\n\n*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Highlight from \"../../../components/Highlight\";\nimport Code from \"../../../components/Code\";\nimport Latex from \"../../../components/Latex\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    h3: \"h3\",\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    ul: \"ul\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components), {Image} = _components;\n  if (!Image) _missingMdxReference(\"Image\", true);\n  return React.createElement(React.Fragment, null, \"\\n\", React.createElement(\"br\"), \"\\n\", \"\\n\", \"\\n\", React.createElement(_components.h2, {\n    id: \"lenet\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#lenet\",\n    \"aria-label\": \"lenet permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"LeNet\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"details-and-architecture-of-lenet\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#details-and-architecture-of-lenet\",\n    \"aria-label\": \"details and architecture of lenet permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Details and architecture of lenet\"), \"\\n\", React.createElement(_components.p, null, \"LeNet is considered one of the earliest successful convolutional neural network architectures, introduced by Yann LeCun and colleagues in the late 1980s and early 1990s (LeCun and gang, Proceedings of the IEEE, 1998). Although the original design has undergone multiple revisions and naming conventions (e.g., LeNet-1, LeNet-4, LeNet-5), the commonly referenced and most canonical form is LeNet-5. This network was originally devised to perform handwritten digit recognition on the MNIST dataset, which is a staple benchmark for image classification tasks in machine learning education.\"), \"\\n\", React.createElement(_components.p, null, \"The fundamental idea behind LeNet rests on the fact that images (especially handwritten digits) have locally correlated features, and employing specialized layers that exploit these local features — namely convolution and subsampling (pooling) — can yield robust representations that are more invariant to shifts and distortions than a generic, fully connected network. The architecture is substantially simpler compared to more modern networks such as AlexNet or VGG, but the same key building blocks introduced by LeNet, like convolution, pooling, and fully connected layers at the output, remain cornerstones of today's CNNs.\"), \"\\n\", React.createElement(_components.p, null, \"A typical LeNet-5 architecture is comprised of:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Input layer\"), \": Accepts the input image, commonly 32<times32 pixels, although the actual images in the MNIST dataset are 28<times28. Often, zero-padding or other transformations are used to fit the input dimension.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Convolutional layer (C1)\"), \": Learns local features by sliding filters (or kernels) across the spatial dimension of the image.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Subsampling layer (S2)\"), \": Often referred to as a pooling layer, typically using average pooling or max pooling to reduce spatial dimensions and thus reduce the number of parameters, while retaining the most important information. Pooling also makes the representation somewhat invariant to small translations.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Convolutional layer (C3)\"), \": Learns higher-level features.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Subsampling layer (S4)\"), \": Another pooling step to further reduce dimensionality.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Fully connected layers (F5, output layer)\"), \": The extracted feature maps are flattened and passed to fully connected layers to produce the final classification probabilities.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Unlike some more recent designs, LeNet commonly uses fewer channels, smaller filter sizes, and simpler activation functions (historically, tanh rather than ReLU). A typical LeNet-5 design uses \", React.createElement(Latex, {\n    text: \"\\\\(5 \\\\times 5\\\\)\"\n  }), \" filters in the convolutional layers, with around 6 to 16 filters in earlier versions, though these numbers can vary slightly across different retellings and expansions of the architecture.\"), \"\\n\", React.createElement(_components.p, null, \"Below is a high-level illustration that captures the essence of LeNet:\"), \"\\n\", React.createElement(Image, {\n    alt: \"LeNet architecture diagram\",\n    path: \"\",\n    caption: \"A high-level schematic of the LeNet architecture. Notice the alternating convolution and pooling layers, culminating in fully connected layers.\",\n    zoom: \"false\"\n  }), \"\\n\", React.createElement(_components.p, null, \"In formal terms, the 2D convolution operation performed by a kernel \", React.createElement(Latex, {\n    text: \"\\\\(K\\\\)\"\n  }), \" on an image (or feature map) \", React.createElement(Latex, {\n    text: \"\\\\(I\\\\)\"\n  }), \" at location \", React.createElement(Latex, {\n    text: \"\\\\((x, y)\\\\)\"\n  }), \" can be expressed as:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n(\\\\text{Conv}(I, K))(x, y) = \\\\sum_{a=-\\\\alpha}^{\\\\alpha} \\\\sum_{b=-\\\\beta}^{\\\\beta} I(x+a, y+b)\\\\,K(a, b),\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where \", React.createElement(Latex, {\n    text: \"\\\\(2\\\\alpha+1\\\\)\"\n  }), \" and \", React.createElement(Latex, {\n    text: \"\\\\(2\\\\beta+1\\\\)\"\n  }), \" are the filter dimensions (for a \", React.createElement(Latex, {\n    text: \"\\\\(5 \\\\times 5\\\\)\"\n  }), \" kernel, \", React.createElement(Latex, {\n    text: \"\\\\(\\\\alpha = 2\\\\)\"\n  }), \" and \", React.createElement(Latex, {\n    text: \"\\\\(\\\\beta = 2\\\\)\"\n  }), \"). Each such convolutional filter effectively extracts a certain type of local pattern. Pooling (subsampling) is often defined as either an average or maximum over a local neighborhood, for instance:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n(\\\\text{Pool}_{\\\\text{avg}}(M))(x, y) = \\\\frac{1}{k^2} \\\\sum_{a=0}^{k-1}\\\\sum_{b=0}^{k-1} M(x \\\\times k + a, y \\\\times k + b),\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"if you are using average pooling with a pool size \", React.createElement(Latex, {\n    text: \"\\\\(k \\\\times k\\\\)\"\n  }), \".\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"use-cases\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#use-cases\",\n    \"aria-label\": \"use cases permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Use cases\"), \"\\n\", React.createElement(_components.p, null, \"Initially, LeNet was proposed for character recognition tasks. Specifically, it was used to read digits on bank checks, which was a major application of early CNNs in the 1990s. Although modern tasks commonly deal with more complex data with higher resolution, LeNet (especially in the form of LeNet-5) remains a standard introductory example due to its simplicity and relatively small number of parameters. Typical uses include:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Handwritten digit recognition\"), \" (MNIST, USPS datasets).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Introductory labs\"), \" in courses that teach fundamental CNN concepts, because the network is easy to train on a CPU and converges quickly.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Proof-of-concept\"), \" tasks, where one wants to experiment with a minimal CNN architecture before scaling up.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"advantages-and-disadvantages-of-lenet\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#advantages-and-disadvantages-of-lenet\",\n    \"aria-label\": \"advantages and disadvantages of lenet permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Advantages and disadvantages of lenet\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Advantages\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Straightforward design: Easy to implement and interpret.\"), \"\\n\", React.createElement(_components.li, null, \"Low computational cost: Suitable for low-end hardware or demonstration purposes.\"), \"\\n\", React.createElement(_components.li, null, \"Historically significant: A great model to illustrate the basic mechanics of CNNs.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Disadvantages\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Limited capacity: Not well-suited for large-scale, high-resolution image classification tasks.\"), \"\\n\", React.createElement(_components.li, null, \"Outdated design: Modern activation functions (like ReLU) and deeper networks (with significantly more layers) often provide superior performance for more complex tasks.\"), \"\\n\", React.createElement(_components.li, null, \"Not flexible: The network's dimension assumptions can make it less straightforward to adapt to varying input sizes without modifications.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"step-by-step-implementation-of-lenet-tensorflowkeras\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#step-by-step-implementation-of-lenet-tensorflowkeras\",\n    \"aria-label\": \"step by step implementation of lenet tensorflowkeras permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Step-by-step implementation of lenet (tensorflow/keras)\"), \"\\n\", React.createElement(_components.p, null, \"Below is a minimal example of how one might implement a LeNet-like architecture in TensorFlow/Keras. The code is simplified for educational purposes, but it captures the core structure of LeNet-5:\"), \"\\n\", React.createElement(Code, {\n    text: `\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models\n\ndef create_lenet(input_shape=(32, 32, 1), num_classes=10):\n    # Initialize a sequential model\n    model = models.Sequential()\n\n    # First convolutional layer (6 filters, 5x5 kernel, tanh activation historically, \n    # but often replaced with ReLU in modern variants)\n    model.add(layers.Conv2D(filters=6, kernel_size=(5, 5), activation='tanh', \n                            input_shape=input_shape, padding='valid'))\n    \n    # Subsampling layer (average pooling or max pooling)\n    model.add(layers.AveragePooling2D(pool_size=(2, 2)))\n    \n    # Second convolutional layer (16 filters, 5x5 kernel, tanh activation)\n    model.add(layers.Conv2D(filters=16, kernel_size=(5, 5), activation='tanh'))\n    \n    # Another subsampling layer\n    model.add(layers.AveragePooling2D(pool_size=(2, 2)))\n    \n    # Flatten the feature maps before passing to fully connected layers\n    model.add(layers.Flatten())\n    \n    # Fully connected layer (120 units)\n    model.add(layers.Dense(120, activation='tanh'))\n    \n    # Another fully connected layer (84 units)\n    model.add(layers.Dense(84, activation='tanh'))\n    \n    # Output layer with softmax activation for classification\n    model.add(layers.Dense(num_classes, activation='softmax'))\n    \n    return model\n\n# Example usage:\nif __name__ == '__main__':\n    lenet_model = create_lenet()\n    lenet_model.compile(\n        optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n        loss='sparse_categorical_crossentropy',\n        metrics=['accuracy']\n    )\n    lenet_model.summary()\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"In the snippet above, I have preserved the spirit of LeNet by choosing tanh activations and average pooling. Nonetheless, one can replace tanh with ReLU or average pooling with max pooling to obtain a slightly more contemporary variant. The fundamental structure, however, remains quintessentially LeNet.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"alexnet\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#alexnet\",\n    \"aria-label\": \"alexnet permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"AlexNet\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"details-and-architecture-of-alexnet\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#details-and-architecture-of-alexnet\",\n    \"aria-label\": \"details and architecture of alexnet permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Details and architecture of alexnet\"), \"\\n\", React.createElement(_components.p, null, \"AlexNet, introduced by Krizhevsky and gang (NIPS 2012), was a groundbreaking network architecture that revitalized interest in deep learning for computer vision tasks. Trained on the large-scale ImageNet dataset, which contains over a million labeled images across 1,000 categories, AlexNet demonstrated a substantial performance leap compared to traditional computer vision pipelines or shallower neural networks.\"), \"\\n\", React.createElement(_components.p, null, \"Key insights that made AlexNet a breakthrough model include:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Deeper architecture\"), \": AlexNet has more layers and many more parameters than earlier CNNs like LeNet. This contributes to its capacity to learn complex patterns.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"ReLU activation\"), \": The network extensively uses the rectified linear unit (ReLU), \", React.createElement(Latex, {\n    text: \"\\\\( \\\\text{ReLU}(x) = \\\\max(0, x) \\\\)\"\n  }), \", which helps mitigate vanishing gradients, accelerating convergence.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"GPU training\"), \": The authors leveraged two GPUs in parallel to train the model more efficiently. This was one of the earliest demonstrations that GPU acceleration could handle large-scale deep networks.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Local response normalization (LRN)\"), \": At the time, LRN was used to help the network generalize better, though subsequent architectures often replaced LRN with batch normalization or removed it entirely.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Overlapping pooling\"), \": Instead of using disjoint pooling regions, AlexNet used overlapping windows, which sometimes yields better performance.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"A typical AlexNet architecture consists of:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Input layer\"), \" for 224<times224 RGB images.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Convolutional layers\"), \": Five convolutional layers in total, often with some grouped convolutions due to GPU memory constraints at the time.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Normalization layers (LRN)\"), \": Inserted after the first and second convolutional layers in the original design.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Pooling layers\"), \": Max pooling layers after certain convolutions.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Fully connected layers\"), \": Three large fully connected layers (FC6, FC7, FC8), culminating in a 1000-way softmax for ImageNet classification.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Below is a simplified illustration:\"), \"\\n\", React.createElement(Image, {\n    alt: \"AlexNet architecture diagram\",\n    path: \"\",\n    caption: \"An overview of the AlexNet architecture for ImageNet classification.\",\n    zoom: \"false\"\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"use-cases-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#use-cases-1\",\n    \"aria-label\": \"use cases 1 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Use cases\"), \"\\n\", React.createElement(_components.p, null, \"AlexNet shines in:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Large-scale image classification\"), \": Designed for ImageNet-sized tasks (1,000 classes, ~1.2M training images).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Feature extraction\"), \": Early layers of AlexNet can be used to extract generic features from images, applicable to tasks beyond classification (e.g., transfer learning).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Computer vision research\"), \": Provided a baseline that future architectures improved upon (e.g., VGG, Inception, ResNet).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"In modern practice, AlexNet is no longer considered state-of-the-art. However, it remains historically significant, and it's a valuable stepping stone for those learning about the evolution of CNN architectures.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"advantages-and-disadvantages-of-alexnet\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#advantages-and-disadvantages-of-alexnet\",\n    \"aria-label\": \"advantages and disadvantages of alexnet permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Advantages and disadvantages of alexnet\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Advantages\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Pioneered deep CNN success on large-scale datasets.\"), \"\\n\", React.createElement(_components.li, null, \"Demonstrated the effectiveness of ReLU activations and GPU-based training.\"), \"\\n\", React.createElement(_components.li, null, \"Provided an architecture that was relatively easy to adapt for other tasks.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Disadvantages\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Very large model: Over 60 million parameters, making it memory-intensive.\"), \"\\n\", React.createElement(_components.li, null, \"Convolutions in the first layers used large kernels (often 11<times11, or 7<times7 in some revised versions), which might not be as parameter-efficient by today's standards.\"), \"\\n\", React.createElement(_components.li, null, \"LRN is rarely used now, and the architecture doesn't incorporate modern best practices like batch normalization.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"step-by-step-implementation-of-alexnet-tensorflowkeras\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#step-by-step-implementation-of-alexnet-tensorflowkeras\",\n    \"aria-label\": \"step by step implementation of alexnet tensorflowkeras permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Step-by-step implementation of alexnet (tensorflow/keras)\"), \"\\n\", React.createElement(_components.p, null, \"Below is a Keras example that captures the general flow of AlexNet-like architectures. It does not strictly replicate the original two-GPU setup or the exact grouping mechanism, but it serves as a demonstration.\"), \"\\n\", React.createElement(Code, {\n    text: `\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models\n\ndef create_alexnet(input_shape=(224, 224, 3), num_classes=1000):\n    model = models.Sequential()\n\n    # First convolutional layer \n    # Original paper: 96 filters of size 11x11, stride = 4, with ReLU activation\n    model.add(layers.Conv2D(filters=96, kernel_size=(11, 11), strides=(4, 4), \n                            activation='relu', input_shape=input_shape, padding='valid'))\n    # LRN or batch normalization can be used; here we omit for simplicity\n    # model.add(layers.Lambda(...))  # This can represent LRN if you decide to implement it\n\n    model.add(layers.MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))\n\n    # Second convolutional layer\n    model.add(layers.Conv2D(filters=256, kernel_size=(5, 5), padding='same', activation='relu'))\n    model.add(layers.MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))\n\n    # Third convolutional layer\n    model.add(layers.Conv2D(filters=384, kernel_size=(3, 3), padding='same', activation='relu'))\n\n    # Fourth convolutional layer\n    model.add(layers.Conv2D(filters=384, kernel_size=(3, 3), padding='same', activation='relu'))\n\n    # Fifth convolutional layer\n    model.add(layers.Conv2D(filters=256, kernel_size=(3, 3), padding='same', activation='relu'))\n    model.add(layers.MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))\n\n    # Flatten\n    model.add(layers.Flatten())\n\n    # Fully connected layers\n    model.add(layers.Dense(4096, activation='relu'))\n    model.add(layers.Dense(4096, activation='relu'))\n    model.add(layers.Dense(num_classes, activation='softmax'))\n    \n    return model\n\nif __name__ == '__main__':\n    alexnet_model = create_alexnet()\n    alexnet_model.compile(\n        optimizer=tf.keras.optimizers.SGD(learning_rate=0.01, momentum=0.9),\n        loss='categorical_crossentropy',\n        metrics=['accuracy']\n    )\n    alexnet_model.summary()\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"When training such a model on ImageNet or similarly large data sets, you'll need significant computational power (GPUs or TPUs) and a robust training strategy (e.g., data augmentation, learning rate scheduling). Modern frameworks would typically incorporate batch normalization and advanced regularization to yield improved performance compared to the original AlexNet design.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"vggnet\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#vggnet\",\n    \"aria-label\": \"vggnet permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"VGGNet\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"details-and-architecture-of-vggnet\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#details-and-architecture-of-vggnet\",\n    \"aria-label\": \"details and architecture of vggnet permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Details and architecture of vggnet\"), \"\\n\", React.createElement(_components.p, null, \"VGGNet (Simonyan and Zisserman, ICLR 2015) builds on the success of AlexNet by emphasizing architectural simplicity: it uses very small \", React.createElement(Latex, {\n    text: \"\\\\(3 \\\\times 3\\\\)\"\n  }), \" convolution filters stacked in increasing depths. The key architectural principle behind VGG is that sequences of small convolutions can simulate larger effective receptive fields with fewer parameters and better performance.\"), \"\\n\", React.createElement(_components.p, null, \"The hallmark design pattern of a VGGNet is a series of blocks. Each block consists of:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Convolution layers\"), \": Each with \", React.createElement(Latex, {\n    text: \"\\\\(3 \\\\times 3\\\\)\"\n  }), \" kernels, stride of 1, and padding of 1 to maintain spatial resolution.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"ReLU activation\"), \": After each convolution.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Pooling layer\"), \": Typically max pooling \", React.createElement(Latex, {\n    text: \"\\\\(2 \\\\times 2\\\\)\"\n  }), \" with stride 2 at the end of each block to reduce spatial dimensions.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"By systematically doubling the number of filters after each block (e.g., 64 -> 128 -> 256 -> 512 -> 512), VGGNet can learn a deep hierarchy of features while still being fairly straightforward in structure. However, the deeper variants (VGG-16, VGG-19) can have hundreds of millions of parameters, making them quite large for practical deployment without specialized hardware or compression techniques.\"), \"\\n\", React.createElement(_components.p, null, \"Below is a basic blueprint of the VGGNet approach:\"), \"\\n\", React.createElement(Image, {\n    alt: \"VGGNet block diagram\",\n    path: \"\",\n    caption: \"A conceptual look at VGGNet blocks. Each block has multiple Conv+ReLU layers followed by a pooling layer, culminating in fully connected layers and an output.\",\n    zoom: \"false\"\n  }), \"\\n\", React.createElement(_components.h3, {\n    id: \"use-cases-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#use-cases-2\",\n    \"aria-label\": \"use cases 2 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Use cases\"), \"\\n\", React.createElement(_components.p, null, \"VGGNet is extremely popular for:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Transfer learning\"), \": Pretrained versions of VGG-16 or VGG-19 often serve as feature extractors for various tasks (e.g., object detection, semantic segmentation, style transfer).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Academic research\"), \": Its simplicity makes it an easy baseline for investigating new ideas like new activation functions, normalization layers, or layer initialization methods.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Benchmarking hardware\"), \": Because VGG requires extensive computations, it has often been used to benchmark GPUs and other accelerators.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"advantages-and-disadvantages-of-vggnet\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#advantages-and-disadvantages-of-vggnet\",\n    \"aria-label\": \"advantages and disadvantages of vggnet permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Advantages and disadvantages of vggnet\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Advantages\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Simple, systematic design: Very easy to interpret or adapt.\"), \"\\n\", React.createElement(_components.li, null, \"Strong baseline: Often outperforms older architectures like AlexNet on a variety of tasks.\"), \"\\n\", React.createElement(_components.li, null, \"Transfer learning usage: The robust feature hierarchy makes VGGNet a powerful generic feature extractor.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Disadvantages\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Very large in terms of parameters: VGG-16 has around 138 million parameters. This can make training and inference expensive.\"), \"\\n\", React.createElement(_components.li, null, \"Memory-intensive: Storing intermediate activations for deeper variants can be prohibitive if you have limited GPU memory.\"), \"\\n\", React.createElement(_components.li, null, \"Slower inference compared to more modern lightweight architectures (e.g., MobileNet).\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"vgg-16-vgg-19\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#vgg-16-vgg-19\",\n    \"aria-label\": \"vgg 16 vgg 19 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"VGG-16, VGG-19\"), \"\\n\", React.createElement(_components.p, null, \"Both VGG-16 and VGG-19 differ primarily in the number of convolutional layers in their deepest block configurations:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"VGG-16\"), \": 13 convolution layers + 3 fully connected layers = 16 total layers.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"VGG-19\"), \": 16 convolution layers + 3 fully connected layers = 19 total layers.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"They both share the same architecture pattern:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Convolution block (64 filters) repeated.\"), \"\\n\", React.createElement(_components.li, null, \"Pooling.\"), \"\\n\", React.createElement(_components.li, null, \"Convolution block (128 filters) repeated.\"), \"\\n\", React.createElement(_components.li, null, \"Pooling.\"), \"\\n\", React.createElement(_components.li, null, \"Convolution block (256 filters) repeated.\"), \"\\n\", React.createElement(_components.li, null, \"Pooling.\"), \"\\n\", React.createElement(_components.li, null, \"Convolution block (512 filters) repeated.\"), \"\\n\", React.createElement(_components.li, null, \"Pooling.\"), \"\\n\", React.createElement(_components.li, null, \"Convolution block (512 filters) repeated.\"), \"\\n\", React.createElement(_components.li, null, \"Pooling, flatten, fully connected, output.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"step-by-step-implementation-of-vggnet-tensorflowkeras\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#step-by-step-implementation-of-vggnet-tensorflowkeras\",\n    \"aria-label\": \"step by step implementation of vggnet tensorflowkeras permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Step-by-step implementation of vggnet (tensorflow/keras)\"), \"\\n\", React.createElement(_components.p, null, \"Below is an example of implementing a simplified VGG-16-like model in TensorFlow/Keras:\"), \"\\n\", React.createElement(Code, {\n    text: `\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models\n\ndef create_vgg16(input_shape=(224, 224, 3), num_classes=1000):\n    model = models.Sequential()\n\n    # Block 1\n    model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same', \n                            input_shape=input_shape))\n    model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same'))\n    model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n\n    # Block 2\n    model.add(layers.Conv2D(128, (3, 3), activation='relu', padding='same'))\n    model.add(layers.Conv2D(128, (3, 3), activation='relu', padding='same'))\n    model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n\n    # Block 3\n    model.add(layers.Conv2D(256, (3, 3), activation='relu', padding='same'))\n    model.add(layers.Conv2D(256, (3, 3), activation='relu', padding='same'))\n    model.add(layers.Conv2D(256, (3, 3), activation='relu', padding='same'))\n    model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n\n    # Block 4\n    model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same'))\n    model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same'))\n    model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same'))\n    model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n\n    # Block 5\n    model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same'))\n    model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same'))\n    model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same'))\n    model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n\n    # Fully connected part\n    model.add(layers.Flatten())\n    model.add(layers.Dense(4096, activation='relu'))\n    model.add(layers.Dense(4096, activation='relu'))\n    model.add(layers.Dense(num_classes, activation='softmax'))\n\n    return model\n\nif __name__ == '__main__':\n    vgg16_model = create_vgg16()\n    vgg16_model.compile(\n        optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),\n        loss='categorical_crossentropy',\n        metrics=['accuracy']\n    )\n    vgg16_model.summary()\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"While this implementation captures the essence of VGG-16, in practice you'd likely use a pretrained version from a library (e.g., \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">tf.keras.applications.VGG16</code>\"\n    }\n  }), \") for transfer learning, and you might freeze certain layers or replace the final classifier layers according to your task.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"mobilenet\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#mobilenet\",\n    \"aria-label\": \"mobilenet permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"MobileNet\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"details-and-architecture-of-mobilenet\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#details-and-architecture-of-mobilenet\",\n    \"aria-label\": \"details and architecture of mobilenet permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Details and architecture of mobilenet\"), \"\\n\", React.createElement(_components.p, null, \"Introduced by Howard and gang (arXiv:1704.04861, 2017), MobileNet is a CNN architecture designed for efficient computation on mobile and embedded devices. The main idea behind MobileNet is to drastically reduce the computational and memory requirements of typical CNNs while retaining a high level of accuracy. It uses \", React.createElement(_components.strong, null, \"depthwise separable convolutions\"), \" as its core building block, replacing the standard convolution with two distinct operations:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Depthwise convolution\"), \": Applies a single convolution filter per input channel.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Pointwise convolution\"), \": Uses \", React.createElement(Latex, {\n    text: \"\\\\(1 \\\\times 1\\\\)\"\n  }), \" kernels to combine the outputs of the depthwise convolution into new feature maps.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"By factorizing a standard convolution into these two separate stages, MobileNet achieves fewer parameters and faster inference on resource-constrained devices (e.g., smartphones).\"), \"\\n\", React.createElement(_components.p, null, \"Additionally, MobileNet introduces two hyperparameters to balance the trade-off between latency and accuracy:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Width multiplier \", React.createElement(Latex, {\n    text: \"\\\\(\\\\alpha\\\\)\"\n  })), \": Scales the number of filters in each layer.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Resolution multiplier \", React.createElement(Latex, {\n    text: \"\\\\(\\\\rho\\\\)\"\n  })), \": Scales the input resolution.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"use-cases-3\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#use-cases-3\",\n    \"aria-label\": \"use cases 3 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Use cases\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Embedded devices\"), \": Ideal for applications where memory and compute resources are limited, such as mobile phones and edge devices.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Real-time inference\"), \": For tasks requiring minimal latency (like real-time camera processing).\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Transfer learning for small footprints\"), \": Pretrained MobileNet can be fine-tuned for specialized tasks while preserving efficiency.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"advantages-and-disadvantages-of-mobilenet\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#advantages-and-disadvantages-of-mobilenet\",\n    \"aria-label\": \"advantages and disadvantages of mobilenet permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Advantages and disadvantages of mobilenet\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Advantages\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"High efficiency: Greatly reduced parameter count and faster inference time.\"), \"\\n\", React.createElement(_components.li, null, \"Flexible hyperparameters: Ability to trade off between model size and accuracy.\"), \"\\n\", React.createElement(_components.li, null, \"Widely adopted on mobile frameworks: Commonly found in frameworks like TensorFlow Lite.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Disadvantages\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Slight accuracy drop: Typically less accurate compared to heavier models (e.g., ResNet, VGG) on large-scale benchmarks, although the gap has shrunk with improvements like MobileNetV2, MobileNetV3.\"), \"\\n\", React.createElement(_components.li, null, \"Less capacity: For highly complex tasks or high-resolution imagery, you might need more advanced or bigger architectures.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"step-by-step-implementation-of-mobilenet-tensorflowkeras\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#step-by-step-implementation-of-mobilenet-tensorflowkeras\",\n    \"aria-label\": \"step by step implementation of mobilenet tensorflowkeras permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Step-by-step implementation of mobilenet (tensorflow/keras)\"), \"\\n\", React.createElement(_components.p, null, \"Below is a simplified example of implementing a MobileNet-like architecture in TensorFlow/Keras:\"), \"\\n\", React.createElement(Code, {\n    text: `\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models\n\n# Depthwise + pointwise convolution block\ndef depthwise_separable_conv_block(inputs, pointwise_filters, stride=1):\n    x = layers.DepthwiseConv2D(kernel_size=(3,3), strides=stride, padding='same')(inputs)\n    x = layers.BatchNormalization()(x)\n    x = layers.ReLU(6.0)(x)  # typical ReLU6 used in MobileNet\n\n    x = layers.Conv2D(pointwise_filters, kernel_size=(1,1), padding='same')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.ReLU(6.0)(x)\n    return x\n\ndef create_mobilenet(input_shape=(224, 224, 3), alpha=1.0, num_classes=1000):\n    inputs = layers.Input(shape=input_shape)\n    \n    # Initial convolution layer\n    x = layers.Conv2D(int(32*alpha), kernel_size=(3,3), strides=(2,2), padding='same')(inputs)\n    x = layers.BatchNormalization()(x)\n    x = layers.ReLU(6.0)(x)\n\n    # Define the depthwise separable blocks\n    # Typical pattern for MobileNet: stride = 1 or 2 depending on layer\n    # This is a simplified sequence\n    layer_configs = [\n        (64, 1),\n        (128, 2),\n        (128, 1),\n        (256, 2),\n        (256, 1),\n        (512, 2),\n        # Then typically 5 blocks with 512 filters each with stride=1\n        (512, 1),\n        (512, 1),\n        (512, 1),\n        (512, 1),\n        (512, 1),\n        (1024, 2),\n        (1024, 1)\n    ]\n\n    for (filters, stride) in layer_configs:\n        x = depthwise_separable_conv_block(x, int(filters*alpha), stride=stride)\n\n    # Global average pooling\n    x = layers.GlobalAveragePooling2D()(x)\n    # Fully connected layer (classifier)\n    outputs = layers.Dense(num_classes, activation='softmax')(x)\n\n    model = models.Model(inputs, outputs)\n    return model\n\nif __name__ == '__main__':\n    mobilenet_model = create_mobilenet()\n    mobilenet_model.compile(\n        optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n        loss='categorical_crossentropy',\n        metrics=['accuracy']\n    )\n    mobilenet_model.summary()\n`\n  }), \"\\n\", React.createElement(_components.p, null, \"This snippet captures the core principle of MobileNet: replacing standard convolutions with a depthwise separable convolution block. MobileNetV2 and MobileNetV3 build upon the same foundation but improve accuracy and reduce latency further via techniques such as inverted residuals and squeeze-and-excitation modules.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"network-in-network-nin\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#network-in-network-nin\",\n    \"aria-label\": \"network in network nin permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Network in network (nin)\"), \"\\n\", React.createElement(_components.p, null, \"Network in Network (NiN) was introduced by Lin, Chen, and Yan (ICLR 2014). The NiN architecture proposes a novel approach: instead of using a single linear filter at each convolution layer to produce feature maps, NiN uses a \", React.createElement(_components.strong, null, \"micro-network\"), \" (typically a multilayer perceptron) to generate more abstract representations within each local receptive field. This is often approximated or described as \", React.createElement(_components.strong, null, \"1<times1 convolutions\"), \" combined with non-linear activations, which help the network learn more complex local feature transformations.\"), \"\\n\", React.createElement(_components.p, null, \"In many CNN architectures (such as AlexNet and VGG), the \", React.createElement(Latex, {\n    text: \"\\\\(1 \\\\times 1\\\\)\"\n  }), \" convolution is seen as a \\\"bottleneck\\\" or \\\"pointwise\\\" convolution. NiN extended this concept by stacking multiple \", React.createElement(Latex, {\n    text: \"\\\\(1 \\\\times 1\\\\)\"\n  }), \" filters with non-linear activations, effectively forming a tiny MLP that operates across the channels of each spatial position. The NiN modules are often described as:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\text{NiN block}(X) = \\\\sigma\\\\bigl(W_1 * X\\\\bigr), \\\\quad \\\\sigma\\\\bigl(W_2 * X\\\\bigr), \\\\quad \\\\sigma\\\\bigl(W_3 * X\\\\bigr),\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"where each \", React.createElement(Latex, {\n    text: \"\\\\(W_i\\\\)\"\n  }), \" is a set of \", React.createElement(Latex, {\n    text: \"\\\\(1 \\\\times 1\\\\)\"\n  }), \" filters, and \", React.createElement(Latex, {\n    text: \"\\\\(\\\\sigma\\\\)\"\n  }), \" is a non-linear activation function.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Advantages\"), \":\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Allows for more complex transformations within each local receptive field.\"), \"\\n\", React.createElement(_components.li, null, \"Reduces the number of parameters in some cases compared to using bigger convolution filters.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Disadvantages\"), \":\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"If not used carefully, can lead to overfitting, as these additional parameters can significantly increase the model capacity.\"), \"\\n\", React.createElement(_components.li, null, \"Sometimes overshadowed by more advanced and widely adopted architectures (ResNet, Inception, etc.).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Despite not being the most popular architecture in mainstream usage, NiN's concept of \", React.createElement(Latex, {\n    text: \"\\\\(1 \\\\times 1\\\\)\"\n  }), \" \\\"micro-networks\\\" heavily inspired later designs (e.g., Inception modules that make extensive use of \", React.createElement(Latex, {\n    text: \"\\\\(1 \\\\times 1\\\\)\"\n  }), \" convolutions).\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"residual-connections\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#residual-connections\",\n    \"aria-label\": \"residual connections permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Residual connections\"), \"\\n\", React.createElement(_components.p, null, \"Residual connections, popularized by He and gang (CVPR 2016) in the \", React.createElement(_components.strong, null, \"ResNet\"), \" family of architectures, represent one of the most critical breakthroughs in deep CNN design. The driving motivation behind residual connections is to mitigate the \", React.createElement(_components.strong, null, \"vanishing gradient\"), \" and \", React.createElement(_components.strong, null, \"degradation\"), \" problems that arise when training very deep networks.\"), \"\\n\", React.createElement(_components.p, null, \"A residual block typically looks like:\"), \"\\n\", React.createElement(Image, {\n    alt: \"Basic ResNet residual block\",\n    path: \"\",\n    caption: \"A simplified depiction of a residual block. The input is added to the output of a series of convolutions and activations, forming a skip connection.\",\n    zoom: \"false\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Mathematically, if we let \", React.createElement(Latex, {\n    text: \"\\\\(F(x)\\\\)\"\n  }), \" be the non-linear transformation (convolution, activation, etc.), then a residual block's output is:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\ny = F(x) + x.\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"The presence of the skip (or shortcut) connection that bypasses the non-linear transformations allows gradients to flow directly back to earlier layers, thus alleviating training difficulties. Empirically, ResNet architectures like ResNet-50, ResNet-101, and ResNet-152 achieve significantly better accuracy on tasks like ImageNet while also making it more feasible to train extremely deep networks.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Advantages\"), \":\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Eases training of deeper networks by mitigating gradient issues.\"), \"\\n\", React.createElement(_components.li, null, \"Empirically shown to improve generalization.\"), \"\\n\", React.createElement(_components.li, null, \"Architecture can be scaled to hundreds or even thousands of layers (e.g., ResNet variants).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Disadvantages\"), \":\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Introduces additional overhead in graph structure, though minimal.\"), \"\\n\", React.createElement(_components.li, null, \"Residual networks can still suffer from other forms of overfitting or inefficiency if not designed carefully.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Residual connections are used not only in classical CNNs but also across various deep learning architectures, from segmentation networks to generative adversarial networks (GANs) and beyond.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"inception-modules\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#inception-modules\",\n    \"aria-label\": \"inception modules permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Inception modules\"), \"\\n\", React.createElement(_components.p, null, \"Inception modules (Szegedy and gang, CVPR 2015), the backbone of \", React.createElement(_components.strong, null, \"GoogLeNet\"), \" (Inception-V1) and subsequent Inception-V2, Inception-V3, Inception-V4, etc., aim to achieve a higher level of efficiency in networks by using multiple filter sizes in parallel and then concatenating their outputs. The guiding principle is that the optimal local architecture in CNNs can vary from layer to layer. Instead of committing to a single filter size (e.g., \", React.createElement(Latex, {\n    text: \"\\\\(3 \\\\times 3\\\\)\"\n  }), \"), an Inception module tries filters of different sizes (\", React.createElement(Latex, {\n    text: \"\\\\(1 \\\\times 1\\\\)\"\n  }), \", \", React.createElement(Latex, {\n    text: \"\\\\(3 \\\\times 3\\\\)\"\n  }), \", \", React.createElement(Latex, {\n    text: \"\\\\(5 \\\\times 5\\\\)\"\n  }), \") plus pooling, and then merges these transformations.\"), \"\\n\", React.createElement(_components.p, null, \"A simplified Inception module might look like:\"), \"\\n\", React.createElement(Image, {\n    alt: \"Inception module block\",\n    path: \"\",\n    caption: \"A simplified Inception module showing parallel branches of different convolution/pooling operations, whose outputs are then concatenated.\",\n    zoom: \"false\"\n  }), \"\\n\", React.createElement(_components.p, null, \"The usage of \", React.createElement(Latex, {\n    text: \"\\\\(1 \\\\times 1\\\\)\"\n  }), \" convolutions before the larger convolutions helps reduce dimensionality and thus computational cost. More advanced versions (Inception-V2, Inception-V3) incorporate factorized convolutions (e.g., splitting \", React.createElement(Latex, {\n    text: \"\\\\(5 \\\\times 5\\\\)\"\n  }), \" into two \", React.createElement(Latex, {\n    text: \"\\\\(3 \\\\times 3\\\\)\"\n  }), \" convolutions), batch normalization, or additional techniques to improve accuracy and efficiency.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Advantages\"), \":\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Effectively captures features at multiple scales.\"), \"\\n\", React.createElement(_components.li, null, \"Reduces parameter count by carefully factoring convolutions with \", React.createElement(Latex, {\n    text: \"\\\\(1 \\\\times 1\\\\)\"\n  }), \" bottlenecks.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Disadvantages\"), \":\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"The architecture is more complex to design and tune.\"), \"\\n\", React.createElement(_components.li, null, \"Not as lightweight as architectures specifically optimized for mobile deployment (e.g., MobileNet).\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"depthwise-separable-convolutions\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#depthwise-separable-convolutions\",\n    \"aria-label\": \"depthwise separable convolutions permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Depthwise separable convolutions\"), \"\\n\", React.createElement(_components.p, null, \"As introduced earlier in the MobileNet discussion, depthwise separable convolutions decompose a standard convolution into two steps:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Depthwise convolution\"), \": A filter for each input channel that acts on the spatial dimension.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Pointwise convolution\"), \": A \", React.createElement(Latex, {\n    text: \"\\\\(1 \\\\times 1\\\\)\"\n  }), \" filter that projects the output of the depthwise convolution onto a new feature space.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Formally, if the standard convolution has a computational cost of \", React.createElement(Latex, {\n    text: \"\\\\(O(D_k \\\\times D_k \\\\times M \\\\times N \\\\times D_f \\\\times D_f)\\\\)\"\n  }), \", where \", React.createElement(Latex, {\n    text: \"\\\\(D_k\\\\)\"\n  }), \" is kernel size, \", React.createElement(Latex, {\n    text: \"\\\\(M\\\\)\"\n  }), \" is the number of input channels, \", React.createElement(Latex, {\n    text: \"\\\\(N\\\\)\"\n  }), \" is the number of output channels, and \", React.createElement(Latex, {\n    text: \"\\\\(D_f\\\\)\"\n  }), \" is the spatial dimension of the feature map, a depthwise separable convolution has a cost of \", React.createElement(Latex, {\n    text: \"\\\\(O(D_k \\\\times D_k \\\\times M \\\\times D_f \\\\times D_f + M \\\\times N \\\\times D_f \\\\times D_f)\\\\)\"\n  }), \". This factorization often yields fewer operations if \", React.createElement(Latex, {\n    text: \"\\\\(D_k\\\\)\"\n  }), \" is large relative to \", React.createElement(Latex, {\n    text: \"\\\\(M\\\\)\"\n  }), \" and \", React.createElement(Latex, {\n    text: \"\\\\(N\\\\)\"\n  }), \".\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Advantages\"), \":\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Significant reduction in computational complexity.\"), \"\\n\", React.createElement(_components.li, null, \"Applicable to many architectures (MobileNet, Xception, etc.) for improved efficiency.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Disadvantages\"), \":\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"May slightly reduce accuracy compared to standard convolutions if there's insufficient capacity or suboptimal hyperparameter tuning.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"dilated-convolutions\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#dilated-convolutions\",\n    \"aria-label\": \"dilated convolutions permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Dilated convolutions\"), \"\\n\", React.createElement(_components.p, null, \"Dilated (or atrous) convolutions introduce spacing between the kernel elements, effectively expanding the receptive field without increasing the number of parameters. Instead of sampling adjacent pixels, a dilated convolution samples pixels or feature map values at intervals. Formally, a dilated convolution for dilation rate \", React.createElement(Latex, {\n    text: \"\\\\(r\\\\)\"\n  }), \" is:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n(\\\\text{DilatedConv}(I, K, r))(x, y) = \\\\sum_{a=-\\\\alpha}^{\\\\alpha} \\\\sum_{b=-\\\\beta}^{\\\\beta} I(x+ra, y+rb)\\\\,K(a, b).\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"When \", React.createElement(Latex, {\n    text: \"\\\\(r = 1\\\\)\"\n  }), \", it's a standard convolution. Larger values of \", React.createElement(Latex, {\n    text: \"\\\\(r\\\\)\"\n  }), \" expand the receptive field exponentially, allowing the network to capture global context in fewer layers. This approach is popular in semantic segmentation networks, such as DeepLab, which rely on wide receptive fields to capture object contexts in images without resorting to large downsampling or large kernel sizes.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Advantages\"), \":\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Expands receptive field without extra parameters or pooling.\"), \"\\n\", React.createElement(_components.li, null, \"Preserves spatial resolution better than large pooling.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Disadvantages\"), \":\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Introduces grid artifacts if not carefully designed.\"), \"\\n\", React.createElement(_components.li, null, \"May require careful combination with other components (like multi-scale features) for best results.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"grouped-convolutions\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#grouped-convolutions\",\n    \"aria-label\": \"grouped convolutions permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Grouped convolutions\"), \"\\n\", React.createElement(_components.p, null, \"Grouped convolutions, used notably in AlexNet (due to GPU memory constraints) and in ResNeXt (a variant of ResNet), split the input channels into groups and apply convolution within each group. Concretely, if you have \", React.createElement(Latex, {\n    text: \"\\\\(M\\\\)\"\n  }), \" input channels and want \", React.createElement(Latex, {\n    text: \"\\\\(g\\\\)\"\n  }), \" groups, each group would handle \", React.createElement(Latex, {\n    text: \"\\\\(M / g\\\\)\"\n  }), \" channels independently. The outputs of each group are concatenated along the channel dimension.\"), \"\\n\", React.createElement(_components.p, null, \"In a standard convolution, the cost is \", React.createElement(Latex, {\n    text: \"\\\\(O(M \\\\times N \\\\times D_k^2 \\\\times D_f^2)\\\\)\"\n  }), \". With grouped convolution:\"), \"\\n\", React.createElement(Latex, {\n    text: \"\\\\[\\n\\\\text{Cost} = g \\\\times O\\\\left(\\\\frac{M}{g} \\\\times \\\\frac{N}{g} \\\\times D_k^2 \\\\times D_f^2\\\\right) = \\\\frac{MN}{g} D_k^2 D_f^2.\\n\\\\]\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Hence, grouping can reduce computational complexity when \", React.createElement(Latex, {\n    text: \"\\\\(g\\\\)\"\n  }), \" > 1. However, if \", React.createElement(Latex, {\n    text: \"\\\\(g\\\\)\"\n  }), \" is too large relative to \", React.createElement(Latex, {\n    text: \"\\\\(M\\\\)\"\n  }), \" or \", React.createElement(Latex, {\n    text: \"\\\\(N\\\\)\"\n  }), \", it might hamper feature fusion across different channel groups, potentially reducing accuracy unless carefully managed. ResNeXt (Xie and gang, CVPR 2017) used grouped convolutions with the idea of increasing the \\\"cardinality\\\" (the number of groups) as an additional dimension of network design, parallel to depth and width.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Advantages\"), \":\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Reduced computational and memory cost compared to full convolutions if used appropriately.\"), \"\\n\", React.createElement(_components.li, null, \"Allows a form of parallel feature extraction in separate channel groups.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Disadvantages\"), \":\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Potentially reduces representational power if the grouping is not balanced.\"), \"\\n\", React.createElement(_components.li, null, \"More complex design decisions: how many groups to use, interplay with the overall network architecture.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"deployment-and-optimization\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#deployment-and-optimization\",\n    \"aria-label\": \"deployment and optimization permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Deployment and optimization\"), \"\\n\", React.createElement(_components.p, null, \"After designing or choosing a CNN architecture — be it something classic like LeNet, AlexNet, or VGGNet, or more modern like MobileNet with depthwise separable convolutions — the next big challenge is \", React.createElement(_components.strong, null, \"deployment and optimization\"), \". This includes everything from compressing the model for faster inference to scaling training across multiple machines or specialized hardware.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"model-compression-pruning-quantization\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#model-compression-pruning-quantization\",\n    \"aria-label\": \"model compression pruning quantization permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Model compression (pruning, quantization)\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Model pruning\"), \": Involves removing weights that are deemed insignificant. Techniques like \", React.createElement(_components.strong, null, \"magnitude-based pruning\"), \" remove weights below a certain threshold, while more advanced methods might consider the sensitivity of each layer or channel. Pruning can reduce model size and improve inference speed, especially if the pruning pattern is hardware-friendly (structured pruning).\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Quantization\"), \": Instead of using 32-bit floating-point weights, you can quantize parameters (and sometimes activations) to 16-bit, 8-bit, or even lower-precision formats. In an 8-bit quantized model, weights are stored and computed with 8 bits instead of 32 bits. This can yield a 4x reduction in model size and speed up inference on devices that support integer arithmetic acceleration. However, quantization sometimes introduces accuracy degradation if not carefully calibrated, and certain layers might be more sensitive to lower precision.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Knowledge distillation\"), \": Another relevant compression technique is \", React.createElement(_components.strong, null, \"knowledge distillation\"), \", where you train a smaller \\\"student\\\" model to mimic the outputs of a larger \\\"teacher\\\" model, encouraging the student to learn the teacher's softer distribution of outputs. This method can yield a more compact student model that approaches the accuracy of the teacher.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"gputpu-acceleration\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#gputpu-acceleration\",\n    \"aria-label\": \"gputpu acceleration permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"GPU/TPU acceleration\"), \"\\n\", React.createElement(_components.p, null, \"Graphics Processing Units (GPUs) have become the mainstay of training deep neural networks due to their highly parallel architecture, which handles matrix and vector computations efficiently. When scaling beyond a single GPU, you might distribute computations across multiple GPUs in a single machine or across multiple machines.\"), \"\\n\", React.createElement(_components.p, null, \"Tensor Processing Units (TPUs), developed by Google, are specialized ASICs designed to accelerate TensorFlow computations, particularly for large-scale matrix multiplications commonly found in neural networks. TPUs are integrated into cloud environments (like Google Cloud Platform), offering large-scale, distributed training resources.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"distributed-training\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#distributed-training\",\n    \"aria-label\": \"distributed training permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Distributed training\"), \"\\n\", React.createElement(_components.p, null, \"Distributed training can be done in multiple ways:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Data parallelism\"), \": Each worker holds a copy of the model, processes a different batch of data, and then gradients are averaged or reduced across workers.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Model parallelism\"), \": Different parts (layers) of the model are split across workers. This is sometimes used for extremely large models that cannot fit into a single worker's memory.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Pipeline parallelism\"), \": Splits the layers among multiple devices and processes different micro-batches in a pipeline.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Frameworks like TensorFlow's \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">tf.distribute.Strategy</code>\"\n    }\n  }), \", PyTorch's \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">DistributedDataParallel</code>\"\n    }\n  }), \", and specialized libraries from HPC contexts can handle the complexities of synchronization, checkpointing, and fault tolerance.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"real-world-deployment-challenges\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#real-world-deployment-challenges\",\n    \"aria-label\": \"real world deployment challenges permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Real-world deployment challenges\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Latency constraints\"), \": Many real-time applications cannot tolerate slow inference. Models must be optimized, quantized, or pruned. Sometimes GPU or specialized hardware might be necessary.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Memory limitations\"), \": On embedded or mobile devices, memory is at a premium. Techniques like compression, partial offloading, or adopting architectures specifically designed for low memory usage (e.g., MobileNet, SqueezeNet) are crucial.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Scalability\"), \": If the application needs to handle millions of requests per day, the model might run on a cluster with load balancing.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Maintenance and versioning\"), \": Continual improvements or data updates can require re-training and re-deploying. Proper MLOps pipelines ensure seamless transitions, rollback mechanisms, and consistent performance monitoring.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Security\"), \": In adversarial ML contexts, CNNs deployed in production can be subjected to adversarial attacks. Proper security measures and robust defenses (like adversarial training or input sanitization) are relevant.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, {\n    id: \"conclusion-for-the-article\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#conclusion-for-the-article\",\n    \"aria-label\": \"conclusion for the article permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Conclusion for the article\"), \"\\n\", React.createElement(_components.p, null, \"In this article, I discussed a broad range of CNN architectures and design innovations, continuing the journey from the historical significance of LeNet, through the revolutionary advances in AlexNet and VGGNet, and arriving at more computationally efficient paradigms such as MobileNet. Along the way, we explored specialized techniques and building blocks like Network in Network, residual connections, Inception modules, depthwise separable convolutions, dilated convolutions, and grouped convolutions — each offering distinct advantages and trade-offs in terms of accuracy, parameter counts, computational cost, and architectural complexity.\"), \"\\n\", React.createElement(_components.p, null, \"When selecting an architecture for a specific task, you'll want to consider the resource constraints of your deployment environment, the size and diversity of your dataset, and the performance metrics that matter most (e.g., accuracy, latency, memory usage). In many real-world scenarios, advanced optimization strategies like pruning, quantization, knowledge distillation, and distributed training can help you strike the right balance between model performance and practicality.\"), \"\\n\", React.createElement(_components.p, null, \"These core CNN designs — from LeNet's simple but groundbreaking structure to MobileNet's cutting-edge efficiency — represent the foundations of modern computer vision. Mastering them can help you quickly grasp more advanced networks (e.g., ResNet, DenseNet, EfficientNet) and tackle a wide variety of tasks that extend beyond image classification, including segmentation, detection, and generative modeling. All these developments underscore a common theme: the synergy between architectural innovations, efficient implementation, and large-scale training can unlock powerful solutions that make computer vision accessible at scale.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/avrtt/Repos/avrtt.github.io/src/pages/posts/research/cnn_architecture_2.mdx\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React, {useState, useEffect} from 'react';\nimport {useSiteMetadata} from \"../hooks/useSiteMetadata\";\nimport RemoveMarkdown from 'remove-markdown';\nimport {ImageContext} from '../context/ImageContext';\nimport {MDXProvider} from '@mdx-js/react';\nimport Image from '../components/PostImage';\nimport {motion} from 'framer-motion';\nimport SEO from \"../components/seo\";\nimport PostBanner from '../components/PostBanner';\nimport PostBottom from '../components/PostBottom';\nimport {wordsPerMinuteAdventures, wordsPerMinuteResearch, wordsPerMinuteThoughts} from '../data/commonVariables';\nimport PartOfCourseNotice from \"../components/PartOfCourseNotice\";\nimport * as stylesButtonsCommon from \"../styles/buttons_common.module.scss\";\nimport * as stylesCustomPostLayouts from \"../styles/custom_post_layouts.module.scss\";\nimport * as stylesTableOfContents from \"../styles/table_of_contents.module.scss\";\nimport * as stylesTagBadges from \"../styles/tag_badges.module.scss\";\nfunction formatReadTime(minutes) {\n  if (minutes <= 10) return '~10 min';\n  if (minutes <= 20) return '~20 min';\n  if (minutes <= 30) return '~30 min';\n  if (minutes <= 40) return '~40 min';\n  if (minutes <= 50) return '~50 min';\n  if (minutes <= 60) return '~1 h';\n  const hours = Math.floor(minutes / 60);\n  const remainder = minutes % 60;\n  if (remainder <= 30) {\n    return `~${hours}${remainder > 0 ? '.5' : ''} h`;\n  }\n  return `~${hours + 1} h`;\n}\nconst TableOfContents = _ref => {\n  let {toc} = _ref;\n  if (!toc || !toc.items) return null;\n  const handleClick = (e, url) => {\n    e.preventDefault();\n    const targetId = url.replace('#', '');\n    const targetElement = document.getElementById(targetId);\n    if (targetElement) {\n      targetElement.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }\n  };\n  return React.createElement(\"nav\", {\n    className: stylesTableOfContents.toc\n  }, React.createElement(\"ul\", null, toc.items.map((item, index) => React.createElement(\"li\", {\n    key: index\n  }, React.createElement(\"a\", {\n    href: item.url,\n    onClick: e => handleClick(e, item.url)\n  }, item.title), item.items && React.createElement(TableOfContents, {\n    toc: {\n      items: item.items\n    }\n  })))));\n};\nexport function PostTemplate(_ref2) {\n  let {data: {mdx, allMdx, allPostImages}, children} = _ref2;\n  const {frontmatter, body, tableOfContents} = mdx;\n  const index = frontmatter.index;\n  const slug = frontmatter.slug;\n  const section = slug.split('/')[1];\n  const posts = allMdx.nodes.filter(post => post.frontmatter.slug.includes(`/${section}/`));\n  const sortedPosts = posts.sort((a, b) => a.frontmatter.index - b.frontmatter.index);\n  const currentIndex = sortedPosts.findIndex(post => post.frontmatter.index === index);\n  const nextPost = sortedPosts[currentIndex + 1];\n  const lastPost = sortedPosts[currentIndex - 1];\n  const trimmedSlug = frontmatter.slug.replace(/\\/$/, '');\n  const keyCurrent = (/[^/]*$/).exec(trimmedSlug)[0];\n  const basePath = `posts/${section}/content/${keyCurrent}/`;\n  const {0: isWideLayout, 1: setIsWideLayout} = useState(frontmatter.flagWideLayoutByDefault);\n  const {0: isAnimating, 1: setIsAnimating} = useState(false);\n  const toggleLayout = () => {\n    setIsWideLayout(!isWideLayout);\n  };\n  useEffect(() => {\n    setIsAnimating(true);\n    const timer = setTimeout(() => setIsAnimating(false), 340);\n    return () => clearTimeout(timer);\n  }, [isWideLayout]);\n  var wordsPerMinute;\n  if (section === \"adventures\") {\n    wordsPerMinute = wordsPerMinuteAdventures;\n  } else if (section === \"research\") {\n    wordsPerMinute = wordsPerMinuteResearch;\n  } else if (section === \"thoughts\") {\n    wordsPerMinute = wordsPerMinuteThoughts;\n  }\n  const plainTextBody = RemoveMarkdown(body).replace(/import .*? from .*?;/g, '').replace(/<.*?>/g, '').replace(/\\{\\/\\*[\\s\\S]*?\\*\\/\\}/g, '').trim();\n  const wordCount = plainTextBody.split(/\\s+/).length;\n  const baseReadTimeMinutes = Math.ceil(wordCount / wordsPerMinute);\n  const extraTime = frontmatter.extraReadTimeMin || 0;\n  const totalReadTime = baseReadTimeMinutes + extraTime;\n  const readTime = formatReadTime(totalReadTime);\n  const notices = [{\n    flag: frontmatter.flagDraft,\n    component: () => import(\"../components/NotFinishedNotice\")\n  }, {\n    flag: frontmatter.flagMindfuckery,\n    component: () => import(\"../components/MindfuckeryNotice\")\n  }, {\n    flag: frontmatter.flagRewrite,\n    component: () => import(\"../components/RewriteNotice\")\n  }, {\n    flag: frontmatter.flagOffensive,\n    component: () => import(\"../components/OffensiveNotice\")\n  }, {\n    flag: frontmatter.flagProfane,\n    component: () => import(\"../components/ProfanityNotice\")\n  }, {\n    flag: frontmatter.flagMultilingual,\n    component: () => import(\"../components/MultilingualNotice\")\n  }, {\n    flag: frontmatter.flagUnreliably,\n    component: () => import(\"../components/UnreliablyNotice\")\n  }, {\n    flag: frontmatter.flagPolitical,\n    component: () => import(\"../components/PoliticsNotice\")\n  }, {\n    flag: frontmatter.flagCognitohazard,\n    component: () => import(\"../components/CognitohazardNotice\")\n  }, {\n    flag: frontmatter.flagHidden,\n    component: () => import(\"../components/HiddenNotice\")\n  }];\n  const {0: loadedNotices, 1: setLoadedNotices} = useState([]);\n  useEffect(() => {\n    notices.forEach(_ref3 => {\n      let {flag, component} = _ref3;\n      if (flag) {\n        component().then(module => {\n          setLoadedNotices(prev => [].concat(_toConsumableArray(prev), [module.default]));\n        });\n      }\n    });\n  }, []);\n  return React.createElement(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.15\n    }\n  }, React.createElement(PostBanner, {\n    postNumber: frontmatter.index,\n    date: frontmatter.date,\n    updated: frontmatter.updated,\n    readTime: readTime,\n    difficulty: frontmatter.difficultyLevel,\n    title: frontmatter.title,\n    desc: frontmatter.desc,\n    banner: frontmatter.banner,\n    section: section,\n    postKey: keyCurrent,\n    isMindfuckery: frontmatter.flagMindfuckery,\n    mainTag: frontmatter.mainTag\n  }), React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      flexWrap: \"wrap\",\n      maxWidth: \"75%\",\n      marginLeft: \"auto\",\n      paddingRight: \"1vw\",\n      marginTop: \"-6vh\",\n      marginBottom: \"4vh\"\n    }\n  }, frontmatter.otherTags.map((tag, index) => React.createElement(\"span\", {\n    key: index,\n    className: `noselect ${stylesTagBadges.tagPosts}`,\n    style: {\n      margin: \"0 5px 5px 0\"\n    }\n  }, tag))), React.createElement(\"div\", {\n    className: \"postBody\"\n  }, React.createElement(TableOfContents, {\n    toc: tableOfContents\n  })), React.createElement(\"br\", null), React.createElement(\"div\", {\n    style: {\n      margin: \"0 10% -2vh 30%\",\n      textAlign: \"right\"\n    }\n  }, React.createElement(motion.button, {\n    className: `noselect ${stylesCustomPostLayouts.postButton}`,\n    id: stylesCustomPostLayouts.postLayoutSwitchButton,\n    onClick: toggleLayout,\n    whileTap: {\n      scale: 0.93\n    }\n  }, React.createElement(motion.div, {\n    className: stylesButtonsCommon.buttonTextWrapper,\n    key: isWideLayout,\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    transition: {\n      duration: 0.3,\n      ease: \"easeInOut\"\n    }\n  }, isWideLayout ? \"Switch to default layout\" : \"Switch to wide layout\"))), React.createElement(\"br\", null), React.createElement(\"div\", {\n    className: \"postBody\",\n    style: {\n      margin: isWideLayout ? \"0 -14%\" : \"\",\n      maxWidth: isWideLayout ? \"200%\" : \"\",\n      transition: \"margin 1s ease, max-width 1s ease, padding 1s ease\"\n    }\n  }, React.createElement(\"div\", {\n    className: `${stylesCustomPostLayouts.textContent} ${isAnimating ? stylesCustomPostLayouts.fadeOut : stylesCustomPostLayouts.fadeIn}`\n  }, loadedNotices.map((NoticeComponent, index) => React.createElement(NoticeComponent, {\n    key: index\n  })), frontmatter.indexCourse ? React.createElement(PartOfCourseNotice, {\n    index: frontmatter.indexCourse,\n    category: frontmatter.courseCategoryName\n  }) : \"\", React.createElement(ImageContext.Provider, {\n    value: {\n      images: allPostImages.nodes,\n      basePath: basePath.replace(/\\/$/, '') + '/'\n    }\n  }, React.createElement(MDXProvider, {\n    components: {\n      Image\n    }\n  }, children)))), React.createElement(PostBottom, {\n    nextPost: nextPost,\n    lastPost: lastPost,\n    keyCurrent: keyCurrent,\n    section: section\n  }));\n}\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport function Head(_ref4) {\n  var _frontmatter$banner, _frontmatter$banner$c, _frontmatter$banner$c2, _frontmatter$banner$c3, _frontmatter$banner$c4;\n  let {data} = _ref4;\n  const {frontmatter} = data.mdx;\n  const title = frontmatter.titleSEO || frontmatter.title;\n  const titleOG = frontmatter.titleOG || title;\n  const titleTwitter = frontmatter.titleTwitter || title;\n  const description = frontmatter.descSEO || frontmatter.desc;\n  const descriptionOG = frontmatter.descOG || description;\n  const descriptionTwitter = frontmatter.descTwitter || description;\n  const schemaType = frontmatter.schemaType || \"BlogPosting\";\n  const keywords = frontmatter.keywordsSEO;\n  const datePublished = frontmatter.date;\n  const dateModified = frontmatter.updated || datePublished;\n  const imageOG = frontmatter.imageOG || ((_frontmatter$banner = frontmatter.banner) === null || _frontmatter$banner === void 0 ? void 0 : (_frontmatter$banner$c = _frontmatter$banner.childImageSharp) === null || _frontmatter$banner$c === void 0 ? void 0 : (_frontmatter$banner$c2 = _frontmatter$banner$c.gatsbyImageData) === null || _frontmatter$banner$c2 === void 0 ? void 0 : (_frontmatter$banner$c3 = _frontmatter$banner$c2.images) === null || _frontmatter$banner$c3 === void 0 ? void 0 : (_frontmatter$banner$c4 = _frontmatter$banner$c3.fallback) === null || _frontmatter$banner$c4 === void 0 ? void 0 : _frontmatter$banner$c4.src);\n  const imageAltOG = frontmatter.imageAltOG || descriptionOG;\n  const imageTwitter = frontmatter.imageTwitter || imageOG;\n  const imageAltTwitter = frontmatter.imageAltTwitter || descriptionTwitter;\n  const canonicalUrl = frontmatter.canonicalURL;\n  const flagHidden = frontmatter.flagHidden || false;\n  const mainTag = frontmatter.mainTag || \"Posts\";\n  const section = frontmatter.slug.split('/')[1] || \"posts\";\n  const type = \"article\";\n  const {siteUrl} = useSiteMetadata();\n  const breadcrumbJSON = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    \"itemListElement\": [{\n      \"@type\": \"ListItem\",\n      \"position\": 1,\n      \"name\": \"Home\",\n      \"item\": siteUrl\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 2,\n      \"name\": mainTag,\n      \"item\": `${siteUrl}/${frontmatter.slug.split('/')[1]}`\n    }, {\n      \"@type\": \"ListItem\",\n      \"position\": 3,\n      \"name\": title,\n      \"item\": `${siteUrl}${frontmatter.slug}`\n    }]\n  };\n  return React.createElement(SEO, {\n    title: title + \" - avrtt.blog\",\n    titleOG: titleOG,\n    titleTwitter: titleTwitter,\n    description: description,\n    descriptionOG: descriptionOG,\n    descriptionTwitter: descriptionTwitter,\n    schemaType: schemaType,\n    keywords: keywords,\n    datePublished: datePublished,\n    dateModified: dateModified,\n    imageOG: imageOG,\n    imageAltOG: imageAltOG,\n    imageTwitter: imageTwitter,\n    imageAltTwitter: imageAltTwitter,\n    canonicalUrl: canonicalUrl,\n    flagHidden: flagHidden,\n    mainTag: mainTag,\n    section: section,\n    type: type\n  }, React.createElement(\"script\", {\n    type: \"application/ld+json\"\n  }, JSON.stringify(breadcrumbJSON)));\n}\nconst query = \"2571018839\";\n","/* \n\nCopyright © 2022  Vladislav Averett (avrtt)\nDistributed under the GNU AGPLv3 license. For details and source code, please refer to <https://github.com/avrtt/avrtt.github.io>.\n\n*/\n\nimport React from \"react\";\nimport Latex from 'react-latex-next';\nimport 'katex/dist/katex.min.css'; \n\ninterface LatexProps {\n  text: string;\n}\n  \nconst L = ({ text }: LatexProps) => {\n  return (\n    <Latex>{text}</Latex>\n  );\n};\nexport default L;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","a","span","h3","p","ol","li","strong","ul","hr","_provideComponents","components","Image","id","component","Error","_missingMdxReference","React","style","position","href","className","dangerouslySetInnerHTML","__html","Latex","text","alt","path","caption","zoom","Code","wrapper","MDXLayout","TableOfContents","_ref","toc","items","stylesTableOfContents","map","item","index","key","url","onClick","e","handleClick","preventDefault","targetId","replace","targetElement","document","getElementById","scrollIntoView","behavior","block","title","PostTemplate","_ref2","data","mdx","allMdx","allPostImages","children","frontmatter","body","tableOfContents","section","slug","split","sortedPosts","nodes","filter","post","includes","sort","b","currentIndex","findIndex","nextPost","lastPost","trimmedSlug","keyCurrent","exec","basePath","isWideLayout","setIsWideLayout","useState","flagWideLayoutByDefault","isAnimating","setIsAnimating","wordsPerMinute","useEffect","timer","setTimeout","clearTimeout","wordsPerMinuteAdventures","wordsPerMinuteResearch","wordsPerMinuteThoughts","wordCount","RemoveMarkdown","trim","length","readTime","minutes","hours","Math","floor","remainder","formatReadTime","ceil","extraReadTimeMin","notices","flag","flagDraft","flagMindfuckery","flagRewrite","flagOffensive","flagProfane","flagMultilingual","flagUnreliably","flagPolitical","flagCognitohazard","flagHidden","loadedNotices","setLoadedNotices","forEach","_ref3","then","module","prev","concat","_toConsumableArray","default","motion","div","initial","opacity","animate","exit","transition","duration","PostBanner","postNumber","date","updated","difficulty","difficultyLevel","desc","banner","postKey","isMindfuckery","mainTag","display","justifyContent","flexWrap","maxWidth","marginLeft","paddingRight","marginTop","marginBottom","otherTags","tag","stylesTagBadges","margin","textAlign","button","stylesCustomPostLayouts","toggleLayout","whileTap","scale","stylesButtonsCommon","ease","NoticeComponent","indexCourse","PartOfCourseNotice","category","courseCategoryName","ImageContext","Provider","value","images","MDXProvider","PostBottom","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref4","_frontmatter$banner","_frontmatter$banner$c","_frontmatter$banner$c2","_frontmatter$banner$c3","_frontmatter$banner$c4","titleSEO","titleOG","titleTwitter","description","descSEO","descriptionOG","descOG","descriptionTwitter","descTwitter","schemaType","keywords","keywordsSEO","datePublished","dateModified","imageOG","childImageSharp","gatsbyImageData","fallback","src","imageAltOG","imageTwitter","imageAltTwitter","canonicalUrl","canonicalURL","siteUrl","useSiteMetadata","breadcrumbJSON","SEO","type","JSON","stringify"],"sourceRoot":""}